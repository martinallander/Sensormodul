/*
 * Timer.c
 *
 * Created: 4/19/2018 11:44:46 AM
 *  Author: ludju571
 */ 

/*
Divide CPU clock by selected prescaler:

 16000000 / 64 = 250000 Hz
Get timer period:

 1 / 250000 = 4 us
Divide your desired period by timer period, for example 20 milliseconds:

 20000 us / 4 us = 5000 ticks
Use timer1, as timer0 and timer2 can't support more than 256 ticks:

 timer1(TIMER1_PRESCALER_64, 5000U, do_something);
Enable global interrupts:

 sei();
 */

#include "timer.h"

void (*_t0_func)();
void (*_t1_func)();
void (*_t2_func)();

void timer0(uint8_t prescaler, uint8_t ticks, void (*f)()) {
	TIMSK0 &= ~(_BV(OCIE0A));				// disable interrupt
	_t0_func = f;						// assign user function
	OCR0A = ticks;						// set top value
	TCCR0A = _BV(WGM01);				// set CTC mode
	TCCR0B = prescaler;					// set prescaler
	TCNT0 = 0;							// reset TCNT counter register
	TIMSK0 |= _BV(OCIE0A);				// enable interrupt
}

void timer0_stop() {
	TCCR0B = 0;							// set prescaler to none, disabling timer
}

#ifdef ENABLE_TIMER0
ISR(TIMER0_COMPA_vect) {
	_t0_func();
}
#endif

void timer1(uint8_t prescaler, uint16_t ticks, void (*f)()) {
	TIMSK1 &= ~(_BV(OCIE1A));
	_t1_func = f;
	OCR1A = ticks;
	TCCR1A = 0;
	TCCR1B = prescaler | _BV(WGM12);
	TCNT1 = 0;
	TIMSK1 |= _BV(OCIE1A);
}

void timer1_stop() {
	TCCR1B = 0;
}

#ifdef ENABLE_TIMER1
ISR(TIMER1_COMPA_vect) {
	_t1_func();
}
#endif

void timer2(uint8_t prescaler, uint8_t ticks, void (*f)()) {
	TIMSK2 &= ~(_BV(OCIE2A));
	_t2_func = f;
	OCR2A = ticks;
	ASSR = 0;
	TCCR2A = _BV(WGM21);
	TCCR2B = prescaler;
	TCNT2 = 0;
	TIMSK2 |= _BV(OCIE2A);
}

void timer2_stop() {
	TCCR2B = 0;
}

#ifdef ENABLE_TIMER2
ISR(TIMER2_COMPA_vect) {
	_t2_func();
}
#endif

void wait0(uint8_t prescaler, uint8_t ticks) {
	if (ticks == 0)
	return;						// return if no ticks to count
	TIMSK0 &= ~(_BV(OCIE0A));			// disable compare interrupt
	OCR0A = ticks;					// set top value
	TCCR0A = _BV(WGM01);			// set CTC mode
	TCCR0B = prescaler;				// set prescaler
	TCNT0 = 0;						// reset TCNT counter register
	TIFR0 |= _BV(OCF0A);			// reset compare flag
	while(!(TIFR0 & _BV(OCF0A)));	// wait till compare flag goes up
	TCCR0B = 0;						// stop timer to save energy
}

void wait1(uint8_t prescaler, uint16_t ticks) {
	if (ticks == 0)
	return;
	TIMSK1 &= ~(_BV(OCIE1A));
	OCR1A = ticks;
	TCCR1A = 0;
	TCCR1B = prescaler | _BV(WGM12);
	TCNT1 = 0;
	TIFR1 |= _BV(OCF1A);
	while(!(TIFR1 & _BV(OCF1A)));
	TCCR1B = 0;
}

void wait2(uint8_t prescaler, uint8_t ticks) {
	if (ticks == 0)
	return;
	TIMSK2 &= ~(_BV(OCIE2A));
	ASSR = 0;
	OCR2A = ticks;
	TCCR2A = _BV(WGM21);
	TCCR2B = prescaler;
	TCNT2 = 0;
	TIFR2 |= _BV(OCF2A);
	while(!(TIFR2 & _BV(OCF2A)));
	TCCR2B = 0;
}




	void timer0(uint8_t prescaler, uint8_t ticks, void (*f)());
	void timer1(uint8_t prescaler, uint16_t ticks, void (*f)());
	void timer2(uint8_t prescaler, uint8_t ticks, void (*f)());
	void timer0_stop();
	void timer1_stop();
	void timer2_stop();

	void wait0(uint8_t prescaler, uint8_t ticks);
	void wait1(uint8_t prescaler, uint16_t ticks);
	void wait2(uint8_t prescaler, uint8_t ticks);

	#ifdef __cplusplus
}



#ifdef __cplusplus
extern "C" {
	#endif

	#include <avr/io.h>
	#include <avr/interrupt.h>

	// Comment/delete those lines to disable interrupt definition for that timer
	// so you can define your own ISR functions without conflicts.
	#define ENABLE_TIMER0
	#define ENABLE_TIMER1
	#define ENABLE_TIMER2

	#define TIMER0_PRESCALER_NONE 0
	#define TIMER0_PRESCALER_1 1
	#define TIMER0_PRESCALER_8 2
	#define TIMER0_PRESCALER_64 3
	#define TIMER0_PRESCALER_256 4
	#define TIMER0_PRESCALER_1024 5

	#define TIMER1_PRESCALER_NONE 0
	#define TIMER1_PRESCALER_1 1
	#define TIMER1_PRESCALER_8 2
	#define TIMER1_PRESCALER_64 3
	#define TIMER1_PRESCALER_256 4
	#define TIMER1_PRESCALER_1024 5

	#define TIMER2_PRESCALER_NONE 0
	#define TIMER2_PRESCALER_1 1
	#define TIMER2_PRESCALER_8 2
	#define TIMER2_PRESCALER_32 3
	#define TIMER2_PRESCALER_64 4
	#define TIMER2_PRESCALER_128 5
	#define TIMER2_PRESCALER_256 6
	#define TIMER2_PRESCALER_1024 7
#endif 