
Sensor_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001792  00001826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  00800108  00800108  0000182e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000182e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023ac  00000000  00000000  00001a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091f  00000000  00000000  00003df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001159  00000000  00000000  00004711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  0000586c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000682  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bb5  00000000  00000000  000065be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00008173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d7 c0       	rjmp	.+430    	; 0x1b0 <__ctors_end>
       2:	00 00       	nop
       4:	f3 c0       	rjmp	.+486    	; 0x1ec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c0       	rjmp	.+482    	; 0x1ec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c0       	rjmp	.+478    	; 0x1ec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c0       	rjmp	.+474    	; 0x1ec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c0       	rjmp	.+470    	; 0x1ec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c0       	rjmp	.+466    	; 0x1ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c0       	rjmp	.+462    	; 0x1ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c0       	rjmp	.+458    	; 0x1ec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c0       	rjmp	.+454    	; 0x1ec <__bad_interrupt>
      26:	00 00       	nop
      28:	e1 c0       	rjmp	.+450    	; 0x1ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	df c0       	rjmp	.+446    	; 0x1ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	dd c0       	rjmp	.+442    	; 0x1ec <__bad_interrupt>
      32:	00 00       	nop
      34:	db c0       	rjmp	.+438    	; 0x1ec <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c0       	rjmp	.+434    	; 0x1ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	80 c6       	rjmp	.+3328   	; 0xd3e <__vector_15>
      3e:	00 00       	nop
      40:	d5 c0       	rjmp	.+426    	; 0x1ec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c0       	rjmp	.+422    	; 0x1ec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c0       	rjmp	.+418    	; 0x1ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c5       	rjmp	.+3008   	; 0xc0e <__vector_19>
      4e:	00 00       	nop
      50:	cd c0       	rjmp	.+410    	; 0x1ec <__bad_interrupt>
      52:	00 00       	nop
      54:	cb c0       	rjmp	.+406    	; 0x1ec <__bad_interrupt>
      56:	00 00       	nop
      58:	c9 c0       	rjmp	.+402    	; 0x1ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c0       	rjmp	.+398    	; 0x1ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	0a c6       	rjmp	.+3092   	; 0xc76 <__vector_24>
      62:	00 00       	nop
      64:	c3 c0       	rjmp	.+390    	; 0x1ec <__bad_interrupt>
      66:	00 00       	nop
      68:	d8 c0       	rjmp	.+432    	; 0x21a <__vector_26>
      6a:	00 00       	nop
      6c:	bf c0       	rjmp	.+382    	; 0x1ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	bd c0       	rjmp	.+378    	; 0x1ec <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c0       	rjmp	.+374    	; 0x1ec <__bad_interrupt>
      76:	00 00       	nop
      78:	b9 c0       	rjmp	.+370    	; 0x1ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c0       	rjmp	.+366    	; 0x1ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c0       	rjmp	.+362    	; 0x1ec <__bad_interrupt>
      82:	00 00       	nop
      84:	b3 c0       	rjmp	.+358    	; 0x1ec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c0       	rjmp	.+354    	; 0x1ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2e 01       	movw	r4, r28
      8e:	77 01       	movw	r14, r14
      90:	77 01       	movw	r14, r14
      92:	77 01       	movw	r14, r14
      94:	77 01       	movw	r14, r14
      96:	77 01       	movw	r14, r14
      98:	77 01       	movw	r14, r14
      9a:	77 01       	movw	r14, r14
      9c:	36 01       	movw	r6, r12
      9e:	77 01       	movw	r14, r14
      a0:	77 01       	movw	r14, r14
      a2:	77 01       	movw	r14, r14
      a4:	77 01       	movw	r14, r14
      a6:	77 01       	movw	r14, r14
      a8:	77 01       	movw	r14, r14
      aa:	77 01       	movw	r14, r14
      ac:	3f 01       	movw	r6, r30
      ae:	77 01       	movw	r14, r14
      b0:	77 01       	movw	r14, r14
      b2:	77 01       	movw	r14, r14
      b4:	77 01       	movw	r14, r14
      b6:	77 01       	movw	r14, r14
      b8:	77 01       	movw	r14, r14
      ba:	77 01       	movw	r14, r14
      bc:	47 01       	movw	r8, r14
      be:	77 01       	movw	r14, r14
      c0:	77 01       	movw	r14, r14
      c2:	77 01       	movw	r14, r14
      c4:	77 01       	movw	r14, r14
      c6:	77 01       	movw	r14, r14
      c8:	77 01       	movw	r14, r14
      ca:	77 01       	movw	r14, r14
      cc:	49 01       	movw	r8, r18
      ce:	77 01       	movw	r14, r14
      d0:	77 01       	movw	r14, r14
      d2:	77 01       	movw	r14, r14
      d4:	77 01       	movw	r14, r14
      d6:	77 01       	movw	r14, r14
      d8:	77 01       	movw	r14, r14
      da:	77 01       	movw	r14, r14
      dc:	77 01       	movw	r14, r14
      de:	77 01       	movw	r14, r14
      e0:	77 01       	movw	r14, r14
      e2:	77 01       	movw	r14, r14
      e4:	77 01       	movw	r14, r14
      e6:	77 01       	movw	r14, r14
      e8:	77 01       	movw	r14, r14
      ea:	77 01       	movw	r14, r14
      ec:	77 01       	movw	r14, r14
      ee:	77 01       	movw	r14, r14
      f0:	77 01       	movw	r14, r14
      f2:	77 01       	movw	r14, r14
      f4:	77 01       	movw	r14, r14
      f6:	77 01       	movw	r14, r14
      f8:	77 01       	movw	r14, r14
      fa:	77 01       	movw	r14, r14
      fc:	68 01       	movw	r12, r16
      fe:	77 01       	movw	r14, r14
     100:	77 01       	movw	r14, r14
     102:	77 01       	movw	r14, r14
     104:	77 01       	movw	r14, r14
     106:	77 01       	movw	r14, r14
     108:	77 01       	movw	r14, r14
     10a:	77 01       	movw	r14, r14
     10c:	77 01       	movw	r14, r14
     10e:	77 01       	movw	r14, r14
     110:	77 01       	movw	r14, r14
     112:	77 01       	movw	r14, r14
     114:	77 01       	movw	r14, r14
     116:	77 01       	movw	r14, r14
     118:	77 01       	movw	r14, r14
     11a:	77 01       	movw	r14, r14
     11c:	72 01       	movw	r14, r4
     11e:	77 01       	movw	r14, r14
     120:	77 01       	movw	r14, r14
     122:	77 01       	movw	r14, r14
     124:	77 01       	movw	r14, r14
     126:	77 01       	movw	r14, r14
     128:	77 01       	movw	r14, r14
     12a:	77 01       	movw	r14, r14
     12c:	6c 01       	movw	r12, r24
     12e:	07 63       	ori	r16, 0x37	; 55
     130:	42 36       	cpi	r20, 0x62	; 98
     132:	b7 9b       	sbis	0x16, 7	; 22
     134:	d8 a7       	std	Y+40, r29	; 0x28
     136:	1a 39       	cpi	r17, 0x9A	; 154
     138:	68 56       	subi	r22, 0x68	; 104
     13a:	18 ae       	std	Y+56, r1	; 0x38
     13c:	ba ab       	std	Y+50, r27	; 0x32
     13e:	55 8c       	ldd	r5, Z+29	; 0x1d
     140:	1d 3c       	cpi	r17, 0xCD	; 205
     142:	b7 cc       	rjmp	.-1682   	; 0xfffffab2 <__eeprom_end+0xff7efab2>
     144:	57 63       	ori	r21, 0x37	; 55
     146:	bd 6d       	ori	r27, 0xDD	; 221
     148:	ed fd       	.word	0xfded	; ????
     14a:	75 3e       	cpi	r23, 0xE5	; 229
     14c:	f6 17       	cp	r31, r22
     14e:	72 31       	cpi	r23, 0x12	; 18
     150:	bf 00       	.word	0x00bf	; ????
     152:	00 00       	nop
     154:	80 3f       	cpi	r24, 0xF0	; 240
     156:	08 00       	.word	0x0008	; ????
     158:	00 00       	nop
     15a:	be 92       	st	-X, r11
     15c:	24 49       	sbci	r18, 0x94	; 148
     15e:	12 3e       	cpi	r17, 0xE2	; 226
     160:	ab aa       	std	Y+51, r10	; 0x33
     162:	aa 2a       	or	r10, r26
     164:	be cd       	rjmp	.-1156   	; 0xfffffce2 <__eeprom_end+0xff7efce2>
     166:	cc cc       	rjmp	.-1640   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     168:	4c 3e       	cpi	r20, 0xEC	; 236
     16a:	00 00       	nop
     16c:	00 80       	ld	r0, Z
     16e:	be ab       	std	Y+54, r27	; 0x36
     170:	aa aa       	std	Y+50, r10	; 0x32
     172:	aa 3e       	cpi	r26, 0xEA	; 234
     174:	00 00       	nop
     176:	00 00       	nop
     178:	bf 00       	.word	0x00bf	; ????
     17a:	00 00       	nop
     17c:	80 3f       	cpi	r24, 0xF0	; 240
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	00 08       	sbc	r0, r0
     184:	41 78       	andi	r20, 0x81	; 129
     186:	d3 bb       	out	0x13, r29	; 19
     188:	43 87       	std	Z+11, r20	; 0x0b
     18a:	d1 13       	cpse	r29, r17
     18c:	3d 19       	sub	r19, r13
     18e:	0e 3c       	cpi	r16, 0xCE	; 206
     190:	c3 bd       	out	0x23, r28	; 35
     192:	42 82       	std	Z+2, r4	; 0x02
     194:	ad 2b       	or	r26, r29
     196:	3e 68       	ori	r19, 0x8E	; 142
     198:	ec 82       	std	Y+4, r14	; 0x04
     19a:	76 be       	out	0x36, r7	; 54
     19c:	d9 8f       	std	Y+25, r29	; 0x19
     19e:	e1 a9       	ldd	r30, Z+49	; 0x31
     1a0:	3e 4c       	sbci	r19, 0xCE	; 206
     1a2:	80 ef       	ldi	r24, 0xF0	; 240
     1a4:	ff be       	out	0x3f, r15	; 63
     1a6:	01 c4       	rjmp	.+2050   	; 0x9aa <initialize_all+0x16>
     1a8:	ff 7f       	andi	r31, 0xFF	; 255
     1aa:	3f 00       	.word	0x003f	; ????
     1ac:	00 00       	nop
	...

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	d0 e4       	ldi	r29, 0x40	; 64
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	e2 e9       	ldi	r30, 0x92	; 146
     1c4:	f7 e1       	ldi	r31, 0x17	; 23
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	0b bf       	out	0x3b, r16	; 59
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x14>
     1cc:	07 90       	elpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	a8 30       	cpi	r26, 0x08	; 8
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x10>

000001d6 <__do_clear_bss>:
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	a8 e0       	ldi	r26, 0x08	; 8
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	a2 34       	cpi	r26, 0x42	; 66
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	8e d5       	rcall	.+2844   	; 0xd04 <main>
     1e8:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <_exit>

000001ec <__bad_interrupt>:
     1ec:	09 cf       	rjmp	.-494    	; 0x0 <__vectors>

000001ee <i2c_init>:
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     1ee:	10 92 b9 00 	sts	0x00B9, r1
     1f2:	82 e9       	ldi	r24, 0x92	; 146
     1f4:	80 93 b8 00 	sts	0x00B8, r24
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	80 93 bc 00 	sts	0x00BC, r24
     1fe:	08 95       	ret

00000200 <i2c_start>:
     200:	85 ea       	ldi	r24, 0xA5	; 165
     202:	80 93 bc 00 	sts	0x00BC, r24
     206:	10 92 0c 01 	sts	0x010C, r1
     20a:	08 95       	ret

0000020c <i2c_stop>:
     20c:	85 e9       	ldi	r24, 0x95	; 149
     20e:	80 93 bc 00 	sts	0x00BC, r24
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 0c 01 	sts	0x010C, r24
     218:	08 95       	ret

0000021a <__vector_26>:
}

ISR(TWI_vect)
{
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	0b b6       	in	r0, 0x3b	; 59
     226:	0f 92       	push	r0
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
	uint8_t status = (TWSR & 0xF8);
     240:	80 91 b9 00 	lds	r24, 0x00B9
     244:	88 7f       	andi	r24, 0xF8	; 248
	switch (status)
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	fc 01       	movw	r30, r24
     24a:	38 97       	sbiw	r30, 0x08	; 8
     24c:	e1 35       	cpi	r30, 0x51	; 81
     24e:	f1 05       	cpc	r31, r1
     250:	08 f0       	brcs	.+2      	; 0x254 <__vector_26+0x3a>
     252:	4d c0       	rjmp	.+154    	; 0x2ee <__vector_26+0xd4>
     254:	ea 5b       	subi	r30, 0xBA	; 186
     256:	ff 4f       	sbci	r31, 0xFF	; 255
     258:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__tablejump2__>
	{
		case TW_START:						 //0x08
			i2c_send_data(device_addr + I2C_WRITE);
     25c:	80 91 26 01 	lds	r24, 0x0126
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     260:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     264:	85 e8       	ldi	r24, 0x85	; 133
     266:	80 93 bc 00 	sts	0x00BC, r24
     26a:	41 c0       	rjmp	.+130    	; 0x2ee <__vector_26+0xd4>
	{
		case TW_START:						 //0x08
			i2c_send_data(device_addr + I2C_WRITE);
			break;
		case TW_REP_START:					 //0x10
			i2c_send_data(device_addr + I2C_READ);
     26c:	80 91 26 01 	lds	r24, 0x0126
     270:	8f 5f       	subi	r24, 0xFF	; 255
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     272:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     276:	85 e8       	ldi	r24, 0x85	; 133
     278:	80 93 bc 00 	sts	0x00BC, r24
     27c:	38 c0       	rjmp	.+112    	; 0x2ee <__vector_26+0xd4>
			break;
		case TW_REP_START:					 //0x10
			i2c_send_data(device_addr + I2C_READ);
			break;
		case TW_MT_SLA_ACK:					 //3
			i2c_send_data(register_addr);		 //load the register we want to handle
     27e:	80 91 27 01 	lds	r24, 0x0127
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     282:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     286:	85 e8       	ldi	r24, 0x85	; 133
     288:	80 93 bc 00 	sts	0x00BC, r24
     28c:	30 c0       	rjmp	.+96     	; 0x2ee <__vector_26+0xd4>
			break;
		case TW_MT_SLA_ACK:					 //3
			i2c_send_data(register_addr);		 //load the register we want to handle
			break;
		case TW_MT_SLA_NACK:				 //4
			i2c_stop();	
     28e:	be df       	rcall	.-132    	; 0x20c <i2c_stop>
			break;
     290:	2e c0       	rjmp	.+92     	; 0x2ee <__vector_26+0xd4>
		case TW_MT_DATA_ACK:				 //5
			if(write_to_slave)
     292:	80 91 06 01 	lds	r24, 0x0106
     296:	88 23       	and	r24, r24
     298:	c9 f0       	breq	.+50     	; 0x2cc <__vector_26+0xb2>
			{
				if(n_o_writes == 0)
     29a:	80 91 0a 01 	lds	r24, 0x010A
     29e:	90 91 0b 01 	lds	r25, 0x010B
     2a2:	89 2b       	or	r24, r25
     2a4:	11 f4       	brne	.+4      	; 0x2aa <__vector_26+0x90>
				{
					i2c_stop();
     2a6:	b2 df       	rcall	.-156    	; 0x20c <i2c_stop>
					break;
     2a8:	22 c0       	rjmp	.+68     	; 0x2ee <__vector_26+0xd4>
				}
				else
				{
					i2c_send_data(trans_data);
     2aa:	80 91 29 01 	lds	r24, 0x0129
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     2ae:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     2b2:	85 e8       	ldi	r24, 0x85	; 133
     2b4:	80 93 bc 00 	sts	0x00BC, r24
				}
				else
				{
					i2c_send_data(trans_data);
				}
				n_o_writes = n_o_writes - 1; 
     2b8:	80 91 0a 01 	lds	r24, 0x010A
     2bc:	90 91 0b 01 	lds	r25, 0x010B
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	90 93 0b 01 	sts	0x010B, r25
     2c6:	80 93 0a 01 	sts	0x010A, r24
     2ca:	11 c0       	rjmp	.+34     	; 0x2ee <__vector_26+0xd4>
			}
			else
			{
				i2c_start(); //repeated start
     2cc:	99 df       	rcall	.-206    	; 0x200 <i2c_start>
     2ce:	0f c0       	rjmp	.+30     	; 0x2ee <__vector_26+0xd4>
			}
		
			break;
		case TW_MR_SLA_ACK: //6
			TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWEA)|(1 << TWEN)|(1 << TWIE);
     2d0:	85 e8       	ldi	r24, 0x85	; 133
     2d2:	80 93 bc 00 	sts	0x00BC, r24
			break;
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <__vector_26+0xd4>
		case TW_MR_DATA_NACK: //7
			rec_data = TWDR;
     2d8:	80 91 bb 00 	lds	r24, 0x00BB
     2dc:	80 93 28 01 	sts	0x0128, r24
			i2c_stop();
     2e0:	95 df       	rcall	.-214    	; 0x20c <i2c_stop>
			break;
     2e2:	05 c0       	rjmp	.+10     	; 0x2ee <__vector_26+0xd4>
		case TW_MR_DATA_ACK: //8
			rec_data = TWDR;
     2e4:	80 91 bb 00 	lds	r24, 0x00BB
     2e8:	80 93 28 01 	sts	0x0128, r24
			i2c_stop();
     2ec:	8f df       	rcall	.-226    	; 0x20c <i2c_stop>
			break;
	}
}
     2ee:	ff 91       	pop	r31
     2f0:	ef 91       	pop	r30
     2f2:	bf 91       	pop	r27
     2f4:	af 91       	pop	r26
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	7f 91       	pop	r23
     2fc:	6f 91       	pop	r22
     2fe:	5f 91       	pop	r21
     300:	4f 91       	pop	r20
     302:	3f 91       	pop	r19
     304:	2f 91       	pop	r18
     306:	0f 90       	pop	r0
     308:	0b be       	out	0x3b, r0	; 59
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <i2c_write_reg>:

void i2c_write_reg(uint8_t device_address, uint8_t reg_addr, uint8_t data, int n)
{
	while(!i2c_done){};
     314:	90 91 0c 01 	lds	r25, 0x010C
     318:	99 23       	and	r25, r25
     31a:	e1 f3       	breq	.-8      	; 0x314 <i2c_write_reg>
	n_o_writes = n;
     31c:	30 93 0b 01 	sts	0x010B, r19
     320:	20 93 0a 01 	sts	0x010A, r18
	register_addr = reg_addr;
     324:	60 93 27 01 	sts	0x0127, r22
	device_addr = device_address;
     328:	80 93 26 01 	sts	0x0126, r24
	trans_data = data;
     32c:	40 93 29 01 	sts	0x0129, r20
	write_to_slave = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 06 01 	sts	0x0106, r24
	i2c_start();
     336:	64 cf       	rjmp	.-312    	; 0x200 <i2c_start>
     338:	08 95       	ret

0000033a <i2c_read_reg>:
}

uint8_t i2c_read_reg(uint8_t device_address, uint8_t reg_addr, int n)
{
	while(!i2c_done){};
     33a:	90 91 0c 01 	lds	r25, 0x010C
     33e:	99 23       	and	r25, r25
     340:	e1 f3       	breq	.-8      	; 0x33a <i2c_read_reg>
	n_o_reads = n;
     342:	50 93 09 01 	sts	0x0109, r21
     346:	40 93 08 01 	sts	0x0108, r20
	register_addr = reg_addr;
     34a:	60 93 27 01 	sts	0x0127, r22
	device_addr = device_address;
     34e:	80 93 26 01 	sts	0x0126, r24
	write_to_slave = 0;
     352:	10 92 06 01 	sts	0x0106, r1
	i2c_start();
     356:	54 df       	rcall	.-344    	; 0x200 <i2c_start>
	while(!i2c_done){};
     358:	80 91 0c 01 	lds	r24, 0x010C
     35c:	88 23       	and	r24, r24
     35e:	e1 f3       	breq	.-8      	; 0x358 <i2c_read_reg+0x1e>
	return rec_data;
     360:	80 91 28 01 	lds	r24, 0x0128
}
     364:	08 95       	ret

00000366 <led_blink_green>:
}

void led_blink_green (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	b9 f0       	breq	.+46     	; 0x398 <led_blink_green+0x32>
	{
		PORTB|=(1<<1);
     36a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	39 e6       	ldi	r19, 0x69	; 105
     370:	48 e1       	ldi	r20, 0x18	; 24
     372:	21 50       	subi	r18, 0x01	; 1
     374:	30 40       	sbci	r19, 0x00	; 0
     376:	40 40       	sbci	r20, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <led_blink_green+0xc>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <led_blink_green+0x16>
     37c:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<1);
     37e:	15 b8       	out	0x05, r1	; 5
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	39 e6       	ldi	r19, 0x69	; 105
     384:	48 e1       	ldi	r20, 0x18	; 24
     386:	21 50       	subi	r18, 0x01	; 1
     388:	30 40       	sbci	r19, 0x00	; 0
     38a:	40 40       	sbci	r20, 0x00	; 0
     38c:	e1 f7       	brne	.-8      	; 0x386 <led_blink_green+0x20>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <led_blink_green+0x2a>
     390:	00 00       	nop
}

void led_blink_green (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	49 f7       	brne	.-46     	; 0x36a <led_blink_green+0x4>
     398:	08 95       	ret

0000039a <led_blink_yellow>:
}

void led_blink_yellow (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	b9 f0       	breq	.+46     	; 0x3cc <led_blink_yellow+0x32>
	{
		PORTB|=(1<<2);
     39e:	2a 9a       	sbi	0x05, 2	; 5
     3a0:	2f ef       	ldi	r18, 0xFF	; 255
     3a2:	39 e6       	ldi	r19, 0x69	; 105
     3a4:	48 e1       	ldi	r20, 0x18	; 24
     3a6:	21 50       	subi	r18, 0x01	; 1
     3a8:	30 40       	sbci	r19, 0x00	; 0
     3aa:	40 40       	sbci	r20, 0x00	; 0
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <led_blink_yellow+0xc>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <led_blink_yellow+0x16>
     3b0:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<2);
     3b2:	15 b8       	out	0x05, r1	; 5
     3b4:	2f ef       	ldi	r18, 0xFF	; 255
     3b6:	39 e6       	ldi	r19, 0x69	; 105
     3b8:	48 e1       	ldi	r20, 0x18	; 24
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <led_blink_yellow+0x20>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <led_blink_yellow+0x2a>
     3c4:	00 00       	nop
}

void led_blink_yellow (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	49 f7       	brne	.-46     	; 0x39e <led_blink_yellow+0x4>
     3cc:	08 95       	ret

000003ce <create_empty_sensor>:
﻿#include "sensor_data.h"

Sensor_Data* sd;

Sensor_Data* create_empty_sensor(bool data)
{
     3ce:	cf 93       	push	r28
     3d0:	c8 2f       	mov	r28, r24
	Sensor_Data sd;
	Sensor_Data* sd_p = malloc(sizeof(sd));
     3d2:	8d e2       	ldi	r24, 0x2D	; 45
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <malloc>
     3da:	fc 01       	movw	r30, r24
	sd_p->acc[0] = 0;
     3dc:	10 82       	st	Z, r1
     3de:	11 82       	std	Z+1, r1	; 0x01
     3e0:	12 82       	std	Z+2, r1	; 0x02
     3e2:	13 82       	std	Z+3, r1	; 0x03
	sd_p->acc[1] = 0;
     3e4:	14 82       	std	Z+4, r1	; 0x04
     3e6:	15 82       	std	Z+5, r1	; 0x05
     3e8:	16 82       	std	Z+6, r1	; 0x06
     3ea:	17 82       	std	Z+7, r1	; 0x07
	sd_p->acc[2] = 0;
     3ec:	10 86       	std	Z+8, r1	; 0x08
     3ee:	11 86       	std	Z+9, r1	; 0x09
     3f0:	12 86       	std	Z+10, r1	; 0x0a
     3f2:	13 86       	std	Z+11, r1	; 0x0b
	sd_p->gyro[0] = 0;
     3f4:	14 86       	std	Z+12, r1	; 0x0c
     3f6:	15 86       	std	Z+13, r1	; 0x0d
     3f8:	16 86       	std	Z+14, r1	; 0x0e
     3fa:	17 86       	std	Z+15, r1	; 0x0f
	sd_p->gyro[1] = 0;
     3fc:	10 8a       	std	Z+16, r1	; 0x10
     3fe:	11 8a       	std	Z+17, r1	; 0x11
     400:	12 8a       	std	Z+18, r1	; 0x12
     402:	13 8a       	std	Z+19, r1	; 0x13
	sd_p->gyro[2] = 0;
     404:	14 8a       	std	Z+20, r1	; 0x14
     406:	15 8a       	std	Z+21, r1	; 0x15
     408:	16 8a       	std	Z+22, r1	; 0x16
     40a:	17 8a       	std	Z+23, r1	; 0x17
	sd_p->angle[0] = 0;
     40c:	10 8e       	std	Z+24, r1	; 0x18
     40e:	11 8e       	std	Z+25, r1	; 0x19
     410:	12 8e       	std	Z+26, r1	; 0x1a
     412:	13 8e       	std	Z+27, r1	; 0x1b
	sd_p->angle[1] = 0;
     414:	14 8e       	std	Z+28, r1	; 0x1c
     416:	15 8e       	std	Z+29, r1	; 0x1d
     418:	16 8e       	std	Z+30, r1	; 0x1e
     41a:	17 8e       	std	Z+31, r1	; 0x1f
	sd_p->angle[2] = 0;
     41c:	10 a2       	std	Z+32, r1	; 0x20
     41e:	11 a2       	std	Z+33, r1	; 0x21
     420:	12 a2       	std	Z+34, r1	; 0x22
     422:	13 a2       	std	Z+35, r1	; 0x23
	sd_p->distance = 0;
     424:	14 a2       	std	Z+36, r1	; 0x24
     426:	15 a2       	std	Z+37, r1	; 0x25
     428:	16 a2       	std	Z+38, r1	; 0x26
     42a:	17 a2       	std	Z+39, r1	; 0x27
	/*
	sd_p->distance[0] = 0;
	sd_p->distance[1] = 0;
	sd_p->distance[2] = 0;
	*/
	sd_p->has_data = data;
     42c:	dc 01       	movw	r26, r24
     42e:	a8 5d       	subi	r26, 0xD8	; 216
     430:	be 4f       	sbci	r27, 0xFE	; 254
     432:	cc 93       	st	X, r28
	sd_p->has_ir = data;
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	cc 93       	st	X, r28
	sd_p->has_angle = data;
     438:	11 96       	adiw	r26, 0x01	; 1
     43a:	cc 93       	st	X, r28
	sd_p->has_acc = data;
     43c:	11 96       	adiw	r26, 0x01	; 1
     43e:	cc 93       	st	X, r28
	sd_p->has_distance = data;
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	cc 93       	st	X, r28
	return sd_p;
}
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <init_temp>:
	
	acc_time += gyro_time;
	gyro_time = 0.0;
	timer_1_start();
	return;
}
     448:	21 e0       	ldi	r18, 0x01	; 1
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	82 ed       	ldi	r24, 0xD2	; 210
     452:	60 df       	rcall	.-320    	; 0x314 <i2c_write_reg>
     454:	8f e3       	ldi	r24, 0x3F	; 63
     456:	9c e9       	ldi	r25, 0x9C	; 156
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <init_temp+0x10>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <init_temp+0x16>
     45e:	00 00       	nop
     460:	08 95       	ret

00000462 <init_acc>:
     462:	21 e0       	ldi	r18, 0x01	; 1
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	47 e5       	ldi	r20, 0x57	; 87
     468:	60 e2       	ldi	r22, 0x20	; 32
     46a:	82 e3       	ldi	r24, 0x32	; 50
     46c:	53 df       	rcall	.-346    	; 0x314 <i2c_write_reg>
     46e:	8f e3       	ldi	r24, 0x3F	; 63
     470:	9c e9       	ldi	r25, 0x9C	; 156
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <init_acc+0x10>
     476:	00 c0       	rjmp	.+0      	; 0x478 <init_acc+0x16>
     478:	00 00       	nop
     47a:	08 95       	ret

0000047c <init_gyro>:
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	4f e0       	ldi	r20, 0x0F	; 15
     482:	60 e2       	ldi	r22, 0x20	; 32
     484:	86 ed       	ldi	r24, 0xD6	; 214
     486:	46 df       	rcall	.-372    	; 0x314 <i2c_write_reg>
     488:	8f e3       	ldi	r24, 0x3F	; 63
     48a:	9c e9       	ldi	r25, 0x9C	; 156
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <init_gyro+0x10>
     490:	00 c0       	rjmp	.+0      	; 0x492 <init_gyro+0x16>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <format_acc>:
     496:	26 2f       	mov	r18, r22
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	32 2f       	mov	r19, r18
     49c:	22 27       	eor	r18, r18
     49e:	28 2b       	or	r18, r24
     4a0:	b9 01       	movw	r22, r18
     4a2:	75 95       	asr	r23
     4a4:	67 95       	ror	r22
     4a6:	75 95       	asr	r23
     4a8:	67 95       	ror	r22
     4aa:	75 95       	asr	r23
     4ac:	67 95       	ror	r22
     4ae:	75 95       	asr	r23
     4b0:	67 95       	ror	r22
     4b2:	88 27       	eor	r24, r24
     4b4:	77 fd       	sbrc	r23, 7
     4b6:	80 95       	com	r24
     4b8:	98 2f       	mov	r25, r24
     4ba:	b8 d5       	rcall	.+2928   	; 0x102c <__floatsisf>
     4bc:	21 ed       	ldi	r18, 0xD1	; 209
     4be:	32 e2       	ldi	r19, 0x22	; 34
     4c0:	4d e1       	ldi	r20, 0x1D	; 29
     4c2:	51 e4       	ldi	r21, 0x41	; 65
     4c4:	63 d6       	rcall	.+3270   	; 0x118c <__mulsf3>
     4c6:	2f e6       	ldi	r18, 0x6F	; 111
     4c8:	32 e1       	ldi	r19, 0x12	; 18
     4ca:	43 e8       	ldi	r20, 0x83	; 131
     4cc:	5a e3       	ldi	r21, 0x3A	; 58
     4ce:	5e c6       	rjmp	.+3260   	; 0x118c <__mulsf3>
     4d0:	08 95       	ret

000004d2 <format_distance>:
     4d2:	4f 92       	push	r4
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	bc 01       	movw	r22, r24
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9b d5       	rcall	.+2870   	; 0x1028 <__floatunsisf>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e8       	ldi	r20, 0x80	; 128
     4fc:	50 e4       	ldi	r21, 0x40	; 64
     4fe:	a9 d6       	rcall	.+3410   	; 0x1252 <pow>
     500:	4b 01       	movw	r8, r22
     502:	5c 01       	movw	r10, r24
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e4       	ldi	r20, 0x40	; 64
     50a:	50 e4       	ldi	r21, 0x40	; 64
     50c:	c7 01       	movw	r24, r14
     50e:	b6 01       	movw	r22, r12
     510:	a0 d6       	rcall	.+3392   	; 0x1252 <pow>
     512:	2b 01       	movw	r4, r22
     514:	3c 01       	movw	r6, r24
     516:	26 ea       	ldi	r18, 0xA6	; 166
     518:	34 e8       	ldi	r19, 0x84	; 132
     51a:	40 ef       	ldi	r20, 0xF0	; 240
     51c:	51 e3       	ldi	r21, 0x31	; 49
     51e:	c5 01       	movw	r24, r10
     520:	b4 01       	movw	r22, r8
     522:	34 d6       	rcall	.+3176   	; 0x118c <__mulsf3>
     524:	4b 01       	movw	r8, r22
     526:	5c 01       	movw	r10, r24
     528:	2c ea       	ldi	r18, 0xAC	; 172
     52a:	35 ec       	ldi	r19, 0xC5	; 197
     52c:	47 e2       	ldi	r20, 0x27	; 39
     52e:	57 eb       	ldi	r21, 0xB7	; 183
     530:	c3 01       	movw	r24, r6
     532:	b2 01       	movw	r22, r4
     534:	2b d6       	rcall	.+3158   	; 0x118c <__mulsf3>
     536:	9b 01       	movw	r18, r22
     538:	ac 01       	movw	r20, r24
     53a:	c5 01       	movw	r24, r10
     53c:	b4 01       	movw	r22, r8
     53e:	a4 d4       	rcall	.+2376   	; 0xe88 <__addsf3>
     540:	4b 01       	movw	r8, r22
     542:	5c 01       	movw	r10, r24
     544:	a7 01       	movw	r20, r14
     546:	96 01       	movw	r18, r12
     548:	c7 01       	movw	r24, r14
     54a:	b6 01       	movw	r22, r12
     54c:	1f d6       	rcall	.+3134   	; 0x118c <__mulsf3>
     54e:	24 e3       	ldi	r18, 0x34	; 52
     550:	30 e8       	ldi	r19, 0x80	; 128
     552:	47 eb       	ldi	r20, 0xB7	; 183
     554:	5b e3       	ldi	r21, 0x3B	; 59
     556:	1a d6       	rcall	.+3124   	; 0x118c <__mulsf3>
     558:	9b 01       	movw	r18, r22
     55a:	ac 01       	movw	r20, r24
     55c:	c5 01       	movw	r24, r10
     55e:	b4 01       	movw	r22, r8
     560:	93 d4       	rcall	.+2342   	; 0xe88 <__addsf3>
     562:	4b 01       	movw	r8, r22
     564:	5c 01       	movw	r10, r24
     566:	22 e0       	ldi	r18, 0x02	; 2
     568:	3c eb       	ldi	r19, 0xBC	; 188
     56a:	45 eb       	ldi	r20, 0xB5	; 181
     56c:	5f eb       	ldi	r21, 0xBF	; 191
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0c d6       	rcall	.+3096   	; 0x118c <__mulsf3>
     574:	9b 01       	movw	r18, r22
     576:	ac 01       	movw	r20, r24
     578:	c5 01       	movw	r24, r10
     57a:	b4 01       	movw	r22, r8
     57c:	85 d4       	rcall	.+2314   	; 0xe88 <__addsf3>
     57e:	22 e5       	ldi	r18, 0x52	; 82
     580:	38 e3       	ldi	r19, 0x38	; 56
     582:	4e e1       	ldi	r20, 0x1E	; 30
     584:	53 e4       	ldi	r21, 0x43	; 67
     586:	80 d4       	rcall	.+2304   	; 0xe88 <__addsf3>
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	08 95       	ret

000005a2 <get_uncalibrated_acc>:
     5a2:	8f 92       	push	r8
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	ec 01       	movw	r28, r24
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	68 e2       	ldi	r22, 0x28	; 40
     5c0:	82 e3       	ldi	r24, 0x32	; 50
     5c2:	bb de       	rcall	.-650    	; 0x33a <i2c_read_reg>
     5c4:	18 2f       	mov	r17, r24
     5c6:	8f e9       	ldi	r24, 0x9F	; 159
     5c8:	9f e0       	ldi	r25, 0x0F	; 15
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <get_uncalibrated_acc+0x28>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <get_uncalibrated_acc+0x2e>
     5d0:	00 00       	nop
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	69 e2       	ldi	r22, 0x29	; 41
     5d8:	82 e3       	ldi	r24, 0x32	; 50
     5da:	af de       	rcall	.-674    	; 0x33a <i2c_read_reg>
     5dc:	68 2f       	mov	r22, r24
     5de:	81 2f       	mov	r24, r17
     5e0:	5a df       	rcall	.-332    	; 0x496 <format_acc>
     5e2:	4b 01       	movw	r8, r22
     5e4:	5c 01       	movw	r10, r24
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	6a e2       	ldi	r22, 0x2A	; 42
     5ec:	82 e3       	ldi	r24, 0x32	; 50
     5ee:	a5 de       	rcall	.-694    	; 0x33a <i2c_read_reg>
     5f0:	18 2f       	mov	r17, r24
     5f2:	8f e9       	ldi	r24, 0x9F	; 159
     5f4:	9f e0       	ldi	r25, 0x0F	; 15
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <get_uncalibrated_acc+0x54>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <get_uncalibrated_acc+0x5a>
     5fc:	00 00       	nop
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	6b e2       	ldi	r22, 0x2B	; 43
     604:	82 e3       	ldi	r24, 0x32	; 50
     606:	99 de       	rcall	.-718    	; 0x33a <i2c_read_reg>
     608:	68 2f       	mov	r22, r24
     60a:	81 2f       	mov	r24, r17
     60c:	44 df       	rcall	.-376    	; 0x496 <format_acc>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	6c e2       	ldi	r22, 0x2C	; 44
     618:	82 e3       	ldi	r24, 0x32	; 50
     61a:	8f de       	rcall	.-738    	; 0x33a <i2c_read_reg>
     61c:	18 2f       	mov	r17, r24
     61e:	8f e9       	ldi	r24, 0x9F	; 159
     620:	9f e0       	ldi	r25, 0x0F	; 15
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	f1 f7       	brne	.-4      	; 0x622 <get_uncalibrated_acc+0x80>
     626:	00 c0       	rjmp	.+0      	; 0x628 <get_uncalibrated_acc+0x86>
     628:	00 00       	nop
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	6d e2       	ldi	r22, 0x2D	; 45
     630:	82 e3       	ldi	r24, 0x32	; 50
     632:	83 de       	rcall	.-762    	; 0x33a <i2c_read_reg>
     634:	68 2f       	mov	r22, r24
     636:	81 2f       	mov	r24, r17
     638:	2e df       	rcall	.-420    	; 0x496 <format_acc>
     63a:	88 82       	st	Y, r8
     63c:	99 82       	std	Y+1, r9	; 0x01
     63e:	aa 82       	std	Y+2, r10	; 0x02
     640:	bb 82       	std	Y+3, r11	; 0x03
     642:	cc 82       	std	Y+4, r12	; 0x04
     644:	dd 82       	std	Y+5, r13	; 0x05
     646:	ee 82       	std	Y+6, r14	; 0x06
     648:	ff 82       	std	Y+7, r15	; 0x07
     64a:	68 87       	std	Y+8, r22	; 0x08
     64c:	79 87       	std	Y+9, r23	; 0x09
     64e:	8a 87       	std	Y+10, r24	; 0x0a
     650:	9b 87       	std	Y+11, r25	; 0x0b
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	bf 90       	pop	r11
     662:	af 90       	pop	r10
     664:	9f 90       	pop	r9
     666:	8f 90       	pop	r8
     668:	08 95       	ret

0000066a <calibrate_acc>:
     66a:	4f 92       	push	r4
     66c:	5f 92       	push	r5
     66e:	6f 92       	push	r6
     670:	7f 92       	push	r7
     672:	8f 92       	push	r8
     674:	9f 92       	push	r9
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	a0 de       	rcall	.-704    	; 0x3ce <create_empty_sensor>
     68e:	ec 01       	movw	r28, r24
     690:	04 e6       	ldi	r16, 0x64	; 100
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	c1 2c       	mov	r12, r1
     696:	d1 2c       	mov	r13, r1
     698:	76 01       	movw	r14, r12
     69a:	46 01       	movw	r8, r12
     69c:	57 01       	movw	r10, r14
     69e:	26 01       	movw	r4, r12
     6a0:	37 01       	movw	r6, r14
     6a2:	ce 01       	movw	r24, r28
     6a4:	7e df       	rcall	.-260    	; 0x5a2 <get_uncalibrated_acc>
     6a6:	28 81       	ld	r18, Y
     6a8:	39 81       	ldd	r19, Y+1	; 0x01
     6aa:	4a 81       	ldd	r20, Y+2	; 0x02
     6ac:	5b 81       	ldd	r21, Y+3	; 0x03
     6ae:	c3 01       	movw	r24, r6
     6b0:	b2 01       	movw	r22, r4
     6b2:	ea d3       	rcall	.+2004   	; 0xe88 <__addsf3>
     6b4:	2b 01       	movw	r4, r22
     6b6:	3c 01       	movw	r6, r24
     6b8:	2c 81       	ldd	r18, Y+4	; 0x04
     6ba:	3d 81       	ldd	r19, Y+5	; 0x05
     6bc:	4e 81       	ldd	r20, Y+6	; 0x06
     6be:	5f 81       	ldd	r21, Y+7	; 0x07
     6c0:	c5 01       	movw	r24, r10
     6c2:	b4 01       	movw	r22, r8
     6c4:	e1 d3       	rcall	.+1986   	; 0xe88 <__addsf3>
     6c6:	4b 01       	movw	r8, r22
     6c8:	5c 01       	movw	r10, r24
     6ca:	28 85       	ldd	r18, Y+8	; 0x08
     6cc:	39 85       	ldd	r19, Y+9	; 0x09
     6ce:	4a 85       	ldd	r20, Y+10	; 0x0a
     6d0:	5b 85       	ldd	r21, Y+11	; 0x0b
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	d8 d3       	rcall	.+1968   	; 0xe88 <__addsf3>
     6d8:	6b 01       	movw	r12, r22
     6da:	7c 01       	movw	r14, r24
     6dc:	01 50       	subi	r16, 0x01	; 1
     6de:	11 09       	sbc	r17, r1
     6e0:	01 15       	cp	r16, r1
     6e2:	11 05       	cpc	r17, r1
     6e4:	f1 f6       	brne	.-68     	; 0x6a2 <calibrate_acc+0x38>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	48 ec       	ldi	r20, 0xC8	; 200
     6ec:	52 e4       	ldi	r21, 0x42	; 66
     6ee:	c3 01       	movw	r24, r6
     6f0:	b2 01       	movw	r22, r4
     6f2:	32 d4       	rcall	.+2148   	; 0xf58 <__divsf3>
     6f4:	60 93 16 01 	sts	0x0116, r22
     6f8:	70 93 17 01 	sts	0x0117, r23
     6fc:	80 93 18 01 	sts	0x0118, r24
     700:	90 93 19 01 	sts	0x0119, r25
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	48 ec       	ldi	r20, 0xC8	; 200
     70a:	52 e4       	ldi	r21, 0x42	; 66
     70c:	c5 01       	movw	r24, r10
     70e:	b4 01       	movw	r22, r8
     710:	23 d4       	rcall	.+2118   	; 0xf58 <__divsf3>
     712:	60 93 12 01 	sts	0x0112, r22
     716:	70 93 13 01 	sts	0x0113, r23
     71a:	80 93 14 01 	sts	0x0114, r24
     71e:	90 93 15 01 	sts	0x0115, r25
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	48 ec       	ldi	r20, 0xC8	; 200
     728:	52 e4       	ldi	r21, 0x42	; 66
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	14 d4       	rcall	.+2088   	; 0xf58 <__divsf3>
     730:	60 93 0e 01 	sts	0x010E, r22
     734:	70 93 0f 01 	sts	0x010F, r23
     738:	80 93 10 01 	sts	0x0110, r24
     73c:	90 93 11 01 	sts	0x0111, r25
     740:	ce 01       	movw	r24, r28
     742:	96 d7       	rcall	.+3884   	; 0x1670 <free>
     744:	8f e3       	ldi	r24, 0x3F	; 63
     746:	9c e9       	ldi	r25, 0x9C	; 156
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <calibrate_acc+0xde>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <calibrate_acc+0xe4>
     74e:	00 00       	nop
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	9f 90       	pop	r9
     766:	8f 90       	pop	r8
     768:	7f 90       	pop	r7
     76a:	6f 90       	pop	r6
     76c:	5f 90       	pop	r5
     76e:	4f 90       	pop	r4
     770:	08 95       	ret

00000772 <get_uncalibrated_gyro>:
     772:	cf 92       	push	r12
     774:	df 92       	push	r13
     776:	ef 92       	push	r14
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	ec 01       	movw	r28, r24
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	68 e2       	ldi	r22, 0x28	; 40
     78a:	86 ed       	ldi	r24, 0xD6	; 214
     78c:	d6 dd       	rcall	.-1108   	; 0x33a <i2c_read_reg>
     78e:	d8 2e       	mov	r13, r24
     790:	8f e9       	ldi	r24, 0x9F	; 159
     792:	9f e0       	ldi	r25, 0x0F	; 15
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <get_uncalibrated_gyro+0x22>
     798:	00 c0       	rjmp	.+0      	; 0x79a <get_uncalibrated_gyro+0x28>
     79a:	00 00       	nop
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	69 e2       	ldi	r22, 0x29	; 41
     7a2:	86 ed       	ldi	r24, 0xD6	; 214
     7a4:	ca dd       	rcall	.-1132   	; 0x33a <i2c_read_reg>
     7a6:	c8 2e       	mov	r12, r24
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	6a e2       	ldi	r22, 0x2A	; 42
     7ae:	86 ed       	ldi	r24, 0xD6	; 214
     7b0:	c4 dd       	rcall	.-1144   	; 0x33a <i2c_read_reg>
     7b2:	f8 2e       	mov	r15, r24
     7b4:	8f e9       	ldi	r24, 0x9F	; 159
     7b6:	9f e0       	ldi	r25, 0x0F	; 15
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <get_uncalibrated_gyro+0x46>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <get_uncalibrated_gyro+0x4c>
     7be:	00 00       	nop
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	6b e2       	ldi	r22, 0x2B	; 43
     7c6:	86 ed       	ldi	r24, 0xD6	; 214
     7c8:	b8 dd       	rcall	.-1168   	; 0x33a <i2c_read_reg>
     7ca:	e8 2e       	mov	r14, r24
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	6c e2       	ldi	r22, 0x2C	; 44
     7d2:	86 ed       	ldi	r24, 0xD6	; 214
     7d4:	b2 dd       	rcall	.-1180   	; 0x33a <i2c_read_reg>
     7d6:	18 2f       	mov	r17, r24
     7d8:	8f e9       	ldi	r24, 0x9F	; 159
     7da:	9f e0       	ldi	r25, 0x0F	; 15
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <get_uncalibrated_gyro+0x6a>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <get_uncalibrated_gyro+0x70>
     7e2:	00 00       	nop
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	6d e2       	ldi	r22, 0x2D	; 45
     7ea:	86 ed       	ldi	r24, 0xD6	; 214
     7ec:	a6 dd       	rcall	.-1204   	; 0x33a <i2c_read_reg>
     7ee:	08 2f       	mov	r16, r24
     7f0:	6c 2d       	mov	r22, r12
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	76 2f       	mov	r23, r22
     7f6:	66 27       	eor	r22, r22
     7f8:	6d 0d       	add	r22, r13
     7fa:	71 1d       	adc	r23, r1
     7fc:	88 27       	eor	r24, r24
     7fe:	77 fd       	sbrc	r23, 7
     800:	80 95       	com	r24
     802:	98 2f       	mov	r25, r24
     804:	13 d4       	rcall	.+2086   	; 0x102c <__floatsisf>
     806:	29 e2       	ldi	r18, 0x29	; 41
     808:	3c e5       	ldi	r19, 0x5C	; 92
     80a:	4f e0       	ldi	r20, 0x0F	; 15
     80c:	5c e3       	ldi	r21, 0x3C	; 60
     80e:	be d4       	rcall	.+2428   	; 0x118c <__mulsf3>
     810:	6c 87       	std	Y+12, r22	; 0x0c
     812:	7d 87       	std	Y+13, r23	; 0x0d
     814:	8e 87       	std	Y+14, r24	; 0x0e
     816:	9f 87       	std	Y+15, r25	; 0x0f
     818:	6e 2d       	mov	r22, r14
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	76 2f       	mov	r23, r22
     81e:	66 27       	eor	r22, r22
     820:	6f 0d       	add	r22, r15
     822:	71 1d       	adc	r23, r1
     824:	88 27       	eor	r24, r24
     826:	77 fd       	sbrc	r23, 7
     828:	80 95       	com	r24
     82a:	98 2f       	mov	r25, r24
     82c:	ff d3       	rcall	.+2046   	; 0x102c <__floatsisf>
     82e:	29 e2       	ldi	r18, 0x29	; 41
     830:	3c e5       	ldi	r19, 0x5C	; 92
     832:	4f e0       	ldi	r20, 0x0F	; 15
     834:	5c e3       	ldi	r21, 0x3C	; 60
     836:	aa d4       	rcall	.+2388   	; 0x118c <__mulsf3>
     838:	68 8b       	std	Y+16, r22	; 0x10
     83a:	79 8b       	std	Y+17, r23	; 0x11
     83c:	8a 8b       	std	Y+18, r24	; 0x12
     83e:	9b 8b       	std	Y+19, r25	; 0x13
     840:	60 2f       	mov	r22, r16
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	76 2f       	mov	r23, r22
     846:	66 27       	eor	r22, r22
     848:	61 0f       	add	r22, r17
     84a:	71 1d       	adc	r23, r1
     84c:	88 27       	eor	r24, r24
     84e:	77 fd       	sbrc	r23, 7
     850:	80 95       	com	r24
     852:	98 2f       	mov	r25, r24
     854:	eb d3       	rcall	.+2006   	; 0x102c <__floatsisf>
     856:	29 e2       	ldi	r18, 0x29	; 41
     858:	3c e5       	ldi	r19, 0x5C	; 92
     85a:	4f e0       	ldi	r20, 0x0F	; 15
     85c:	5c e3       	ldi	r21, 0x3C	; 60
     85e:	96 d4       	rcall	.+2348   	; 0x118c <__mulsf3>
     860:	6c 8b       	std	Y+20, r22	; 0x14
     862:	7d 8b       	std	Y+21, r23	; 0x15
     864:	8e 8b       	std	Y+22, r24	; 0x16
     866:	9f 8b       	std	Y+23, r25	; 0x17
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	08 95       	ret

0000087a <calibrate_gyro>:
     87a:	4f 92       	push	r4
     87c:	5f 92       	push	r5
     87e:	6f 92       	push	r6
     880:	7f 92       	push	r7
     882:	8f 92       	push	r8
     884:	9f 92       	push	r9
     886:	af 92       	push	r10
     888:	bf 92       	push	r11
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	98 dd       	rcall	.-1232   	; 0x3ce <create_empty_sensor>
     89e:	ec 01       	movw	r28, r24
     8a0:	04 e6       	ldi	r16, 0x64	; 100
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	c1 2c       	mov	r12, r1
     8a6:	d1 2c       	mov	r13, r1
     8a8:	76 01       	movw	r14, r12
     8aa:	46 01       	movw	r8, r12
     8ac:	57 01       	movw	r10, r14
     8ae:	26 01       	movw	r4, r12
     8b0:	37 01       	movw	r6, r14
     8b2:	ce 01       	movw	r24, r28
     8b4:	5e df       	rcall	.-324    	; 0x772 <get_uncalibrated_gyro>
     8b6:	2c 85       	ldd	r18, Y+12	; 0x0c
     8b8:	3d 85       	ldd	r19, Y+13	; 0x0d
     8ba:	4e 85       	ldd	r20, Y+14	; 0x0e
     8bc:	5f 85       	ldd	r21, Y+15	; 0x0f
     8be:	c3 01       	movw	r24, r6
     8c0:	b2 01       	movw	r22, r4
     8c2:	e2 d2       	rcall	.+1476   	; 0xe88 <__addsf3>
     8c4:	2b 01       	movw	r4, r22
     8c6:	3c 01       	movw	r6, r24
     8c8:	28 89       	ldd	r18, Y+16	; 0x10
     8ca:	39 89       	ldd	r19, Y+17	; 0x11
     8cc:	4a 89       	ldd	r20, Y+18	; 0x12
     8ce:	5b 89       	ldd	r21, Y+19	; 0x13
     8d0:	c5 01       	movw	r24, r10
     8d2:	b4 01       	movw	r22, r8
     8d4:	d9 d2       	rcall	.+1458   	; 0xe88 <__addsf3>
     8d6:	4b 01       	movw	r8, r22
     8d8:	5c 01       	movw	r10, r24
     8da:	2c 89       	ldd	r18, Y+20	; 0x14
     8dc:	3d 89       	ldd	r19, Y+21	; 0x15
     8de:	4e 89       	ldd	r20, Y+22	; 0x16
     8e0:	5f 89       	ldd	r21, Y+23	; 0x17
     8e2:	c7 01       	movw	r24, r14
     8e4:	b6 01       	movw	r22, r12
     8e6:	d0 d2       	rcall	.+1440   	; 0xe88 <__addsf3>
     8e8:	6b 01       	movw	r12, r22
     8ea:	7c 01       	movw	r14, r24
     8ec:	01 50       	subi	r16, 0x01	; 1
     8ee:	11 09       	sbc	r17, r1
     8f0:	01 15       	cp	r16, r1
     8f2:	11 05       	cpc	r17, r1
     8f4:	f1 f6       	brne	.-68     	; 0x8b2 <calibrate_gyro+0x38>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	48 ec       	ldi	r20, 0xC8	; 200
     8fc:	52 e4       	ldi	r21, 0x42	; 66
     8fe:	c3 01       	movw	r24, r6
     900:	b2 01       	movw	r22, r4
     902:	2a d3       	rcall	.+1620   	; 0xf58 <__divsf3>
     904:	60 93 22 01 	sts	0x0122, r22
     908:	70 93 23 01 	sts	0x0123, r23
     90c:	80 93 24 01 	sts	0x0124, r24
     910:	90 93 25 01 	sts	0x0125, r25
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	48 ec       	ldi	r20, 0xC8	; 200
     91a:	52 e4       	ldi	r21, 0x42	; 66
     91c:	c5 01       	movw	r24, r10
     91e:	b4 01       	movw	r22, r8
     920:	1b d3       	rcall	.+1590   	; 0xf58 <__divsf3>
     922:	60 93 1e 01 	sts	0x011E, r22
     926:	70 93 1f 01 	sts	0x011F, r23
     92a:	80 93 20 01 	sts	0x0120, r24
     92e:	90 93 21 01 	sts	0x0121, r25
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	48 ec       	ldi	r20, 0xC8	; 200
     938:	52 e4       	ldi	r21, 0x42	; 66
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0c d3       	rcall	.+1560   	; 0xf58 <__divsf3>
     940:	60 93 1a 01 	sts	0x011A, r22
     944:	70 93 1b 01 	sts	0x011B, r23
     948:	80 93 1c 01 	sts	0x011C, r24
     94c:	90 93 1d 01 	sts	0x011D, r25
     950:	ce 01       	movw	r24, r28
     952:	8e d6       	rcall	.+3356   	; 0x1670 <free>
     954:	8f e3       	ldi	r24, 0x3F	; 63
     956:	9c e9       	ldi	r25, 0x9C	; 156
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <calibrate_gyro+0xde>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <calibrate_gyro+0xe4>
     95e:	00 00       	nop
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	9f 90       	pop	r9
     976:	8f 90       	pop	r8
     978:	7f 90       	pop	r7
     97a:	6f 90       	pop	r6
     97c:	5f 90       	pop	r5
     97e:	4f 90       	pop	r4
     980:	08 95       	ret

00000982 <init_sensors>:
     982:	62 dd       	rcall	.-1340   	; 0x448 <init_temp>
     984:	8b e8       	ldi	r24, 0x8B	; 139
     986:	80 93 7a 00 	sts	0x007A, r24
     98a:	6b dd       	rcall	.-1322   	; 0x462 <init_acc>
     98c:	77 dd       	rcall	.-1298   	; 0x47c <init_gyro>
     98e:	75 df       	rcall	.-278    	; 0x87a <calibrate_gyro>
     990:	6c ce       	rjmp	.-808    	; 0x66a <calibrate_acc>
     992:	08 95       	ret

00000994 <initialize_all>:
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	84 b9       	out	0x04, r24	; 4
     998:	15 b8       	out	0x05, r1	; 5
     99a:	29 dc       	rcall	.-1966   	; 0x1ee <i2c_init>
     99c:	c0 d1       	rcall	.+896    	; 0xd1e <spi_init>
     99e:	78 94       	sei
     9a0:	f0 df       	rcall	.-32     	; 0x982 <init_sensors>
     9a2:	ca d1       	rcall	.+916    	; 0xd38 <data_direction_init>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	f8 dc       	rcall	.-1552   	; 0x39a <led_blink_yellow>
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	db dc       	rcall	.-1610   	; 0x366 <led_blink_green>
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	91 e4       	ldi	r25, 0x41	; 65
     9b8:	00 c2       	rjmp	.+1024   	; 0xdba <timer_1_init>
     9ba:	08 95       	ret

000009bc <measure_distance>:

void measure_distance(void)
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADIE);
     9bc:	ea e7       	ldi	r30, 0x7A	; 122
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	88 6c       	ori	r24, 0xC8	; 200
     9c4:	80 83       	st	Z, r24
     9c6:	08 95       	ret

000009c8 <get_distance>:
	return;
}

void get_distance(Sensor_Data* sd)
{
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	ec 01       	movw	r28, r24
	measure_distance();
     9ce:	f6 df       	rcall	.-20     	; 0x9bc <measure_distance>
     9d0:	8f e1       	ldi	r24, 0x1F	; 31
     9d2:	9e e4       	ldi	r25, 0x4E	; 78
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	f1 f7       	brne	.-4      	; 0x9d4 <get_distance+0xc>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <get_distance+0x12>
     9da:	00 00       	nop
	_delay_ms(5);
	sd->distance = distance_value;
     9dc:	40 91 2e 01 	lds	r20, 0x012E
     9e0:	50 91 2f 01 	lds	r21, 0x012F
     9e4:	60 91 30 01 	lds	r22, 0x0130
     9e8:	70 91 31 01 	lds	r23, 0x0131
     9ec:	4c a3       	std	Y+36, r20	; 0x24
     9ee:	5d a3       	std	Y+37, r21	; 0x25
     9f0:	6e a3       	std	Y+38, r22	; 0x26
     9f2:	7f a3       	std	Y+39, r23	; 0x27
	return;
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <send_data>:
/******************************************************************
************************** SPI FUNCTIONS **************************
******************************************************************/

void send_data(Sensor_Data* sd)
{
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	cd 52       	subi	r28, 0x2D	; 45
     a10:	d1 40       	sbci	r29, 0x01	; 1
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	8c 01       	movw	r16, r24
	unsigned char data = 0;
	data = SPDR;
     a1e:	8e b5       	in	r24, 0x2e	; 46
	switch(data)
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	a9 f1       	breq	.+106    	; 0xa8e <send_data+0x94>
     a24:	38 f4       	brcc	.+14     	; 0xa34 <send_data+0x3a>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	09 f4       	brne	.+2      	; 0xa2c <send_data+0x32>
     a2a:	c1 c0       	rjmp	.+386    	; 0xbae <send_data+0x1b4>
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	09 f4       	brne	.+2      	; 0xa32 <send_data+0x38>
     a30:	8d c0       	rjmp	.+282    	; 0xb4c <send_data+0x152>
     a32:	dd c0       	rjmp	.+442    	; 0xbee <send_data+0x1f4>
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	09 f4       	brne	.+2      	; 0xa3a <send_data+0x40>
     a38:	68 c0       	rjmp	.+208    	; 0xb0a <send_data+0x110>
     a3a:	85 30       	cpi	r24, 0x05	; 5
     a3c:	09 f0       	breq	.+2      	; 0xa40 <send_data+0x46>
     a3e:	d7 c0       	rjmp	.+430    	; 0xbee <send_data+0x1f4>
	{
		case IR_DATA_REQUEST :
			if(sd->has_ir)
     a40:	f8 01       	movw	r30, r16
     a42:	e7 5d       	subi	r30, 0xD7	; 215
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	80 81       	ld	r24, Z
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <send_data+0x54>
     a4c:	d0 c0       	rjmp	.+416    	; 0xbee <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     a4e:	81 e1       	ldi	r24, 0x11	; 17
     a50:	6d d1       	rcall	.+730    	; 0xd2c <spi_tranceiver>
     a52:	d8 01       	movw	r26, r16
     a54:	98 96       	adiw	r26, 0x28	; 40
     a56:	fe 01       	movw	r30, r28
     a58:	31 96       	adiw	r30, 0x01	; 1
     a5a:	7e 01       	movw	r14, r28
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	e8 0e       	add	r14, r24
     a60:	f8 1e       	adc	r15, r24
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
				{
					ir_packet.ir[i] = sd->ir[i];
     a62:	4d 91       	ld	r20, X+
     a64:	5d 91       	ld	r21, X+
     a66:	6d 91       	ld	r22, X+
     a68:	7d 91       	ld	r23, X+
     a6a:	41 93       	st	Z+, r20
     a6c:	51 93       	st	Z+, r21
     a6e:	61 93       	st	Z+, r22
     a70:	71 93       	st	Z+, r23
		case IR_DATA_REQUEST :
			if(sd->has_ir)
			{
				spi_tranceiver(SPI_DATA_OK);
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
     a72:	ee 15       	cp	r30, r14
     a74:	ff 05       	cpc	r31, r15
     a76:	a9 f7       	brne	.-22     	; 0xa62 <send_data+0x68>
     a78:	8e 01       	movw	r16, r28
     a7a:	0f 5f       	subi	r16, 0xFF	; 255
     a7c:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					ir_packet.ir[i] = sd->ir[i];
				}
				for (int i = 0; i < IR_SIZE; i++)
				{
					spi_tranceiver(ir_packet.packet[i]);
     a7e:	f8 01       	movw	r30, r16
     a80:	81 91       	ld	r24, Z+
     a82:	8f 01       	movw	r16, r30
     a84:	53 d1       	rcall	.+678    	; 0xd2c <spi_tranceiver>
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
				{
					ir_packet.ir[i] = sd->ir[i];
				}
				for (int i = 0; i < IR_SIZE; i++)
     a86:	e0 16       	cp	r14, r16
     a88:	f1 06       	cpc	r15, r17
     a8a:	c9 f7       	brne	.-14     	; 0xa7e <send_data+0x84>
     a8c:	b0 c0       	rjmp	.+352    	; 0xbee <send_data+0x1f4>
				}
			}
			break;
		
		case ANGLE_DATA_REQUEST :
			if(sd->has_angle)
     a8e:	f8 01       	movw	r30, r16
     a90:	e6 5d       	subi	r30, 0xD6	; 214
     a92:	fe 4f       	sbci	r31, 0xFE	; 254
     a94:	80 81       	ld	r24, Z
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <send_data+0xa2>
     a9a:	a9 c0       	rjmp	.+338    	; 0xbee <send_data+0x1f4>
			{
				
				spi_tranceiver(SPI_DATA_OK);
     a9c:	81 e1       	ldi	r24, 0x11	; 17
     a9e:	46 d1       	rcall	.+652    	; 0xd2c <spi_tranceiver>
				Angle_packet angle_packet;
				
	
				for(int i = 0; i < 3; i++)
				{
					angle_packet.angle[i] = sd->angle[i];
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 8d       	ldd	r24, Z+24	; 0x18
     aa4:	91 8d       	ldd	r25, Z+25	; 0x19
     aa6:	a2 8d       	ldd	r26, Z+26	; 0x1a
     aa8:	b3 8d       	ldd	r27, Z+27	; 0x1b
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	9a 83       	std	Y+2, r25	; 0x02
     aae:	ab 83       	std	Y+3, r26	; 0x03
     ab0:	bc 83       	std	Y+4, r27	; 0x04
     ab2:	84 8d       	ldd	r24, Z+28	; 0x1c
     ab4:	95 8d       	ldd	r25, Z+29	; 0x1d
     ab6:	a6 8d       	ldd	r26, Z+30	; 0x1e
     ab8:	b7 8d       	ldd	r27, Z+31	; 0x1f
     aba:	8d 83       	std	Y+5, r24	; 0x05
     abc:	9e 83       	std	Y+6, r25	; 0x06
     abe:	af 83       	std	Y+7, r26	; 0x07
     ac0:	b8 87       	std	Y+8, r27	; 0x08
     ac2:	80 a1       	ldd	r24, Z+32	; 0x20
     ac4:	91 a1       	ldd	r25, Z+33	; 0x21
     ac6:	a2 a1       	ldd	r26, Z+34	; 0x22
     ac8:	b3 a1       	ldd	r27, Z+35	; 0x23
     aca:	89 87       	std	Y+9, r24	; 0x09
     acc:	9a 87       	std	Y+10, r25	; 0x0a
     ace:	ab 87       	std	Y+11, r26	; 0x0b
     ad0:	bc 87       	std	Y+12, r27	; 0x0c
     ad2:	ce 01       	movw	r24, r28
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	7c 01       	movw	r14, r24
     ad8:	6e 01       	movw	r12, r28
     ada:	9d e0       	ldi	r25, 0x0D	; 13
     adc:	c9 0e       	add	r12, r25
     ade:	d1 1c       	adc	r13, r1
				}
				
				for (int i = 0; i < ANGLE_SIZE; i++)
				{
					spi_tranceiver(angle_packet.packet[i]);
     ae0:	f7 01       	movw	r30, r14
     ae2:	81 91       	ld	r24, Z+
     ae4:	7f 01       	movw	r14, r30
     ae6:	22 d1       	rcall	.+580    	; 0xd2c <spi_tranceiver>
				for(int i = 0; i < 3; i++)
				{
					angle_packet.angle[i] = sd->angle[i];
				}
				
				for (int i = 0; i < ANGLE_SIZE; i++)
     ae8:	ec 14       	cp	r14, r12
     aea:	fd 04       	cpc	r15, r13
     aec:	c9 f7       	brne	.-14     	; 0xae0 <send_data+0xe6>
					spi_tranceiver(angle_packet.packet[i]);
				}
				
				for(int i = 0; i < 3; i++)
				{
					sd->angle[i] = 0;
     aee:	f8 01       	movw	r30, r16
     af0:	10 8e       	std	Z+24, r1	; 0x18
     af2:	11 8e       	std	Z+25, r1	; 0x19
     af4:	12 8e       	std	Z+26, r1	; 0x1a
     af6:	13 8e       	std	Z+27, r1	; 0x1b
     af8:	14 8e       	std	Z+28, r1	; 0x1c
     afa:	15 8e       	std	Z+29, r1	; 0x1d
     afc:	16 8e       	std	Z+30, r1	; 0x1e
     afe:	17 8e       	std	Z+31, r1	; 0x1f
     b00:	10 a2       	std	Z+32, r1	; 0x20
     b02:	11 a2       	std	Z+33, r1	; 0x21
     b04:	12 a2       	std	Z+34, r1	; 0x22
     b06:	13 a2       	std	Z+35, r1	; 0x23
     b08:	72 c0       	rjmp	.+228    	; 0xbee <send_data+0x1f4>
			
			}
			break;
		
		case DISTANCE_DATA_REQUEST :
			if(sd->has_distance)
     b0a:	f8 01       	movw	r30, r16
     b0c:	e4 5d       	subi	r30, 0xD4	; 212
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	80 81       	ld	r24, Z
     b12:	88 23       	and	r24, r24
     b14:	09 f4       	brne	.+2      	; 0xb18 <send_data+0x11e>
     b16:	6b c0       	rjmp	.+214    	; 0xbee <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     b18:	81 e1       	ldi	r24, 0x11	; 17
     b1a:	08 d1       	rcall	.+528    	; 0xd2c <spi_tranceiver>
				Distance_packet distance_packet;
				
				distance_packet.distance = sd->distance;
     b1c:	f8 01       	movw	r30, r16
     b1e:	84 a1       	ldd	r24, Z+36	; 0x24
     b20:	95 a1       	ldd	r25, Z+37	; 0x25
     b22:	a6 a1       	ldd	r26, Z+38	; 0x26
     b24:	b7 a1       	ldd	r27, Z+39	; 0x27
     b26:	89 83       	std	Y+1, r24	; 0x01
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	ab 83       	std	Y+3, r26	; 0x03
     b2c:	bc 83       	std	Y+4, r27	; 0x04
     b2e:	8e 01       	movw	r16, r28
     b30:	0f 5f       	subi	r16, 0xFF	; 255
     b32:	1f 4f       	sbci	r17, 0xFF	; 255
     b34:	7e 01       	movw	r14, r28
     b36:	f5 e0       	ldi	r31, 0x05	; 5
     b38:	ef 0e       	add	r14, r31
     b3a:	f1 1c       	adc	r15, r1
				}
				*/
				
				for (int i = 0; i < DISTANCE_SIZE; i++)
				{
					spi_tranceiver(distance_packet.packet[i]);
     b3c:	f8 01       	movw	r30, r16
     b3e:	81 91       	ld	r24, Z+
     b40:	8f 01       	movw	r16, r30
     b42:	f4 d0       	rcall	.+488    	; 0xd2c <spi_tranceiver>
				{
					distance_packet.distance[i] = sd->distance[i];
				}
				*/
				
				for (int i = 0; i < DISTANCE_SIZE; i++)
     b44:	0e 15       	cp	r16, r14
     b46:	1f 05       	cpc	r17, r15
     b48:	c9 f7       	brne	.-14     	; 0xb3c <send_data+0x142>
     b4a:	51 c0       	rjmp	.+162    	; 0xbee <send_data+0x1f4>
				}
			}
			break;
		
		case ACC_DATA_REQUEST :
			if(sd->has_acc)
     b4c:	f8 01       	movw	r30, r16
     b4e:	e5 5d       	subi	r30, 0xD5	; 213
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	80 81       	ld	r24, Z
     b54:	88 23       	and	r24, r24
     b56:	09 f4       	brne	.+2      	; 0xb5a <send_data+0x160>
     b58:	4a c0       	rjmp	.+148    	; 0xbee <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     b5a:	81 e1       	ldi	r24, 0x11	; 17
     b5c:	e7 d0       	rcall	.+462    	; 0xd2c <spi_tranceiver>
				Acc_packet acc_packet;
				
				for(int i = 0; i < 3; i++)
				{
					acc_packet.acc[i] = sd->acc[i];
     b5e:	f8 01       	movw	r30, r16
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	a2 81       	ldd	r26, Z+2	; 0x02
     b66:	b3 81       	ldd	r27, Z+3	; 0x03
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	ab 83       	std	Y+3, r26	; 0x03
     b6e:	bc 83       	std	Y+4, r27	; 0x04
     b70:	44 81       	ldd	r20, Z+4	; 0x04
     b72:	55 81       	ldd	r21, Z+5	; 0x05
     b74:	66 81       	ldd	r22, Z+6	; 0x06
     b76:	77 81       	ldd	r23, Z+7	; 0x07
     b78:	4d 83       	std	Y+5, r20	; 0x05
     b7a:	5e 83       	std	Y+6, r21	; 0x06
     b7c:	6f 83       	std	Y+7, r22	; 0x07
     b7e:	78 87       	std	Y+8, r23	; 0x08
     b80:	80 85       	ldd	r24, Z+8	; 0x08
     b82:	91 85       	ldd	r25, Z+9	; 0x09
     b84:	a2 85       	ldd	r26, Z+10	; 0x0a
     b86:	b3 85       	ldd	r27, Z+11	; 0x0b
     b88:	89 87       	std	Y+9, r24	; 0x09
     b8a:	9a 87       	std	Y+10, r25	; 0x0a
     b8c:	ab 87       	std	Y+11, r26	; 0x0b
     b8e:	bc 87       	std	Y+12, r27	; 0x0c
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	7e 01       	movw	r14, r28
     b98:	fd e0       	ldi	r31, 0x0D	; 13
     b9a:	ef 0e       	add	r14, r31
     b9c:	f1 1c       	adc	r15, r1
				}
				for (int i = 0; i < ACC_SIZE; i++)
				{
					spi_tranceiver(acc_packet.packet[i]);
     b9e:	f8 01       	movw	r30, r16
     ba0:	81 91       	ld	r24, Z+
     ba2:	8f 01       	movw	r16, r30
     ba4:	c3 d0       	rcall	.+390    	; 0xd2c <spi_tranceiver>
				
				for(int i = 0; i < 3; i++)
				{
					acc_packet.acc[i] = sd->acc[i];
				}
				for (int i = 0; i < ACC_SIZE; i++)
     ba6:	0e 15       	cp	r16, r14
     ba8:	1f 05       	cpc	r17, r15
     baa:	c9 f7       	brne	.-14     	; 0xb9e <send_data+0x1a4>
     bac:	20 c0       	rjmp	.+64     	; 0xbee <send_data+0x1f4>
				}
			}
			break;
			
		case ALL_DATA_REQUEST :
			if(sd->has_data)
     bae:	f8 01       	movw	r30, r16
     bb0:	e8 5d       	subi	r30, 0xD8	; 216
     bb2:	fe 4f       	sbci	r31, 0xFE	; 254
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	d1 f0       	breq	.+52     	; 0xbee <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     bba:	81 e1       	ldi	r24, 0x11	; 17
     bbc:	b7 d0       	rcall	.+366    	; 0xd2c <spi_tranceiver>
				SPI_packet spi_packet;
				spi_packet.sd = *sd;
     bbe:	8d e2       	ldi	r24, 0x2D	; 45
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	f8 01       	movw	r30, r16
     bc4:	de 01       	movw	r26, r28
     bc6:	11 96       	adiw	r26, 0x01	; 1
     bc8:	01 90       	ld	r0, Z+
     bca:	0d 92       	st	X+, r0
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <send_data+0x1ce>
     bd0:	8e 01       	movw	r16, r28
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	7e 01       	movw	r14, r28
     bd8:	f2 ed       	ldi	r31, 0xD2	; 210
     bda:	ef 1a       	sub	r14, r31
     bdc:	fe ef       	ldi	r31, 0xFE	; 254
     bde:	ff 0a       	sbc	r15, r31
				for (int i = 0; i < PACKET_SIZE; i++)
				{
					spi_tranceiver(spi_packet.packet[i]);
     be0:	f8 01       	movw	r30, r16
     be2:	81 91       	ld	r24, Z+
     be4:	8f 01       	movw	r16, r30
     be6:	a2 d0       	rcall	.+324    	; 0xd2c <spi_tranceiver>
			if(sd->has_data)
			{
				spi_tranceiver(SPI_DATA_OK);
				SPI_packet spi_packet;
				spi_packet.sd = *sd;
				for (int i = 0; i < PACKET_SIZE; i++)
     be8:	0e 15       	cp	r16, r14
     bea:	1f 05       	cpc	r17, r15
     bec:	c9 f7       	brne	.-14     	; 0xbe0 <send_data+0x1e6>
		/*default :
			spi_tranceiver(SPI_DATA_ERROR);
			led_blink_yellow(1);
			break;*/
	}
}
     bee:	c3 5d       	subi	r28, 0xD3	; 211
     bf0:	de 4f       	sbci	r29, 0xFE	; 254
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	08 95       	ret

00000c0e <__vector_19>:
	EIFR = (1 << INT0);				// Clear flag
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
*/

ISR(SPI_STC_vect)  
{  
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
	if (!(data_sending))
     c34:	80 91 0d 01 	lds	r24, 0x010D
     c38:	81 11       	cpse	r24, r1
     c3a:	0a c0       	rjmp	.+20     	; 0xc50 <__vector_19+0x42>
	{
		data_sending = true;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 0d 01 	sts	0x010D, r24
		send_data(current_data);
     c42:	80 91 2a 01 	lds	r24, 0x012A
     c46:	90 91 2b 01 	lds	r25, 0x012B
     c4a:	d7 de       	rcall	.-594    	; 0x9fa <send_data>
		data_sending = false;
     c4c:	10 92 0d 01 	sts	0x010D, r1
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__vector_24>:

ISR(ADC_vect)
{
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	0b b6       	in	r0, 0x3b	; 59
     c82:	0f 92       	push	r0
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	digital_data = (uint16_t)(ADCL | (ADCH << 8));
     c9c:	80 91 78 00 	lds	r24, 0x0078
     ca0:	20 91 79 00 	lds	r18, 0x0079
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	92 2b       	or	r25, r18
     ca8:	90 93 2d 01 	sts	0x012D, r25
     cac:	80 93 2c 01 	sts	0x012C, r24
	/*********************************************************
						Vid kalibrering:
	*********************************************************/
	//Write_data_to_LCD(digital_data); 
	/*------------------------------------------------------*/
	distance_value = format_distance(digital_data);
     cb0:	80 91 2c 01 	lds	r24, 0x012C
     cb4:	90 91 2d 01 	lds	r25, 0x012D
     cb8:	0c dc       	rcall	.-2024   	; 0x4d2 <format_distance>
     cba:	60 93 2e 01 	sts	0x012E, r22
     cbe:	70 93 2f 01 	sts	0x012F, r23
     cc2:	80 93 30 01 	sts	0x0130, r24
     cc6:	90 93 31 01 	sts	0x0131, r25
     cca:	8f e9       	ldi	r24, 0x9F	; 159
     ccc:	9f e0       	ldi	r25, 0x0F	; 15
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <__vector_24+0x58>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <__vector_24+0x5e>
     cd4:	00 00       	nop
	//Write_data_to_LCD(distance); 
	_delay_ms(1);
	ADCSRA |= (0 << ADEN) | (0 << ADIE);
     cd6:	ea e7       	ldi	r30, 0x7A	; 122
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 83       	st	Z, r24
}
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0b be       	out	0x3b, r0	; 59
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <main>:

int main(void)
{
	initialize_all();
     d04:	47 de       	rcall	.-882    	; 0x994 <initialize_all>
	current_data = create_empty_sensor(true);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	62 db       	rcall	.-2364   	; 0x3ce <create_empty_sensor>
     d0a:	90 93 2b 01 	sts	0x012B, r25
     d0e:	80 93 2a 01 	sts	0x012A, r24
	while(1) 
	{
		get_distance(current_data);
     d12:	80 91 2a 01 	lds	r24, 0x012A
     d16:	90 91 2b 01 	lds	r25, 0x012B
     d1a:	56 de       	rcall	.-852    	; 0x9c8 <get_distance>
     d1c:	fa cf       	rjmp	.-12     	; 0xd12 <main+0xe>

00000d1e <spi_init>:

#include "spi_slave.h"

void spi_init(void)
{
	SPCR |= (1 << SPIE);  
     d1e:	8c b5       	in	r24, 0x2c	; 44
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);  //Enable SPI
     d24:	8c b5       	in	r24, 0x2c	; 44
     d26:	80 64       	ori	r24, 0x40	; 64
     d28:	8c bd       	out	0x2c, r24	; 44
     d2a:	08 95       	ret

00000d2c <spi_tranceiver>:
}

//Function to send and receive data
unsigned char spi_tranceiver (unsigned char indata)
{	
	SPDR = indata;											//Load data into buffer
     d2c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));							//Wait until transmission complete
     d2e:	0d b4       	in	r0, 0x2d	; 45
     d30:	07 fe       	sbrs	r0, 7
     d32:	fd cf       	rjmp	.-6      	; 0xd2e <spi_tranceiver+0x2>
	return SPDR;											//Return received data
     d34:	8e b5       	in	r24, 0x2e	; 46
}
     d36:	08 95       	ret

00000d38 <data_direction_init>:

void data_direction_init()
{
	DDRB = (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB6);			//Set PB0, PB1, PB2 and PB6 (MISO) as outputs
     d38:	87 e4       	ldi	r24, 0x47	; 71
     d3a:	84 b9       	out	0x04, r24	; 4
     d3c:	08 95       	ret

00000d3e <__vector_15>:

volatile uint64_t overflows;
volatile float prescaler_;

ISR(TIMER1_OVF_vect)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	2f 93       	push	r18
     d4a:	3f 93       	push	r19
     d4c:	4f 93       	push	r20
     d4e:	5f 93       	push	r21
     d50:	6f 93       	push	r22
     d52:	7f 93       	push	r23
     d54:	8f 93       	push	r24
     d56:	9f 93       	push	r25
     d58:	af 93       	push	r26
	//keep track of number of overflows
	overflows++;
     d5a:	20 91 36 01 	lds	r18, 0x0136
     d5e:	30 91 37 01 	lds	r19, 0x0137
     d62:	40 91 38 01 	lds	r20, 0x0138
     d66:	50 91 39 01 	lds	r21, 0x0139
     d6a:	60 91 3a 01 	lds	r22, 0x013A
     d6e:	70 91 3b 01 	lds	r23, 0x013B
     d72:	80 91 3c 01 	lds	r24, 0x013C
     d76:	90 91 3d 01 	lds	r25, 0x013D
     d7a:	a1 e0       	ldi	r26, 0x01	; 1
     d7c:	d5 d3       	rcall	.+1962   	; 0x1528 <__adddi3_s8>
     d7e:	20 93 36 01 	sts	0x0136, r18
     d82:	30 93 37 01 	sts	0x0137, r19
     d86:	40 93 38 01 	sts	0x0138, r20
     d8a:	50 93 39 01 	sts	0x0139, r21
     d8e:	60 93 3a 01 	sts	0x013A, r22
     d92:	70 93 3b 01 	sts	0x013B, r23
     d96:	80 93 3c 01 	sts	0x013C, r24
     d9a:	90 93 3d 01 	sts	0x013D, r25
}
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <timer_1_init>:

void timer_1_init(float prescaler)
{
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	6b 01       	movw	r12, r22
     dc4:	7c 01       	movw	r14, r24
	//normal mode
	TCCR1A |= (0 << WGM10)|(0 << WGM11)|(0 << WGM12);;
     dc6:	e0 e8       	ldi	r30, 0x80	; 128
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 83       	st	Z, r24
	if (prescaler == 1.0)
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	40 e8       	ldi	r20, 0x80	; 128
     dd4:	5f e3       	ldi	r21, 0x3F	; 63
     dd6:	c7 01       	movw	r24, r14
     dd8:	b6 01       	movw	r22, r12
     dda:	ba d0       	rcall	.+372    	; 0xf50 <__cmpsf2>
     ddc:	81 11       	cpse	r24, r1
     dde:	06 c0       	rjmp	.+12     	; 0xdec <timer_1_init+0x32>
	{
		TCCR1B |= (1 << CS00)|(0 << CS01)|(0 << CS02);
     de0:	e1 e8       	ldi	r30, 0x81	; 129
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	81 60       	ori	r24, 0x01	; 1
     de8:	80 83       	st	Z, r24
     dea:	1e c0       	rjmp	.+60     	; 0xe28 <timer_1_init+0x6e>
	}
	if (prescaler == 8.0)
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	ab d0       	rcall	.+342    	; 0xf50 <__cmpsf2>
     dfa:	81 11       	cpse	r24, r1
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <timer_1_init+0x50>
	{
		TCCR1B |= (0 << CS00)|(1 << CS01)|(0 << CS02);
     dfe:	e1 e8       	ldi	r30, 0x81	; 129
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	80 83       	st	Z, r24
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <timer_1_init+0x8c>
	}
	if (prescaler == 64.0)
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	52 e4       	ldi	r21, 0x42	; 66
     e12:	c7 01       	movw	r24, r14
     e14:	b6 01       	movw	r22, r12
     e16:	9c d0       	rcall	.+312    	; 0xf50 <__cmpsf2>
     e18:	81 11       	cpse	r24, r1
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <timer_1_init+0x6e>
	{
		TCCR1B |= (1 << CS00)|(1 << CS01)|(0 << CS02);
     e1c:	e1 e8       	ldi	r30, 0x81	; 129
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	83 60       	ori	r24, 0x03	; 3
     e24:	80 83       	st	Z, r24
     e26:	1d c0       	rjmp	.+58     	; 0xe62 <timer_1_init+0xa8>
	}
	if (prescaler == 256.0)
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e8       	ldi	r20, 0x80	; 128
     e2e:	53 e4       	ldi	r21, 0x43	; 67
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	8d d0       	rcall	.+282    	; 0xf50 <__cmpsf2>
     e36:	81 11       	cpse	r24, r1
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <timer_1_init+0x8c>
	{
		TCCR1B |= (0 << CS00)|(0 << CS01)|(1 << CS02);
     e3a:	e1 e8       	ldi	r30, 0x81	; 129
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	84 60       	ori	r24, 0x04	; 4
     e42:	80 83       	st	Z, r24
     e44:	0e c0       	rjmp	.+28     	; 0xe62 <timer_1_init+0xa8>
	}
	if (prescaler == 1024.0)
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	40 e8       	ldi	r20, 0x80	; 128
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	7e d0       	rcall	.+252    	; 0xf50 <__cmpsf2>
     e54:	81 11       	cpse	r24, r1
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <timer_1_init+0xa8>
	{
		TCCR1B |= (1 << CS00)|(0 << CS01)|(1 << CS02);
     e58:	e1 e8       	ldi	r30, 0x81	; 129
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	85 60       	ori	r24, 0x05	; 5
     e60:	80 83       	st	Z, r24
	}
	prescaler_ = prescaler;
     e62:	c0 92 32 01 	sts	0x0132, r12
     e66:	d0 92 33 01 	sts	0x0133, r13
     e6a:	e0 92 34 01 	sts	0x0134, r14
     e6e:	f0 92 35 01 	sts	0x0135, r15
	TIMSK1 |= (1 << TOIE1);
     e72:	ef e6       	ldi	r30, 0x6F	; 111
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	80 83       	st	Z, r24
}
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	08 95       	ret

00000e86 <__subsf3>:
     e86:	50 58       	subi	r21, 0x80	; 128

00000e88 <__addsf3>:
     e88:	bb 27       	eor	r27, r27
     e8a:	aa 27       	eor	r26, r26
     e8c:	0e d0       	rcall	.+28     	; 0xeaa <__addsf3x>
     e8e:	44 c1       	rjmp	.+648    	; 0x1118 <__fp_round>
     e90:	35 d1       	rcall	.+618    	; 0x10fc <__fp_pscA>
     e92:	30 f0       	brcs	.+12     	; 0xea0 <__addsf3+0x18>
     e94:	3a d1       	rcall	.+628    	; 0x110a <__fp_pscB>
     e96:	20 f0       	brcs	.+8      	; 0xea0 <__addsf3+0x18>
     e98:	31 f4       	brne	.+12     	; 0xea6 <__addsf3+0x1e>
     e9a:	9f 3f       	cpi	r25, 0xFF	; 255
     e9c:	11 f4       	brne	.+4      	; 0xea2 <__addsf3+0x1a>
     e9e:	1e f4       	brtc	.+6      	; 0xea6 <__addsf3+0x1e>
     ea0:	2a c1       	rjmp	.+596    	; 0x10f6 <__fp_nan>
     ea2:	0e f4       	brtc	.+2      	; 0xea6 <__addsf3+0x1e>
     ea4:	e0 95       	com	r30
     ea6:	e7 fb       	bst	r30, 7
     ea8:	20 c1       	rjmp	.+576    	; 0x10ea <__fp_inf>

00000eaa <__addsf3x>:
     eaa:	e9 2f       	mov	r30, r25
     eac:	46 d1       	rcall	.+652    	; 0x113a <__fp_split3>
     eae:	80 f3       	brcs	.-32     	; 0xe90 <__addsf3+0x8>
     eb0:	ba 17       	cp	r27, r26
     eb2:	62 07       	cpc	r22, r18
     eb4:	73 07       	cpc	r23, r19
     eb6:	84 07       	cpc	r24, r20
     eb8:	95 07       	cpc	r25, r21
     eba:	18 f0       	brcs	.+6      	; 0xec2 <__addsf3x+0x18>
     ebc:	71 f4       	brne	.+28     	; 0xeda <__addsf3x+0x30>
     ebe:	9e f5       	brtc	.+102    	; 0xf26 <__addsf3x+0x7c>
     ec0:	5e c1       	rjmp	.+700    	; 0x117e <__fp_zero>
     ec2:	0e f4       	brtc	.+2      	; 0xec6 <__addsf3x+0x1c>
     ec4:	e0 95       	com	r30
     ec6:	0b 2e       	mov	r0, r27
     ec8:	ba 2f       	mov	r27, r26
     eca:	a0 2d       	mov	r26, r0
     ecc:	0b 01       	movw	r0, r22
     ece:	b9 01       	movw	r22, r18
     ed0:	90 01       	movw	r18, r0
     ed2:	0c 01       	movw	r0, r24
     ed4:	ca 01       	movw	r24, r20
     ed6:	a0 01       	movw	r20, r0
     ed8:	11 24       	eor	r1, r1
     eda:	ff 27       	eor	r31, r31
     edc:	59 1b       	sub	r21, r25
     ede:	99 f0       	breq	.+38     	; 0xf06 <__addsf3x+0x5c>
     ee0:	59 3f       	cpi	r21, 0xF9	; 249
     ee2:	50 f4       	brcc	.+20     	; 0xef8 <__addsf3x+0x4e>
     ee4:	50 3e       	cpi	r21, 0xE0	; 224
     ee6:	68 f1       	brcs	.+90     	; 0xf42 <__addsf3x+0x98>
     ee8:	1a 16       	cp	r1, r26
     eea:	f0 40       	sbci	r31, 0x00	; 0
     eec:	a2 2f       	mov	r26, r18
     eee:	23 2f       	mov	r18, r19
     ef0:	34 2f       	mov	r19, r20
     ef2:	44 27       	eor	r20, r20
     ef4:	58 5f       	subi	r21, 0xF8	; 248
     ef6:	f3 cf       	rjmp	.-26     	; 0xede <__addsf3x+0x34>
     ef8:	46 95       	lsr	r20
     efa:	37 95       	ror	r19
     efc:	27 95       	ror	r18
     efe:	a7 95       	ror	r26
     f00:	f0 40       	sbci	r31, 0x00	; 0
     f02:	53 95       	inc	r21
     f04:	c9 f7       	brne	.-14     	; 0xef8 <__addsf3x+0x4e>
     f06:	7e f4       	brtc	.+30     	; 0xf26 <__addsf3x+0x7c>
     f08:	1f 16       	cp	r1, r31
     f0a:	ba 0b       	sbc	r27, r26
     f0c:	62 0b       	sbc	r22, r18
     f0e:	73 0b       	sbc	r23, r19
     f10:	84 0b       	sbc	r24, r20
     f12:	ba f0       	brmi	.+46     	; 0xf42 <__addsf3x+0x98>
     f14:	91 50       	subi	r25, 0x01	; 1
     f16:	a1 f0       	breq	.+40     	; 0xf40 <__addsf3x+0x96>
     f18:	ff 0f       	add	r31, r31
     f1a:	bb 1f       	adc	r27, r27
     f1c:	66 1f       	adc	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	88 1f       	adc	r24, r24
     f22:	c2 f7       	brpl	.-16     	; 0xf14 <__addsf3x+0x6a>
     f24:	0e c0       	rjmp	.+28     	; 0xf42 <__addsf3x+0x98>
     f26:	ba 0f       	add	r27, r26
     f28:	62 1f       	adc	r22, r18
     f2a:	73 1f       	adc	r23, r19
     f2c:	84 1f       	adc	r24, r20
     f2e:	48 f4       	brcc	.+18     	; 0xf42 <__addsf3x+0x98>
     f30:	87 95       	ror	r24
     f32:	77 95       	ror	r23
     f34:	67 95       	ror	r22
     f36:	b7 95       	ror	r27
     f38:	f7 95       	ror	r31
     f3a:	9e 3f       	cpi	r25, 0xFE	; 254
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__addsf3x+0x96>
     f3e:	b3 cf       	rjmp	.-154    	; 0xea6 <__addsf3+0x1e>
     f40:	93 95       	inc	r25
     f42:	88 0f       	add	r24, r24
     f44:	08 f0       	brcs	.+2      	; 0xf48 <__addsf3x+0x9e>
     f46:	99 27       	eor	r25, r25
     f48:	ee 0f       	add	r30, r30
     f4a:	97 95       	ror	r25
     f4c:	87 95       	ror	r24
     f4e:	08 95       	ret

00000f50 <__cmpsf2>:
     f50:	a8 d0       	rcall	.+336    	; 0x10a2 <__fp_cmp>
     f52:	08 f4       	brcc	.+2      	; 0xf56 <__cmpsf2+0x6>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	08 95       	ret

00000f58 <__divsf3>:
     f58:	0c d0       	rcall	.+24     	; 0xf72 <__divsf3x>
     f5a:	de c0       	rjmp	.+444    	; 0x1118 <__fp_round>
     f5c:	d6 d0       	rcall	.+428    	; 0x110a <__fp_pscB>
     f5e:	40 f0       	brcs	.+16     	; 0xf70 <__divsf3+0x18>
     f60:	cd d0       	rcall	.+410    	; 0x10fc <__fp_pscA>
     f62:	30 f0       	brcs	.+12     	; 0xf70 <__divsf3+0x18>
     f64:	21 f4       	brne	.+8      	; 0xf6e <__divsf3+0x16>
     f66:	5f 3f       	cpi	r21, 0xFF	; 255
     f68:	19 f0       	breq	.+6      	; 0xf70 <__divsf3+0x18>
     f6a:	bf c0       	rjmp	.+382    	; 0x10ea <__fp_inf>
     f6c:	51 11       	cpse	r21, r1
     f6e:	08 c1       	rjmp	.+528    	; 0x1180 <__fp_szero>
     f70:	c2 c0       	rjmp	.+388    	; 0x10f6 <__fp_nan>

00000f72 <__divsf3x>:
     f72:	e3 d0       	rcall	.+454    	; 0x113a <__fp_split3>
     f74:	98 f3       	brcs	.-26     	; 0xf5c <__divsf3+0x4>

00000f76 <__divsf3_pse>:
     f76:	99 23       	and	r25, r25
     f78:	c9 f3       	breq	.-14     	; 0xf6c <__divsf3+0x14>
     f7a:	55 23       	and	r21, r21
     f7c:	b1 f3       	breq	.-20     	; 0xf6a <__divsf3+0x12>
     f7e:	95 1b       	sub	r25, r21
     f80:	55 0b       	sbc	r21, r21
     f82:	bb 27       	eor	r27, r27
     f84:	aa 27       	eor	r26, r26
     f86:	62 17       	cp	r22, r18
     f88:	73 07       	cpc	r23, r19
     f8a:	84 07       	cpc	r24, r20
     f8c:	38 f0       	brcs	.+14     	; 0xf9c <__divsf3_pse+0x26>
     f8e:	9f 5f       	subi	r25, 0xFF	; 255
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	44 1f       	adc	r20, r20
     f98:	aa 1f       	adc	r26, r26
     f9a:	a9 f3       	breq	.-22     	; 0xf86 <__divsf3_pse+0x10>
     f9c:	33 d0       	rcall	.+102    	; 0x1004 <__divsf3_pse+0x8e>
     f9e:	0e 2e       	mov	r0, r30
     fa0:	3a f0       	brmi	.+14     	; 0xfb0 <__divsf3_pse+0x3a>
     fa2:	e0 e8       	ldi	r30, 0x80	; 128
     fa4:	30 d0       	rcall	.+96     	; 0x1006 <__divsf3_pse+0x90>
     fa6:	91 50       	subi	r25, 0x01	; 1
     fa8:	50 40       	sbci	r21, 0x00	; 0
     faa:	e6 95       	lsr	r30
     fac:	00 1c       	adc	r0, r0
     fae:	ca f7       	brpl	.-14     	; 0xfa2 <__divsf3_pse+0x2c>
     fb0:	29 d0       	rcall	.+82     	; 0x1004 <__divsf3_pse+0x8e>
     fb2:	fe 2f       	mov	r31, r30
     fb4:	27 d0       	rcall	.+78     	; 0x1004 <__divsf3_pse+0x8e>
     fb6:	66 0f       	add	r22, r22
     fb8:	77 1f       	adc	r23, r23
     fba:	88 1f       	adc	r24, r24
     fbc:	bb 1f       	adc	r27, r27
     fbe:	26 17       	cp	r18, r22
     fc0:	37 07       	cpc	r19, r23
     fc2:	48 07       	cpc	r20, r24
     fc4:	ab 07       	cpc	r26, r27
     fc6:	b0 e8       	ldi	r27, 0x80	; 128
     fc8:	09 f0       	breq	.+2      	; 0xfcc <__divsf3_pse+0x56>
     fca:	bb 0b       	sbc	r27, r27
     fcc:	80 2d       	mov	r24, r0
     fce:	bf 01       	movw	r22, r30
     fd0:	ff 27       	eor	r31, r31
     fd2:	93 58       	subi	r25, 0x83	; 131
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	2a f0       	brmi	.+10     	; 0xfe2 <__divsf3_pse+0x6c>
     fd8:	9e 3f       	cpi	r25, 0xFE	; 254
     fda:	51 05       	cpc	r21, r1
     fdc:	68 f0       	brcs	.+26     	; 0xff8 <__divsf3_pse+0x82>
     fde:	85 c0       	rjmp	.+266    	; 0x10ea <__fp_inf>
     fe0:	cf c0       	rjmp	.+414    	; 0x1180 <__fp_szero>
     fe2:	5f 3f       	cpi	r21, 0xFF	; 255
     fe4:	ec f3       	brlt	.-6      	; 0xfe0 <__divsf3_pse+0x6a>
     fe6:	98 3e       	cpi	r25, 0xE8	; 232
     fe8:	dc f3       	brlt	.-10     	; 0xfe0 <__divsf3_pse+0x6a>
     fea:	86 95       	lsr	r24
     fec:	77 95       	ror	r23
     fee:	67 95       	ror	r22
     ff0:	b7 95       	ror	r27
     ff2:	f7 95       	ror	r31
     ff4:	9f 5f       	subi	r25, 0xFF	; 255
     ff6:	c9 f7       	brne	.-14     	; 0xfea <__divsf3_pse+0x74>
     ff8:	88 0f       	add	r24, r24
     ffa:	91 1d       	adc	r25, r1
     ffc:	96 95       	lsr	r25
     ffe:	87 95       	ror	r24
    1000:	97 f9       	bld	r25, 7
    1002:	08 95       	ret
    1004:	e1 e0       	ldi	r30, 0x01	; 1
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	bb 1f       	adc	r27, r27
    100e:	62 17       	cp	r22, r18
    1010:	73 07       	cpc	r23, r19
    1012:	84 07       	cpc	r24, r20
    1014:	ba 07       	cpc	r27, r26
    1016:	20 f0       	brcs	.+8      	; 0x1020 <__divsf3_pse+0xaa>
    1018:	62 1b       	sub	r22, r18
    101a:	73 0b       	sbc	r23, r19
    101c:	84 0b       	sbc	r24, r20
    101e:	ba 0b       	sbc	r27, r26
    1020:	ee 1f       	adc	r30, r30
    1022:	88 f7       	brcc	.-30     	; 0x1006 <__divsf3_pse+0x90>
    1024:	e0 95       	com	r30
    1026:	08 95       	ret

00001028 <__floatunsisf>:
    1028:	e8 94       	clt
    102a:	09 c0       	rjmp	.+18     	; 0x103e <__floatsisf+0x12>

0000102c <__floatsisf>:
    102c:	97 fb       	bst	r25, 7
    102e:	3e f4       	brtc	.+14     	; 0x103e <__floatsisf+0x12>
    1030:	90 95       	com	r25
    1032:	80 95       	com	r24
    1034:	70 95       	com	r23
    1036:	61 95       	neg	r22
    1038:	7f 4f       	sbci	r23, 0xFF	; 255
    103a:	8f 4f       	sbci	r24, 0xFF	; 255
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	99 23       	and	r25, r25
    1040:	a9 f0       	breq	.+42     	; 0x106c <__floatsisf+0x40>
    1042:	f9 2f       	mov	r31, r25
    1044:	96 e9       	ldi	r25, 0x96	; 150
    1046:	bb 27       	eor	r27, r27
    1048:	93 95       	inc	r25
    104a:	f6 95       	lsr	r31
    104c:	87 95       	ror	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	b7 95       	ror	r27
    1054:	f1 11       	cpse	r31, r1
    1056:	f8 cf       	rjmp	.-16     	; 0x1048 <__floatsisf+0x1c>
    1058:	fa f4       	brpl	.+62     	; 0x1098 <__floatsisf+0x6c>
    105a:	bb 0f       	add	r27, r27
    105c:	11 f4       	brne	.+4      	; 0x1062 <__floatsisf+0x36>
    105e:	60 ff       	sbrs	r22, 0
    1060:	1b c0       	rjmp	.+54     	; 0x1098 <__floatsisf+0x6c>
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	8f 4f       	sbci	r24, 0xFF	; 255
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	16 c0       	rjmp	.+44     	; 0x1098 <__floatsisf+0x6c>
    106c:	88 23       	and	r24, r24
    106e:	11 f0       	breq	.+4      	; 0x1074 <__floatsisf+0x48>
    1070:	96 e9       	ldi	r25, 0x96	; 150
    1072:	11 c0       	rjmp	.+34     	; 0x1096 <__floatsisf+0x6a>
    1074:	77 23       	and	r23, r23
    1076:	21 f0       	breq	.+8      	; 0x1080 <__floatsisf+0x54>
    1078:	9e e8       	ldi	r25, 0x8E	; 142
    107a:	87 2f       	mov	r24, r23
    107c:	76 2f       	mov	r23, r22
    107e:	05 c0       	rjmp	.+10     	; 0x108a <__floatsisf+0x5e>
    1080:	66 23       	and	r22, r22
    1082:	71 f0       	breq	.+28     	; 0x10a0 <__floatsisf+0x74>
    1084:	96 e8       	ldi	r25, 0x86	; 134
    1086:	86 2f       	mov	r24, r22
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	2a f0       	brmi	.+10     	; 0x1098 <__floatsisf+0x6c>
    108e:	9a 95       	dec	r25
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	da f7       	brpl	.-10     	; 0x108e <__floatsisf+0x62>
    1098:	88 0f       	add	r24, r24
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24
    109e:	97 f9       	bld	r25, 7
    10a0:	08 95       	ret

000010a2 <__fp_cmp>:
    10a2:	99 0f       	add	r25, r25
    10a4:	00 08       	sbc	r0, r0
    10a6:	55 0f       	add	r21, r21
    10a8:	aa 0b       	sbc	r26, r26
    10aa:	e0 e8       	ldi	r30, 0x80	; 128
    10ac:	fe ef       	ldi	r31, 0xFE	; 254
    10ae:	16 16       	cp	r1, r22
    10b0:	17 06       	cpc	r1, r23
    10b2:	e8 07       	cpc	r30, r24
    10b4:	f9 07       	cpc	r31, r25
    10b6:	c0 f0       	brcs	.+48     	; 0x10e8 <__fp_cmp+0x46>
    10b8:	12 16       	cp	r1, r18
    10ba:	13 06       	cpc	r1, r19
    10bc:	e4 07       	cpc	r30, r20
    10be:	f5 07       	cpc	r31, r21
    10c0:	98 f0       	brcs	.+38     	; 0x10e8 <__fp_cmp+0x46>
    10c2:	62 1b       	sub	r22, r18
    10c4:	73 0b       	sbc	r23, r19
    10c6:	84 0b       	sbc	r24, r20
    10c8:	95 0b       	sbc	r25, r21
    10ca:	39 f4       	brne	.+14     	; 0x10da <__fp_cmp+0x38>
    10cc:	0a 26       	eor	r0, r26
    10ce:	61 f0       	breq	.+24     	; 0x10e8 <__fp_cmp+0x46>
    10d0:	23 2b       	or	r18, r19
    10d2:	24 2b       	or	r18, r20
    10d4:	25 2b       	or	r18, r21
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <__fp_cmp+0x3e>
    10d8:	08 95       	ret
    10da:	0a 26       	eor	r0, r26
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <__fp_cmp+0x3e>
    10de:	a1 40       	sbci	r26, 0x01	; 1
    10e0:	a6 95       	lsr	r26
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	81 1d       	adc	r24, r1
    10e6:	81 1d       	adc	r24, r1
    10e8:	08 95       	ret

000010ea <__fp_inf>:
    10ea:	97 f9       	bld	r25, 7
    10ec:	9f 67       	ori	r25, 0x7F	; 127
    10ee:	80 e8       	ldi	r24, 0x80	; 128
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	08 95       	ret

000010f6 <__fp_nan>:
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	80 ec       	ldi	r24, 0xC0	; 192
    10fa:	08 95       	ret

000010fc <__fp_pscA>:
    10fc:	00 24       	eor	r0, r0
    10fe:	0a 94       	dec	r0
    1100:	16 16       	cp	r1, r22
    1102:	17 06       	cpc	r1, r23
    1104:	18 06       	cpc	r1, r24
    1106:	09 06       	cpc	r0, r25
    1108:	08 95       	ret

0000110a <__fp_pscB>:
    110a:	00 24       	eor	r0, r0
    110c:	0a 94       	dec	r0
    110e:	12 16       	cp	r1, r18
    1110:	13 06       	cpc	r1, r19
    1112:	14 06       	cpc	r1, r20
    1114:	05 06       	cpc	r0, r21
    1116:	08 95       	ret

00001118 <__fp_round>:
    1118:	09 2e       	mov	r0, r25
    111a:	03 94       	inc	r0
    111c:	00 0c       	add	r0, r0
    111e:	11 f4       	brne	.+4      	; 0x1124 <__fp_round+0xc>
    1120:	88 23       	and	r24, r24
    1122:	52 f0       	brmi	.+20     	; 0x1138 <__fp_round+0x20>
    1124:	bb 0f       	add	r27, r27
    1126:	40 f4       	brcc	.+16     	; 0x1138 <__fp_round+0x20>
    1128:	bf 2b       	or	r27, r31
    112a:	11 f4       	brne	.+4      	; 0x1130 <__fp_round+0x18>
    112c:	60 ff       	sbrs	r22, 0
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <__fp_round+0x20>
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <__fp_split3>:
    113a:	57 fd       	sbrc	r21, 7
    113c:	90 58       	subi	r25, 0x80	; 128
    113e:	44 0f       	add	r20, r20
    1140:	55 1f       	adc	r21, r21
    1142:	59 f0       	breq	.+22     	; 0x115a <__fp_splitA+0x10>
    1144:	5f 3f       	cpi	r21, 0xFF	; 255
    1146:	71 f0       	breq	.+28     	; 0x1164 <__fp_splitA+0x1a>
    1148:	47 95       	ror	r20

0000114a <__fp_splitA>:
    114a:	88 0f       	add	r24, r24
    114c:	97 fb       	bst	r25, 7
    114e:	99 1f       	adc	r25, r25
    1150:	61 f0       	breq	.+24     	; 0x116a <__fp_splitA+0x20>
    1152:	9f 3f       	cpi	r25, 0xFF	; 255
    1154:	79 f0       	breq	.+30     	; 0x1174 <__fp_splitA+0x2a>
    1156:	87 95       	ror	r24
    1158:	08 95       	ret
    115a:	12 16       	cp	r1, r18
    115c:	13 06       	cpc	r1, r19
    115e:	14 06       	cpc	r1, r20
    1160:	55 1f       	adc	r21, r21
    1162:	f2 cf       	rjmp	.-28     	; 0x1148 <__fp_split3+0xe>
    1164:	46 95       	lsr	r20
    1166:	f1 df       	rcall	.-30     	; 0x114a <__fp_splitA>
    1168:	08 c0       	rjmp	.+16     	; 0x117a <__fp_splitA+0x30>
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	18 06       	cpc	r1, r24
    1170:	99 1f       	adc	r25, r25
    1172:	f1 cf       	rjmp	.-30     	; 0x1156 <__fp_splitA+0xc>
    1174:	86 95       	lsr	r24
    1176:	71 05       	cpc	r23, r1
    1178:	61 05       	cpc	r22, r1
    117a:	08 94       	sec
    117c:	08 95       	ret

0000117e <__fp_zero>:
    117e:	e8 94       	clt

00001180 <__fp_szero>:
    1180:	bb 27       	eor	r27, r27
    1182:	66 27       	eor	r22, r22
    1184:	77 27       	eor	r23, r23
    1186:	cb 01       	movw	r24, r22
    1188:	97 f9       	bld	r25, 7
    118a:	08 95       	ret

0000118c <__mulsf3>:
    118c:	0b d0       	rcall	.+22     	; 0x11a4 <__mulsf3x>
    118e:	c4 cf       	rjmp	.-120    	; 0x1118 <__fp_round>
    1190:	b5 df       	rcall	.-150    	; 0x10fc <__fp_pscA>
    1192:	28 f0       	brcs	.+10     	; 0x119e <__mulsf3+0x12>
    1194:	ba df       	rcall	.-140    	; 0x110a <__fp_pscB>
    1196:	18 f0       	brcs	.+6      	; 0x119e <__mulsf3+0x12>
    1198:	95 23       	and	r25, r21
    119a:	09 f0       	breq	.+2      	; 0x119e <__mulsf3+0x12>
    119c:	a6 cf       	rjmp	.-180    	; 0x10ea <__fp_inf>
    119e:	ab cf       	rjmp	.-170    	; 0x10f6 <__fp_nan>
    11a0:	11 24       	eor	r1, r1
    11a2:	ee cf       	rjmp	.-36     	; 0x1180 <__fp_szero>

000011a4 <__mulsf3x>:
    11a4:	ca df       	rcall	.-108    	; 0x113a <__fp_split3>
    11a6:	a0 f3       	brcs	.-24     	; 0x1190 <__mulsf3+0x4>

000011a8 <__mulsf3_pse>:
    11a8:	95 9f       	mul	r25, r21
    11aa:	d1 f3       	breq	.-12     	; 0x11a0 <__mulsf3+0x14>
    11ac:	95 0f       	add	r25, r21
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	55 1f       	adc	r21, r21
    11b2:	62 9f       	mul	r22, r18
    11b4:	f0 01       	movw	r30, r0
    11b6:	72 9f       	mul	r23, r18
    11b8:	bb 27       	eor	r27, r27
    11ba:	f0 0d       	add	r31, r0
    11bc:	b1 1d       	adc	r27, r1
    11be:	63 9f       	mul	r22, r19
    11c0:	aa 27       	eor	r26, r26
    11c2:	f0 0d       	add	r31, r0
    11c4:	b1 1d       	adc	r27, r1
    11c6:	aa 1f       	adc	r26, r26
    11c8:	64 9f       	mul	r22, r20
    11ca:	66 27       	eor	r22, r22
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	66 1f       	adc	r22, r22
    11d2:	82 9f       	mul	r24, r18
    11d4:	22 27       	eor	r18, r18
    11d6:	b0 0d       	add	r27, r0
    11d8:	a1 1d       	adc	r26, r1
    11da:	62 1f       	adc	r22, r18
    11dc:	73 9f       	mul	r23, r19
    11de:	b0 0d       	add	r27, r0
    11e0:	a1 1d       	adc	r26, r1
    11e2:	62 1f       	adc	r22, r18
    11e4:	83 9f       	mul	r24, r19
    11e6:	a0 0d       	add	r26, r0
    11e8:	61 1d       	adc	r22, r1
    11ea:	22 1f       	adc	r18, r18
    11ec:	74 9f       	mul	r23, r20
    11ee:	33 27       	eor	r19, r19
    11f0:	a0 0d       	add	r26, r0
    11f2:	61 1d       	adc	r22, r1
    11f4:	23 1f       	adc	r18, r19
    11f6:	84 9f       	mul	r24, r20
    11f8:	60 0d       	add	r22, r0
    11fa:	21 1d       	adc	r18, r1
    11fc:	82 2f       	mov	r24, r18
    11fe:	76 2f       	mov	r23, r22
    1200:	6a 2f       	mov	r22, r26
    1202:	11 24       	eor	r1, r1
    1204:	9f 57       	subi	r25, 0x7F	; 127
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	8a f0       	brmi	.+34     	; 0x122c <__mulsf3_pse+0x84>
    120a:	e1 f0       	breq	.+56     	; 0x1244 <__mulsf3_pse+0x9c>
    120c:	88 23       	and	r24, r24
    120e:	4a f0       	brmi	.+18     	; 0x1222 <__mulsf3_pse+0x7a>
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	bb 1f       	adc	r27, r27
    1216:	66 1f       	adc	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	91 50       	subi	r25, 0x01	; 1
    121e:	50 40       	sbci	r21, 0x00	; 0
    1220:	a9 f7       	brne	.-22     	; 0x120c <__mulsf3_pse+0x64>
    1222:	9e 3f       	cpi	r25, 0xFE	; 254
    1224:	51 05       	cpc	r21, r1
    1226:	70 f0       	brcs	.+28     	; 0x1244 <__mulsf3_pse+0x9c>
    1228:	60 cf       	rjmp	.-320    	; 0x10ea <__fp_inf>
    122a:	aa cf       	rjmp	.-172    	; 0x1180 <__fp_szero>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	ec f3       	brlt	.-6      	; 0x122a <__mulsf3_pse+0x82>
    1230:	98 3e       	cpi	r25, 0xE8	; 232
    1232:	dc f3       	brlt	.-10     	; 0x122a <__mulsf3_pse+0x82>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b7 95       	ror	r27
    123c:	f7 95       	ror	r31
    123e:	e7 95       	ror	r30
    1240:	9f 5f       	subi	r25, 0xFF	; 255
    1242:	c1 f7       	brne	.-16     	; 0x1234 <__mulsf3_pse+0x8c>
    1244:	fe 2b       	or	r31, r30
    1246:	88 0f       	add	r24, r24
    1248:	91 1d       	adc	r25, r1
    124a:	96 95       	lsr	r25
    124c:	87 95       	ror	r24
    124e:	97 f9       	bld	r25, 7
    1250:	08 95       	ret

00001252 <pow>:
    1252:	fa 01       	movw	r30, r20
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	30 96       	adiw	r30, 0x00	; 0
    125a:	21 05       	cpc	r18, r1
    125c:	31 05       	cpc	r19, r1
    125e:	99 f1       	breq	.+102    	; 0x12c6 <pow+0x74>
    1260:	61 15       	cp	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	61 f4       	brne	.+24     	; 0x127e <pow+0x2c>
    1266:	80 38       	cpi	r24, 0x80	; 128
    1268:	bf e3       	ldi	r27, 0x3F	; 63
    126a:	9b 07       	cpc	r25, r27
    126c:	49 f1       	breq	.+82     	; 0x12c0 <pow+0x6e>
    126e:	68 94       	set
    1270:	90 38       	cpi	r25, 0x80	; 128
    1272:	81 05       	cpc	r24, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <pow+0x3c>
    1276:	80 38       	cpi	r24, 0x80	; 128
    1278:	bf ef       	ldi	r27, 0xFF	; 255
    127a:	9b 07       	cpc	r25, r27
    127c:	41 f0       	breq	.+16     	; 0x128e <pow+0x3c>
    127e:	99 23       	and	r25, r25
    1280:	42 f5       	brpl	.+80     	; 0x12d2 <pow+0x80>
    1282:	ff 3f       	cpi	r31, 0xFF	; 255
    1284:	e1 05       	cpc	r30, r1
    1286:	31 05       	cpc	r19, r1
    1288:	21 05       	cpc	r18, r1
    128a:	11 f1       	breq	.+68     	; 0x12d0 <pow+0x7e>
    128c:	e8 94       	clt
    128e:	08 94       	sec
    1290:	e7 95       	ror	r30
    1292:	d9 01       	movw	r26, r18
    1294:	aa 23       	and	r26, r26
    1296:	29 f4       	brne	.+10     	; 0x12a2 <pow+0x50>
    1298:	ab 2f       	mov	r26, r27
    129a:	be 2f       	mov	r27, r30
    129c:	f8 5f       	subi	r31, 0xF8	; 248
    129e:	d0 f3       	brcs	.-12     	; 0x1294 <pow+0x42>
    12a0:	10 c0       	rjmp	.+32     	; 0x12c2 <pow+0x70>
    12a2:	ff 5f       	subi	r31, 0xFF	; 255
    12a4:	70 f4       	brcc	.+28     	; 0x12c2 <pow+0x70>
    12a6:	a6 95       	lsr	r26
    12a8:	e0 f7       	brcc	.-8      	; 0x12a2 <pow+0x50>
    12aa:	f7 39       	cpi	r31, 0x97	; 151
    12ac:	50 f0       	brcs	.+20     	; 0x12c2 <pow+0x70>
    12ae:	19 f0       	breq	.+6      	; 0x12b6 <pow+0x64>
    12b0:	ff 3a       	cpi	r31, 0xAF	; 175
    12b2:	38 f4       	brcc	.+14     	; 0x12c2 <pow+0x70>
    12b4:	9f 77       	andi	r25, 0x7F	; 127
    12b6:	9f 93       	push	r25
    12b8:	0c d0       	rcall	.+24     	; 0x12d2 <pow+0x80>
    12ba:	0f 90       	pop	r0
    12bc:	07 fc       	sbrc	r0, 7
    12be:	90 58       	subi	r25, 0x80	; 128
    12c0:	08 95       	ret
    12c2:	3e f0       	brts	.+14     	; 0x12d2 <pow+0x80>
    12c4:	18 cf       	rjmp	.-464    	; 0x10f6 <__fp_nan>
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	80 e8       	ldi	r24, 0x80	; 128
    12cc:	9f e3       	ldi	r25, 0x3F	; 63
    12ce:	08 95       	ret
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	9f 77       	andi	r25, 0x7F	; 127
    12d4:	5f 93       	push	r21
    12d6:	4f 93       	push	r20
    12d8:	3f 93       	push	r19
    12da:	2f 93       	push	r18
    12dc:	9e d0       	rcall	.+316    	; 0x141a <log>
    12de:	2f 91       	pop	r18
    12e0:	3f 91       	pop	r19
    12e2:	4f 91       	pop	r20
    12e4:	5f 91       	pop	r21
    12e6:	52 df       	rcall	.-348    	; 0x118c <__mulsf3>
    12e8:	05 c0       	rjmp	.+10     	; 0x12f4 <exp>
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <pow+0xa0>
    12ec:	0e f0       	brts	.+2      	; 0x12f0 <pow+0x9e>
    12ee:	fd ce       	rjmp	.-518    	; 0x10ea <__fp_inf>
    12f0:	46 cf       	rjmp	.-372    	; 0x117e <__fp_zero>
    12f2:	01 cf       	rjmp	.-510    	; 0x10f6 <__fp_nan>

000012f4 <exp>:
    12f4:	2a df       	rcall	.-428    	; 0x114a <__fp_splitA>
    12f6:	c8 f3       	brcs	.-14     	; 0x12ea <pow+0x98>
    12f8:	96 38       	cpi	r25, 0x86	; 134
    12fa:	c0 f7       	brcc	.-16     	; 0x12ec <pow+0x9a>
    12fc:	07 f8       	bld	r0, 7
    12fe:	0f 92       	push	r0
    1300:	e8 94       	clt
    1302:	2b e3       	ldi	r18, 0x3B	; 59
    1304:	3a ea       	ldi	r19, 0xAA	; 170
    1306:	48 eb       	ldi	r20, 0xB8	; 184
    1308:	5f e7       	ldi	r21, 0x7F	; 127
    130a:	4e df       	rcall	.-356    	; 0x11a8 <__mulsf3_pse>
    130c:	0f 92       	push	r0
    130e:	0f 92       	push	r0
    1310:	0f 92       	push	r0
    1312:	4d b7       	in	r20, 0x3d	; 61
    1314:	5e b7       	in	r21, 0x3e	; 62
    1316:	0f 92       	push	r0
    1318:	c0 d0       	rcall	.+384    	; 0x149a <modf>
    131a:	ee e2       	ldi	r30, 0x2E	; 46
    131c:	f1 e0       	ldi	r31, 0x01	; 1
    131e:	16 d0       	rcall	.+44     	; 0x134c <__fp_powser>
    1320:	4f 91       	pop	r20
    1322:	5f 91       	pop	r21
    1324:	ef 91       	pop	r30
    1326:	ff 91       	pop	r31
    1328:	e5 95       	asr	r30
    132a:	ee 1f       	adc	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	49 f0       	breq	.+18     	; 0x1342 <exp+0x4e>
    1330:	fe 57       	subi	r31, 0x7E	; 126
    1332:	e0 68       	ori	r30, 0x80	; 128
    1334:	44 27       	eor	r20, r20
    1336:	ee 0f       	add	r30, r30
    1338:	44 1f       	adc	r20, r20
    133a:	fa 95       	dec	r31
    133c:	e1 f7       	brne	.-8      	; 0x1336 <exp+0x42>
    133e:	41 95       	neg	r20
    1340:	55 0b       	sbc	r21, r21
    1342:	32 d0       	rcall	.+100    	; 0x13a8 <ldexp>
    1344:	0f 90       	pop	r0
    1346:	07 fe       	sbrs	r0, 7
    1348:	26 c0       	rjmp	.+76     	; 0x1396 <inverse>
    134a:	08 95       	ret

0000134c <__fp_powser>:
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	1f 93       	push	r17
    1352:	0f 93       	push	r16
    1354:	ff 92       	push	r15
    1356:	ef 92       	push	r14
    1358:	df 92       	push	r13
    135a:	7b 01       	movw	r14, r22
    135c:	8c 01       	movw	r16, r24
    135e:	68 94       	set
    1360:	05 c0       	rjmp	.+10     	; 0x136c <__fp_powser+0x20>
    1362:	da 2e       	mov	r13, r26
    1364:	ef 01       	movw	r28, r30
    1366:	1e df       	rcall	.-452    	; 0x11a4 <__mulsf3x>
    1368:	fe 01       	movw	r30, r28
    136a:	e8 94       	clt
    136c:	a5 91       	lpm	r26, Z+
    136e:	25 91       	lpm	r18, Z+
    1370:	35 91       	lpm	r19, Z+
    1372:	45 91       	lpm	r20, Z+
    1374:	55 91       	lpm	r21, Z+
    1376:	ae f3       	brts	.-22     	; 0x1362 <__fp_powser+0x16>
    1378:	ef 01       	movw	r28, r30
    137a:	97 dd       	rcall	.-1234   	; 0xeaa <__addsf3x>
    137c:	fe 01       	movw	r30, r28
    137e:	97 01       	movw	r18, r14
    1380:	a8 01       	movw	r20, r16
    1382:	da 94       	dec	r13
    1384:	79 f7       	brne	.-34     	; 0x1364 <__fp_powser+0x18>
    1386:	df 90       	pop	r13
    1388:	ef 90       	pop	r14
    138a:	ff 90       	pop	r15
    138c:	0f 91       	pop	r16
    138e:	1f 91       	pop	r17
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <inverse>:
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	80 e8       	ldi	r24, 0x80	; 128
    13a0:	9f e3       	ldi	r25, 0x3F	; 63
    13a2:	da cd       	rjmp	.-1100   	; 0xf58 <__divsf3>
    13a4:	a2 ce       	rjmp	.-700    	; 0x10ea <__fp_inf>
    13a6:	ac c0       	rjmp	.+344    	; 0x1500 <__fp_mpack>

000013a8 <ldexp>:
    13a8:	d0 de       	rcall	.-608    	; 0x114a <__fp_splitA>
    13aa:	e8 f3       	brcs	.-6      	; 0x13a6 <inverse+0x10>
    13ac:	99 23       	and	r25, r25
    13ae:	d9 f3       	breq	.-10     	; 0x13a6 <inverse+0x10>
    13b0:	94 0f       	add	r25, r20
    13b2:	51 1d       	adc	r21, r1
    13b4:	bb f3       	brvs	.-18     	; 0x13a4 <inverse+0xe>
    13b6:	91 50       	subi	r25, 0x01	; 1
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	94 f0       	brlt	.+36     	; 0x13e0 <ldexp+0x38>
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <ldexp+0x2c>
    13be:	88 23       	and	r24, r24
    13c0:	32 f0       	brmi	.+12     	; 0x13ce <ldexp+0x26>
    13c2:	66 0f       	add	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	88 1f       	adc	r24, r24
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	50 40       	sbci	r21, 0x00	; 0
    13cc:	c1 f7       	brne	.-16     	; 0x13be <ldexp+0x16>
    13ce:	9e 3f       	cpi	r25, 0xFE	; 254
    13d0:	51 05       	cpc	r21, r1
    13d2:	44 f7       	brge	.-48     	; 0x13a4 <inverse+0xe>
    13d4:	88 0f       	add	r24, r24
    13d6:	91 1d       	adc	r25, r1
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	97 f9       	bld	r25, 7
    13de:	08 95       	ret
    13e0:	5f 3f       	cpi	r21, 0xFF	; 255
    13e2:	ac f0       	brlt	.+42     	; 0x140e <ldexp+0x66>
    13e4:	98 3e       	cpi	r25, 0xE8	; 232
    13e6:	9c f0       	brlt	.+38     	; 0x140e <ldexp+0x66>
    13e8:	bb 27       	eor	r27, r27
    13ea:	86 95       	lsr	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	b7 95       	ror	r27
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <ldexp+0x4e>
    13f4:	b1 60       	ori	r27, 0x01	; 1
    13f6:	93 95       	inc	r25
    13f8:	c1 f7       	brne	.-16     	; 0x13ea <ldexp+0x42>
    13fa:	bb 0f       	add	r27, r27
    13fc:	58 f7       	brcc	.-42     	; 0x13d4 <ldexp+0x2c>
    13fe:	11 f4       	brne	.+4      	; 0x1404 <ldexp+0x5c>
    1400:	60 ff       	sbrs	r22, 0
    1402:	e8 cf       	rjmp	.-48     	; 0x13d4 <ldexp+0x2c>
    1404:	6f 5f       	subi	r22, 0xFF	; 255
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	e3 cf       	rjmp	.-58     	; 0x13d4 <ldexp+0x2c>
    140e:	b8 ce       	rjmp	.-656    	; 0x1180 <__fp_szero>
    1410:	0e f0       	brts	.+2      	; 0x1414 <ldexp+0x6c>
    1412:	76 c0       	rjmp	.+236    	; 0x1500 <__fp_mpack>
    1414:	70 ce       	rjmp	.-800    	; 0x10f6 <__fp_nan>
    1416:	68 94       	set
    1418:	68 ce       	rjmp	.-816    	; 0x10ea <__fp_inf>

0000141a <log>:
    141a:	97 de       	rcall	.-722    	; 0x114a <__fp_splitA>
    141c:	c8 f3       	brcs	.-14     	; 0x1410 <ldexp+0x68>
    141e:	99 23       	and	r25, r25
    1420:	d1 f3       	breq	.-12     	; 0x1416 <ldexp+0x6e>
    1422:	c6 f3       	brts	.-16     	; 0x1414 <ldexp+0x6c>
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	1f 93       	push	r17
    142a:	0f 93       	push	r16
    142c:	ff 92       	push	r15
    142e:	c9 2f       	mov	r28, r25
    1430:	dd 27       	eor	r29, r29
    1432:	88 23       	and	r24, r24
    1434:	2a f0       	brmi	.+10     	; 0x1440 <log+0x26>
    1436:	21 97       	sbiw	r28, 0x01	; 1
    1438:	66 0f       	add	r22, r22
    143a:	77 1f       	adc	r23, r23
    143c:	88 1f       	adc	r24, r24
    143e:	da f7       	brpl	.-10     	; 0x1436 <log+0x1c>
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e8       	ldi	r20, 0x80	; 128
    1446:	5f eb       	ldi	r21, 0xBF	; 191
    1448:	9f e3       	ldi	r25, 0x3F	; 63
    144a:	88 39       	cpi	r24, 0x98	; 152
    144c:	20 f0       	brcs	.+8      	; 0x1456 <log+0x3c>
    144e:	80 3e       	cpi	r24, 0xE0	; 224
    1450:	30 f0       	brcs	.+12     	; 0x145e <log+0x44>
    1452:	21 96       	adiw	r28, 0x01	; 1
    1454:	8f 77       	andi	r24, 0x7F	; 127
    1456:	18 dd       	rcall	.-1488   	; 0xe88 <__addsf3>
    1458:	e6 e5       	ldi	r30, 0x56	; 86
    145a:	f1 e0       	ldi	r31, 0x01	; 1
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <log+0x4a>
    145e:	14 dd       	rcall	.-1496   	; 0xe88 <__addsf3>
    1460:	e3 e8       	ldi	r30, 0x83	; 131
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	73 df       	rcall	.-282    	; 0x134c <__fp_powser>
    1466:	8b 01       	movw	r16, r22
    1468:	be 01       	movw	r22, r28
    146a:	ec 01       	movw	r28, r24
    146c:	fb 2e       	mov	r15, r27
    146e:	6f 57       	subi	r22, 0x7F	; 127
    1470:	71 09       	sbc	r23, r1
    1472:	75 95       	asr	r23
    1474:	77 1f       	adc	r23, r23
    1476:	88 0b       	sbc	r24, r24
    1478:	99 0b       	sbc	r25, r25
    147a:	d8 dd       	rcall	.-1104   	; 0x102c <__floatsisf>
    147c:	28 e1       	ldi	r18, 0x18	; 24
    147e:	32 e7       	ldi	r19, 0x72	; 114
    1480:	41 e3       	ldi	r20, 0x31	; 49
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	8f de       	rcall	.-738    	; 0x11a4 <__mulsf3x>
    1486:	af 2d       	mov	r26, r15
    1488:	98 01       	movw	r18, r16
    148a:	ae 01       	movw	r20, r28
    148c:	ff 90       	pop	r15
    148e:	0f 91       	pop	r16
    1490:	1f 91       	pop	r17
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	09 dd       	rcall	.-1518   	; 0xeaa <__addsf3x>
    1498:	3f ce       	rjmp	.-898    	; 0x1118 <__fp_round>

0000149a <modf>:
    149a:	fa 01       	movw	r30, r20
    149c:	dc 01       	movw	r26, r24
    149e:	aa 0f       	add	r26, r26
    14a0:	bb 1f       	adc	r27, r27
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	bf 57       	subi	r27, 0x7F	; 127
    14a8:	28 f4       	brcc	.+10     	; 0x14b4 <modf+0x1a>
    14aa:	22 27       	eor	r18, r18
    14ac:	33 27       	eor	r19, r19
    14ae:	44 27       	eor	r20, r20
    14b0:	50 78       	andi	r21, 0x80	; 128
    14b2:	1f c0       	rjmp	.+62     	; 0x14f2 <modf+0x58>
    14b4:	b7 51       	subi	r27, 0x17	; 23
    14b6:	88 f4       	brcc	.+34     	; 0x14da <modf+0x40>
    14b8:	ab 2f       	mov	r26, r27
    14ba:	00 24       	eor	r0, r0
    14bc:	46 95       	lsr	r20
    14be:	37 95       	ror	r19
    14c0:	27 95       	ror	r18
    14c2:	01 1c       	adc	r0, r1
    14c4:	a3 95       	inc	r26
    14c6:	d2 f3       	brmi	.-12     	; 0x14bc <modf+0x22>
    14c8:	00 20       	and	r0, r0
    14ca:	69 f0       	breq	.+26     	; 0x14e6 <modf+0x4c>
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	44 1f       	adc	r20, r20
    14d2:	b3 95       	inc	r27
    14d4:	da f3       	brmi	.-10     	; 0x14cc <modf+0x32>
    14d6:	0d d0       	rcall	.+26     	; 0x14f2 <modf+0x58>
    14d8:	d6 cc       	rjmp	.-1620   	; 0xe86 <__subsf3>
    14da:	61 30       	cpi	r22, 0x01	; 1
    14dc:	71 05       	cpc	r23, r1
    14de:	a0 e8       	ldi	r26, 0x80	; 128
    14e0:	8a 07       	cpc	r24, r26
    14e2:	b9 46       	sbci	r27, 0x69	; 105
    14e4:	30 f4       	brcc	.+12     	; 0x14f2 <modf+0x58>
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	66 27       	eor	r22, r22
    14ec:	77 27       	eor	r23, r23
    14ee:	88 27       	eor	r24, r24
    14f0:	90 78       	andi	r25, 0x80	; 128
    14f2:	30 96       	adiw	r30, 0x00	; 0
    14f4:	21 f0       	breq	.+8      	; 0x14fe <modf+0x64>
    14f6:	20 83       	st	Z, r18
    14f8:	31 83       	std	Z+1, r19	; 0x01
    14fa:	42 83       	std	Z+2, r20	; 0x02
    14fc:	53 83       	std	Z+3, r21	; 0x03
    14fe:	08 95       	ret

00001500 <__fp_mpack>:
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	31 f0       	breq	.+12     	; 0x1510 <__fp_mpack_finite+0xc>

00001504 <__fp_mpack_finite>:
    1504:	91 50       	subi	r25, 0x01	; 1
    1506:	20 f4       	brcc	.+8      	; 0x1510 <__fp_mpack_finite+0xc>
    1508:	87 95       	ror	r24
    150a:	77 95       	ror	r23
    150c:	67 95       	ror	r22
    150e:	b7 95       	ror	r27
    1510:	88 0f       	add	r24, r24
    1512:	91 1d       	adc	r25, r1
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret

0000151c <__tablejump2__>:
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31

00001520 <__tablejump__>:
    1520:	05 90       	lpm	r0, Z+
    1522:	f4 91       	lpm	r31, Z
    1524:	e0 2d       	mov	r30, r0
    1526:	09 94       	ijmp

00001528 <__adddi3_s8>:
    1528:	00 24       	eor	r0, r0
    152a:	a7 fd       	sbrc	r26, 7
    152c:	00 94       	com	r0
    152e:	2a 0f       	add	r18, r26
    1530:	30 1d       	adc	r19, r0
    1532:	40 1d       	adc	r20, r0
    1534:	50 1d       	adc	r21, r0
    1536:	60 1d       	adc	r22, r0
    1538:	70 1d       	adc	r23, r0
    153a:	80 1d       	adc	r24, r0
    153c:	90 1d       	adc	r25, r0
    153e:	08 95       	ret

00001540 <malloc>:
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	10 f4       	brcc	.+4      	; 0x154e <malloc+0xe>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	e0 91 40 01 	lds	r30, 0x0140
    1552:	f0 91 41 01 	lds	r31, 0x0141
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	a0 e0       	ldi	r26, 0x00	; 0
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	30 97       	sbiw	r30, 0x00	; 0
    1560:	39 f1       	breq	.+78     	; 0x15b0 <malloc+0x70>
    1562:	40 81       	ld	r20, Z
    1564:	51 81       	ldd	r21, Z+1	; 0x01
    1566:	48 17       	cp	r20, r24
    1568:	59 07       	cpc	r21, r25
    156a:	b8 f0       	brcs	.+46     	; 0x159a <malloc+0x5a>
    156c:	48 17       	cp	r20, r24
    156e:	59 07       	cpc	r21, r25
    1570:	71 f4       	brne	.+28     	; 0x158e <malloc+0x4e>
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	10 97       	sbiw	r26, 0x00	; 0
    1578:	29 f0       	breq	.+10     	; 0x1584 <malloc+0x44>
    157a:	13 96       	adiw	r26, 0x03	; 3
    157c:	9c 93       	st	X, r25
    157e:	8e 93       	st	-X, r24
    1580:	12 97       	sbiw	r26, 0x02	; 2
    1582:	2c c0       	rjmp	.+88     	; 0x15dc <malloc+0x9c>
    1584:	90 93 41 01 	sts	0x0141, r25
    1588:	80 93 40 01 	sts	0x0140, r24
    158c:	27 c0       	rjmp	.+78     	; 0x15dc <malloc+0x9c>
    158e:	21 15       	cp	r18, r1
    1590:	31 05       	cpc	r19, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <malloc+0x60>
    1594:	42 17       	cp	r20, r18
    1596:	53 07       	cpc	r21, r19
    1598:	18 f0       	brcs	.+6      	; 0x15a0 <malloc+0x60>
    159a:	a9 01       	movw	r20, r18
    159c:	db 01       	movw	r26, r22
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <malloc+0x62>
    15a0:	ef 01       	movw	r28, r30
    15a2:	9a 01       	movw	r18, r20
    15a4:	bd 01       	movw	r22, r26
    15a6:	df 01       	movw	r26, r30
    15a8:	02 80       	ldd	r0, Z+2	; 0x02
    15aa:	f3 81       	ldd	r31, Z+3	; 0x03
    15ac:	e0 2d       	mov	r30, r0
    15ae:	d7 cf       	rjmp	.-82     	; 0x155e <malloc+0x1e>
    15b0:	21 15       	cp	r18, r1
    15b2:	31 05       	cpc	r19, r1
    15b4:	f9 f0       	breq	.+62     	; 0x15f4 <malloc+0xb4>
    15b6:	28 1b       	sub	r18, r24
    15b8:	39 0b       	sbc	r19, r25
    15ba:	24 30       	cpi	r18, 0x04	; 4
    15bc:	31 05       	cpc	r19, r1
    15be:	80 f4       	brcc	.+32     	; 0x15e0 <malloc+0xa0>
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	61 15       	cp	r22, r1
    15c6:	71 05       	cpc	r23, r1
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <malloc+0x92>
    15ca:	fb 01       	movw	r30, r22
    15cc:	93 83       	std	Z+3, r25	; 0x03
    15ce:	82 83       	std	Z+2, r24	; 0x02
    15d0:	04 c0       	rjmp	.+8      	; 0x15da <malloc+0x9a>
    15d2:	90 93 41 01 	sts	0x0141, r25
    15d6:	80 93 40 01 	sts	0x0140, r24
    15da:	fe 01       	movw	r30, r28
    15dc:	32 96       	adiw	r30, 0x02	; 2
    15de:	44 c0       	rjmp	.+136    	; 0x1668 <malloc+0x128>
    15e0:	fe 01       	movw	r30, r28
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	81 93       	st	Z+, r24
    15e8:	91 93       	st	Z+, r25
    15ea:	22 50       	subi	r18, 0x02	; 2
    15ec:	31 09       	sbc	r19, r1
    15ee:	39 83       	std	Y+1, r19	; 0x01
    15f0:	28 83       	st	Y, r18
    15f2:	3a c0       	rjmp	.+116    	; 0x1668 <malloc+0x128>
    15f4:	20 91 3e 01 	lds	r18, 0x013E
    15f8:	30 91 3f 01 	lds	r19, 0x013F
    15fc:	23 2b       	or	r18, r19
    15fe:	41 f4       	brne	.+16     	; 0x1610 <malloc+0xd0>
    1600:	20 91 02 01 	lds	r18, 0x0102
    1604:	30 91 03 01 	lds	r19, 0x0103
    1608:	30 93 3f 01 	sts	0x013F, r19
    160c:	20 93 3e 01 	sts	0x013E, r18
    1610:	20 91 00 01 	lds	r18, 0x0100
    1614:	30 91 01 01 	lds	r19, 0x0101
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	41 f4       	brne	.+16     	; 0x162e <malloc+0xee>
    161e:	2d b7       	in	r18, 0x3d	; 61
    1620:	3e b7       	in	r19, 0x3e	; 62
    1622:	40 91 04 01 	lds	r20, 0x0104
    1626:	50 91 05 01 	lds	r21, 0x0105
    162a:	24 1b       	sub	r18, r20
    162c:	35 0b       	sbc	r19, r21
    162e:	e0 91 3e 01 	lds	r30, 0x013E
    1632:	f0 91 3f 01 	lds	r31, 0x013F
    1636:	e2 17       	cp	r30, r18
    1638:	f3 07       	cpc	r31, r19
    163a:	a0 f4       	brcc	.+40     	; 0x1664 <malloc+0x124>
    163c:	2e 1b       	sub	r18, r30
    163e:	3f 0b       	sbc	r19, r31
    1640:	28 17       	cp	r18, r24
    1642:	39 07       	cpc	r19, r25
    1644:	78 f0       	brcs	.+30     	; 0x1664 <malloc+0x124>
    1646:	ac 01       	movw	r20, r24
    1648:	4e 5f       	subi	r20, 0xFE	; 254
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	24 17       	cp	r18, r20
    164e:	35 07       	cpc	r19, r21
    1650:	48 f0       	brcs	.+18     	; 0x1664 <malloc+0x124>
    1652:	4e 0f       	add	r20, r30
    1654:	5f 1f       	adc	r21, r31
    1656:	50 93 3f 01 	sts	0x013F, r21
    165a:	40 93 3e 01 	sts	0x013E, r20
    165e:	81 93       	st	Z+, r24
    1660:	91 93       	st	Z+, r25
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <malloc+0x128>
    1664:	e0 e0       	ldi	r30, 0x00	; 0
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	cf 01       	movw	r24, r30
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <free>:
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	09 f4       	brne	.+2      	; 0x167a <free+0xa>
    1678:	87 c0       	rjmp	.+270    	; 0x1788 <free+0x118>
    167a:	fc 01       	movw	r30, r24
    167c:	32 97       	sbiw	r30, 0x02	; 2
    167e:	13 82       	std	Z+3, r1	; 0x03
    1680:	12 82       	std	Z+2, r1	; 0x02
    1682:	c0 91 40 01 	lds	r28, 0x0140
    1686:	d0 91 41 01 	lds	r29, 0x0141
    168a:	20 97       	sbiw	r28, 0x00	; 0
    168c:	81 f4       	brne	.+32     	; 0x16ae <free+0x3e>
    168e:	20 81       	ld	r18, Z
    1690:	31 81       	ldd	r19, Z+1	; 0x01
    1692:	28 0f       	add	r18, r24
    1694:	39 1f       	adc	r19, r25
    1696:	80 91 3e 01 	lds	r24, 0x013E
    169a:	90 91 3f 01 	lds	r25, 0x013F
    169e:	82 17       	cp	r24, r18
    16a0:	93 07       	cpc	r25, r19
    16a2:	79 f5       	brne	.+94     	; 0x1702 <free+0x92>
    16a4:	f0 93 3f 01 	sts	0x013F, r31
    16a8:	e0 93 3e 01 	sts	0x013E, r30
    16ac:	6d c0       	rjmp	.+218    	; 0x1788 <free+0x118>
    16ae:	de 01       	movw	r26, r28
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	ae 17       	cp	r26, r30
    16b6:	bf 07       	cpc	r27, r31
    16b8:	50 f4       	brcc	.+20     	; 0x16ce <free+0x5e>
    16ba:	12 96       	adiw	r26, 0x02	; 2
    16bc:	4d 91       	ld	r20, X+
    16be:	5c 91       	ld	r21, X
    16c0:	13 97       	sbiw	r26, 0x03	; 3
    16c2:	9d 01       	movw	r18, r26
    16c4:	41 15       	cp	r20, r1
    16c6:	51 05       	cpc	r21, r1
    16c8:	09 f1       	breq	.+66     	; 0x170c <free+0x9c>
    16ca:	da 01       	movw	r26, r20
    16cc:	f3 cf       	rjmp	.-26     	; 0x16b4 <free+0x44>
    16ce:	b3 83       	std	Z+3, r27	; 0x03
    16d0:	a2 83       	std	Z+2, r26	; 0x02
    16d2:	40 81       	ld	r20, Z
    16d4:	51 81       	ldd	r21, Z+1	; 0x01
    16d6:	84 0f       	add	r24, r20
    16d8:	95 1f       	adc	r25, r21
    16da:	8a 17       	cp	r24, r26
    16dc:	9b 07       	cpc	r25, r27
    16de:	71 f4       	brne	.+28     	; 0x16fc <free+0x8c>
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	11 97       	sbiw	r26, 0x01	; 1
    16e6:	84 0f       	add	r24, r20
    16e8:	95 1f       	adc	r25, r21
    16ea:	02 96       	adiw	r24, 0x02	; 2
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24
    16f0:	12 96       	adiw	r26, 0x02	; 2
    16f2:	8d 91       	ld	r24, X+
    16f4:	9c 91       	ld	r25, X
    16f6:	13 97       	sbiw	r26, 0x03	; 3
    16f8:	93 83       	std	Z+3, r25	; 0x03
    16fa:	82 83       	std	Z+2, r24	; 0x02
    16fc:	21 15       	cp	r18, r1
    16fe:	31 05       	cpc	r19, r1
    1700:	29 f4       	brne	.+10     	; 0x170c <free+0x9c>
    1702:	f0 93 41 01 	sts	0x0141, r31
    1706:	e0 93 40 01 	sts	0x0140, r30
    170a:	3e c0       	rjmp	.+124    	; 0x1788 <free+0x118>
    170c:	d9 01       	movw	r26, r18
    170e:	13 96       	adiw	r26, 0x03	; 3
    1710:	fc 93       	st	X, r31
    1712:	ee 93       	st	-X, r30
    1714:	12 97       	sbiw	r26, 0x02	; 2
    1716:	4d 91       	ld	r20, X+
    1718:	5d 91       	ld	r21, X+
    171a:	a4 0f       	add	r26, r20
    171c:	b5 1f       	adc	r27, r21
    171e:	ea 17       	cp	r30, r26
    1720:	fb 07       	cpc	r31, r27
    1722:	79 f4       	brne	.+30     	; 0x1742 <free+0xd2>
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	84 0f       	add	r24, r20
    172a:	95 1f       	adc	r25, r21
    172c:	02 96       	adiw	r24, 0x02	; 2
    172e:	d9 01       	movw	r26, r18
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	9c 93       	st	X, r25
    1734:	8e 93       	st	-X, r24
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	13 96       	adiw	r26, 0x03	; 3
    173c:	9c 93       	st	X, r25
    173e:	8e 93       	st	-X, r24
    1740:	12 97       	sbiw	r26, 0x02	; 2
    1742:	e0 e0       	ldi	r30, 0x00	; 0
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	19 f0       	breq	.+6      	; 0x1754 <free+0xe4>
    174e:	fe 01       	movw	r30, r28
    1750:	ec 01       	movw	r28, r24
    1752:	f9 cf       	rjmp	.-14     	; 0x1746 <free+0xd6>
    1754:	ce 01       	movw	r24, r28
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	28 81       	ld	r18, Y
    175a:	39 81       	ldd	r19, Y+1	; 0x01
    175c:	82 0f       	add	r24, r18
    175e:	93 1f       	adc	r25, r19
    1760:	20 91 3e 01 	lds	r18, 0x013E
    1764:	30 91 3f 01 	lds	r19, 0x013F
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	69 f4       	brne	.+26     	; 0x1788 <free+0x118>
    176e:	30 97       	sbiw	r30, 0x00	; 0
    1770:	29 f4       	brne	.+10     	; 0x177c <free+0x10c>
    1772:	10 92 41 01 	sts	0x0141, r1
    1776:	10 92 40 01 	sts	0x0140, r1
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <free+0x110>
    177c:	13 82       	std	Z+3, r1	; 0x03
    177e:	12 82       	std	Z+2, r1	; 0x02
    1780:	d0 93 3f 01 	sts	0x013F, r29
    1784:	c0 93 3e 01 	sts	0x013E, r28
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <_exit>:
    178e:	f8 94       	cli

00001790 <__stop_program>:
    1790:	ff cf       	rjmp	.-2      	; 0x1790 <__stop_program>
