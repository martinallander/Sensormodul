
Sensor_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001c26  00001cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800108  00800108  00001cc2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001cc2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00001cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023d4  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091d  00000000  00000000  000042ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000115f  00000000  00000000  00004bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  00005d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000682  00000000  00000000  000063fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bb5  00000000  00000000  00006a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00008633  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d7 c0       	rjmp	.+430    	; 0x1b0 <__ctors_end>
       2:	00 00       	nop
       4:	f3 c0       	rjmp	.+486    	; 0x1ec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c0       	rjmp	.+482    	; 0x1ec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c0       	rjmp	.+478    	; 0x1ec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c0       	rjmp	.+474    	; 0x1ec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c0       	rjmp	.+470    	; 0x1ec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c0       	rjmp	.+466    	; 0x1ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c0       	rjmp	.+462    	; 0x1ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c0       	rjmp	.+458    	; 0x1ec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c0       	rjmp	.+454    	; 0x1ec <__bad_interrupt>
      26:	00 00       	nop
      28:	e1 c0       	rjmp	.+450    	; 0x1ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	df c0       	rjmp	.+446    	; 0x1ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	dd c0       	rjmp	.+442    	; 0x1ec <__bad_interrupt>
      32:	00 00       	nop
      34:	db c0       	rjmp	.+438    	; 0x1ec <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c0       	rjmp	.+434    	; 0x1ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c7       	rjmp	.+3910   	; 0xf84 <__vector_15>
      3e:	00 00       	nop
      40:	d5 c0       	rjmp	.+426    	; 0x1ec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c0       	rjmp	.+422    	; 0x1ec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c0       	rjmp	.+418    	; 0x1ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c6       	rjmp	.+3582   	; 0xe4c <__vector_19>
      4e:	00 00       	nop
      50:	cd c0       	rjmp	.+410    	; 0x1ec <__bad_interrupt>
      52:	00 00       	nop
      54:	cb c0       	rjmp	.+406    	; 0x1ec <__bad_interrupt>
      56:	00 00       	nop
      58:	c9 c0       	rjmp	.+402    	; 0x1ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c0       	rjmp	.+398    	; 0x1ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	2d c7       	rjmp	.+3674   	; 0xebc <__vector_24>
      62:	00 00       	nop
      64:	c3 c0       	rjmp	.+390    	; 0x1ec <__bad_interrupt>
      66:	00 00       	nop
      68:	d8 c0       	rjmp	.+432    	; 0x21a <__vector_26>
      6a:	00 00       	nop
      6c:	bf c0       	rjmp	.+382    	; 0x1ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	bd c0       	rjmp	.+378    	; 0x1ec <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c0       	rjmp	.+374    	; 0x1ec <__bad_interrupt>
      76:	00 00       	nop
      78:	b9 c0       	rjmp	.+370    	; 0x1ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c0       	rjmp	.+366    	; 0x1ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c0       	rjmp	.+362    	; 0x1ec <__bad_interrupt>
      82:	00 00       	nop
      84:	b3 c0       	rjmp	.+358    	; 0x1ec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c0       	rjmp	.+354    	; 0x1ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2e 01       	movw	r4, r28
      8e:	77 01       	movw	r14, r14
      90:	77 01       	movw	r14, r14
      92:	77 01       	movw	r14, r14
      94:	77 01       	movw	r14, r14
      96:	77 01       	movw	r14, r14
      98:	77 01       	movw	r14, r14
      9a:	77 01       	movw	r14, r14
      9c:	36 01       	movw	r6, r12
      9e:	77 01       	movw	r14, r14
      a0:	77 01       	movw	r14, r14
      a2:	77 01       	movw	r14, r14
      a4:	77 01       	movw	r14, r14
      a6:	77 01       	movw	r14, r14
      a8:	77 01       	movw	r14, r14
      aa:	77 01       	movw	r14, r14
      ac:	3f 01       	movw	r6, r30
      ae:	77 01       	movw	r14, r14
      b0:	77 01       	movw	r14, r14
      b2:	77 01       	movw	r14, r14
      b4:	77 01       	movw	r14, r14
      b6:	77 01       	movw	r14, r14
      b8:	77 01       	movw	r14, r14
      ba:	77 01       	movw	r14, r14
      bc:	47 01       	movw	r8, r14
      be:	77 01       	movw	r14, r14
      c0:	77 01       	movw	r14, r14
      c2:	77 01       	movw	r14, r14
      c4:	77 01       	movw	r14, r14
      c6:	77 01       	movw	r14, r14
      c8:	77 01       	movw	r14, r14
      ca:	77 01       	movw	r14, r14
      cc:	49 01       	movw	r8, r18
      ce:	77 01       	movw	r14, r14
      d0:	77 01       	movw	r14, r14
      d2:	77 01       	movw	r14, r14
      d4:	77 01       	movw	r14, r14
      d6:	77 01       	movw	r14, r14
      d8:	77 01       	movw	r14, r14
      da:	77 01       	movw	r14, r14
      dc:	77 01       	movw	r14, r14
      de:	77 01       	movw	r14, r14
      e0:	77 01       	movw	r14, r14
      e2:	77 01       	movw	r14, r14
      e4:	77 01       	movw	r14, r14
      e6:	77 01       	movw	r14, r14
      e8:	77 01       	movw	r14, r14
      ea:	77 01       	movw	r14, r14
      ec:	77 01       	movw	r14, r14
      ee:	77 01       	movw	r14, r14
      f0:	77 01       	movw	r14, r14
      f2:	77 01       	movw	r14, r14
      f4:	77 01       	movw	r14, r14
      f6:	77 01       	movw	r14, r14
      f8:	77 01       	movw	r14, r14
      fa:	77 01       	movw	r14, r14
      fc:	68 01       	movw	r12, r16
      fe:	77 01       	movw	r14, r14
     100:	77 01       	movw	r14, r14
     102:	77 01       	movw	r14, r14
     104:	77 01       	movw	r14, r14
     106:	77 01       	movw	r14, r14
     108:	77 01       	movw	r14, r14
     10a:	77 01       	movw	r14, r14
     10c:	77 01       	movw	r14, r14
     10e:	77 01       	movw	r14, r14
     110:	77 01       	movw	r14, r14
     112:	77 01       	movw	r14, r14
     114:	77 01       	movw	r14, r14
     116:	77 01       	movw	r14, r14
     118:	77 01       	movw	r14, r14
     11a:	77 01       	movw	r14, r14
     11c:	72 01       	movw	r14, r4
     11e:	77 01       	movw	r14, r14
     120:	77 01       	movw	r14, r14
     122:	77 01       	movw	r14, r14
     124:	77 01       	movw	r14, r14
     126:	77 01       	movw	r14, r14
     128:	77 01       	movw	r14, r14
     12a:	77 01       	movw	r14, r14
     12c:	6c 01       	movw	r12, r24
     12e:	07 63       	ori	r16, 0x37	; 55
     130:	42 36       	cpi	r20, 0x62	; 98
     132:	b7 9b       	sbis	0x16, 7	; 22
     134:	d8 a7       	std	Y+40, r29	; 0x28
     136:	1a 39       	cpi	r17, 0x9A	; 154
     138:	68 56       	subi	r22, 0x68	; 104
     13a:	18 ae       	std	Y+56, r1	; 0x38
     13c:	ba ab       	std	Y+50, r27	; 0x32
     13e:	55 8c       	ldd	r5, Z+29	; 0x1d
     140:	1d 3c       	cpi	r17, 0xCD	; 205
     142:	b7 cc       	rjmp	.-1682   	; 0xfffffab2 <__eeprom_end+0xff7efab2>
     144:	57 63       	ori	r21, 0x37	; 55
     146:	bd 6d       	ori	r27, 0xDD	; 221
     148:	ed fd       	.word	0xfded	; ????
     14a:	75 3e       	cpi	r23, 0xE5	; 229
     14c:	f6 17       	cp	r31, r22
     14e:	72 31       	cpi	r23, 0x12	; 18
     150:	bf 00       	.word	0x00bf	; ????
     152:	00 00       	nop
     154:	80 3f       	cpi	r24, 0xF0	; 240
     156:	08 00       	.word	0x0008	; ????
     158:	00 00       	nop
     15a:	be 92       	st	-X, r11
     15c:	24 49       	sbci	r18, 0x94	; 148
     15e:	12 3e       	cpi	r17, 0xE2	; 226
     160:	ab aa       	std	Y+51, r10	; 0x33
     162:	aa 2a       	or	r10, r26
     164:	be cd       	rjmp	.-1156   	; 0xfffffce2 <__eeprom_end+0xff7efce2>
     166:	cc cc       	rjmp	.-1640   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     168:	4c 3e       	cpi	r20, 0xEC	; 236
     16a:	00 00       	nop
     16c:	00 80       	ld	r0, Z
     16e:	be ab       	std	Y+54, r27	; 0x36
     170:	aa aa       	std	Y+50, r10	; 0x32
     172:	aa 3e       	cpi	r26, 0xEA	; 234
     174:	00 00       	nop
     176:	00 00       	nop
     178:	bf 00       	.word	0x00bf	; ????
     17a:	00 00       	nop
     17c:	80 3f       	cpi	r24, 0xF0	; 240
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	00 08       	sbc	r0, r0
     184:	41 78       	andi	r20, 0x81	; 129
     186:	d3 bb       	out	0x13, r29	; 19
     188:	43 87       	std	Z+11, r20	; 0x0b
     18a:	d1 13       	cpse	r29, r17
     18c:	3d 19       	sub	r19, r13
     18e:	0e 3c       	cpi	r16, 0xCE	; 206
     190:	c3 bd       	out	0x23, r28	; 35
     192:	42 82       	std	Z+2, r4	; 0x02
     194:	ad 2b       	or	r26, r29
     196:	3e 68       	ori	r19, 0x8E	; 142
     198:	ec 82       	std	Y+4, r14	; 0x04
     19a:	76 be       	out	0x36, r7	; 54
     19c:	d9 8f       	std	Y+25, r29	; 0x19
     19e:	e1 a9       	ldd	r30, Z+49	; 0x31
     1a0:	3e 4c       	sbci	r19, 0xCE	; 206
     1a2:	80 ef       	ldi	r24, 0xF0	; 240
     1a4:	ff be       	out	0x3f, r15	; 63
     1a6:	01 c4       	rjmp	.+2050   	; 0x9aa <calibrate_gyro+0xe8>
     1a8:	ff 7f       	andi	r31, 0xFF	; 255
     1aa:	3f 00       	.word	0x003f	; ????
     1ac:	00 00       	nop
	...

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	d0 e4       	ldi	r29, 0x40	; 64
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	e6 e2       	ldi	r30, 0x26	; 38
     1c4:	fc e1       	ldi	r31, 0x1C	; 28
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	0b bf       	out	0x3b, r16	; 59
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x14>
     1cc:	07 90       	elpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	a8 30       	cpi	r26, 0x08	; 8
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x10>

000001d6 <__do_clear_bss>:
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	a8 e0       	ldi	r26, 0x08	; 8
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	a9 34       	cpi	r26, 0x49	; 73
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	b1 d6       	rcall	.+3426   	; 0xf4a <main>
     1e8:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <_exit>

000001ec <__bad_interrupt>:
     1ec:	09 cf       	rjmp	.-494    	; 0x0 <__vectors>

000001ee <i2c_init>:
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     1ee:	10 92 b9 00 	sts	0x00B9, r1
     1f2:	82 e9       	ldi	r24, 0x92	; 146
     1f4:	80 93 b8 00 	sts	0x00B8, r24
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	80 93 bc 00 	sts	0x00BC, r24
     1fe:	08 95       	ret

00000200 <i2c_start>:
     200:	85 ea       	ldi	r24, 0xA5	; 165
     202:	80 93 bc 00 	sts	0x00BC, r24
     206:	10 92 07 01 	sts	0x0107, r1
     20a:	08 95       	ret

0000020c <i2c_stop>:
     20c:	85 e9       	ldi	r24, 0x95	; 149
     20e:	80 93 bc 00 	sts	0x00BC, r24
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 07 01 	sts	0x0107, r24
     218:	08 95       	ret

0000021a <__vector_26>:
}

ISR(TWI_vect)
{
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	0b b6       	in	r0, 0x3b	; 59
     226:	0f 92       	push	r0
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
	uint8_t status = (TWSR & 0xF8);
     240:	80 91 b9 00 	lds	r24, 0x00B9
     244:	88 7f       	andi	r24, 0xF8	; 248
	switch (status)
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	fc 01       	movw	r30, r24
     24a:	38 97       	sbiw	r30, 0x08	; 8
     24c:	e1 35       	cpi	r30, 0x51	; 81
     24e:	f1 05       	cpc	r31, r1
     250:	08 f0       	brcs	.+2      	; 0x254 <__vector_26+0x3a>
     252:	4d c0       	rjmp	.+154    	; 0x2ee <__vector_26+0xd4>
     254:	ea 5b       	subi	r30, 0xBA	; 186
     256:	ff 4f       	sbci	r31, 0xFF	; 255
     258:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__tablejump2__>
	{
		case TW_START:						 //0x08
			i2c_send_data(device_addr + I2C_WRITE);
     25c:	80 91 2d 01 	lds	r24, 0x012D
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     260:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     264:	85 e8       	ldi	r24, 0x85	; 133
     266:	80 93 bc 00 	sts	0x00BC, r24
     26a:	41 c0       	rjmp	.+130    	; 0x2ee <__vector_26+0xd4>
	{
		case TW_START:						 //0x08
			i2c_send_data(device_addr + I2C_WRITE);
			break;
		case TW_REP_START:					 //0x10
			i2c_send_data(device_addr + I2C_READ);
     26c:	80 91 2d 01 	lds	r24, 0x012D
     270:	8f 5f       	subi	r24, 0xFF	; 255
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     272:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     276:	85 e8       	ldi	r24, 0x85	; 133
     278:	80 93 bc 00 	sts	0x00BC, r24
     27c:	38 c0       	rjmp	.+112    	; 0x2ee <__vector_26+0xd4>
			break;
		case TW_REP_START:					 //0x10
			i2c_send_data(device_addr + I2C_READ);
			break;
		case TW_MT_SLA_ACK:					 //3
			i2c_send_data(register_addr);		 //load the register we want to handle
     27e:	80 91 2e 01 	lds	r24, 0x012E
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     282:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     286:	85 e8       	ldi	r24, 0x85	; 133
     288:	80 93 bc 00 	sts	0x00BC, r24
     28c:	30 c0       	rjmp	.+96     	; 0x2ee <__vector_26+0xd4>
			break;
		case TW_MT_SLA_ACK:					 //3
			i2c_send_data(register_addr);		 //load the register we want to handle
			break;
		case TW_MT_SLA_NACK:				 //4
			i2c_stop();	
     28e:	be df       	rcall	.-132    	; 0x20c <i2c_stop>
			break;
     290:	2e c0       	rjmp	.+92     	; 0x2ee <__vector_26+0xd4>
		case TW_MT_DATA_ACK:				 //5
			if(write_to_slave)
     292:	80 91 06 01 	lds	r24, 0x0106
     296:	88 23       	and	r24, r24
     298:	c9 f0       	breq	.+50     	; 0x2cc <__vector_26+0xb2>
			{
				if(n_o_writes == 0)
     29a:	80 91 0a 01 	lds	r24, 0x010A
     29e:	90 91 0b 01 	lds	r25, 0x010B
     2a2:	89 2b       	or	r24, r25
     2a4:	11 f4       	brne	.+4      	; 0x2aa <__vector_26+0x90>
				{
					i2c_stop();
     2a6:	b2 df       	rcall	.-156    	; 0x20c <i2c_stop>
					break;
     2a8:	22 c0       	rjmp	.+68     	; 0x2ee <__vector_26+0xd4>
				}
				else
				{
					i2c_send_data(trans_data);
     2aa:	80 91 30 01 	lds	r24, 0x0130
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     2ae:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     2b2:	85 e8       	ldi	r24, 0x85	; 133
     2b4:	80 93 bc 00 	sts	0x00BC, r24
				}
				else
				{
					i2c_send_data(trans_data);
				}
				n_o_writes = n_o_writes - 1; 
     2b8:	80 91 0a 01 	lds	r24, 0x010A
     2bc:	90 91 0b 01 	lds	r25, 0x010B
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	90 93 0b 01 	sts	0x010B, r25
     2c6:	80 93 0a 01 	sts	0x010A, r24
     2ca:	11 c0       	rjmp	.+34     	; 0x2ee <__vector_26+0xd4>
			}
			else
			{
				i2c_start(); //repeated start
     2cc:	99 df       	rcall	.-206    	; 0x200 <i2c_start>
     2ce:	0f c0       	rjmp	.+30     	; 0x2ee <__vector_26+0xd4>
			}
		
			break;
		case TW_MR_SLA_ACK: //6
			TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWEA)|(1 << TWEN)|(1 << TWIE);
     2d0:	85 e8       	ldi	r24, 0x85	; 133
     2d2:	80 93 bc 00 	sts	0x00BC, r24
			break;
     2d6:	0b c0       	rjmp	.+22     	; 0x2ee <__vector_26+0xd4>
		case TW_MR_DATA_NACK: //7
			rec_data = TWDR;
     2d8:	80 91 bb 00 	lds	r24, 0x00BB
     2dc:	80 93 2f 01 	sts	0x012F, r24
			i2c_stop();
     2e0:	95 df       	rcall	.-214    	; 0x20c <i2c_stop>
			break;
     2e2:	05 c0       	rjmp	.+10     	; 0x2ee <__vector_26+0xd4>
		case TW_MR_DATA_ACK: //8
			rec_data = TWDR;
     2e4:	80 91 bb 00 	lds	r24, 0x00BB
     2e8:	80 93 2f 01 	sts	0x012F, r24
			i2c_stop();
     2ec:	8f df       	rcall	.-226    	; 0x20c <i2c_stop>
			break;
	}
}
     2ee:	ff 91       	pop	r31
     2f0:	ef 91       	pop	r30
     2f2:	bf 91       	pop	r27
     2f4:	af 91       	pop	r26
     2f6:	9f 91       	pop	r25
     2f8:	8f 91       	pop	r24
     2fa:	7f 91       	pop	r23
     2fc:	6f 91       	pop	r22
     2fe:	5f 91       	pop	r21
     300:	4f 91       	pop	r20
     302:	3f 91       	pop	r19
     304:	2f 91       	pop	r18
     306:	0f 90       	pop	r0
     308:	0b be       	out	0x3b, r0	; 59
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <i2c_write_reg>:

void i2c_write_reg(uint8_t device_address, uint8_t reg_addr, uint8_t data, int n)
{
	while(!i2c_done){};
     314:	90 91 07 01 	lds	r25, 0x0107
     318:	99 23       	and	r25, r25
     31a:	e1 f3       	breq	.-8      	; 0x314 <i2c_write_reg>
	n_o_writes = n;
     31c:	30 93 0b 01 	sts	0x010B, r19
     320:	20 93 0a 01 	sts	0x010A, r18
	register_addr = reg_addr;
     324:	60 93 2e 01 	sts	0x012E, r22
	device_addr = device_address;
     328:	80 93 2d 01 	sts	0x012D, r24
	trans_data = data;
     32c:	40 93 30 01 	sts	0x0130, r20
	write_to_slave = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 06 01 	sts	0x0106, r24
	i2c_start();
     336:	64 cf       	rjmp	.-312    	; 0x200 <i2c_start>
     338:	08 95       	ret

0000033a <i2c_read_reg>:
}

uint8_t i2c_read_reg(uint8_t device_address, uint8_t reg_addr, int n)
{
	while(!i2c_done){};
     33a:	90 91 07 01 	lds	r25, 0x0107
     33e:	99 23       	and	r25, r25
     340:	e1 f3       	breq	.-8      	; 0x33a <i2c_read_reg>
	n_o_reads = n;
     342:	50 93 09 01 	sts	0x0109, r21
     346:	40 93 08 01 	sts	0x0108, r20
	register_addr = reg_addr;
     34a:	60 93 2e 01 	sts	0x012E, r22
	device_addr = device_address;
     34e:	80 93 2d 01 	sts	0x012D, r24
	write_to_slave = 0;
     352:	10 92 06 01 	sts	0x0106, r1
	i2c_start();
     356:	54 df       	rcall	.-344    	; 0x200 <i2c_start>
	while(!i2c_done){};
     358:	80 91 07 01 	lds	r24, 0x0107
     35c:	88 23       	and	r24, r24
     35e:	e1 f3       	breq	.-8      	; 0x358 <i2c_read_reg+0x1e>
	return rec_data;
     360:	80 91 2f 01 	lds	r24, 0x012F
}
     364:	08 95       	ret

00000366 <led_blink_red>:
#include "led.h"

void led_blink_red (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	b9 f0       	breq	.+46     	; 0x398 <led_blink_red+0x32>
	{
		PORTB|=(1<<0);
     36a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	39 e6       	ldi	r19, 0x69	; 105
     370:	48 e1       	ldi	r20, 0x18	; 24
     372:	21 50       	subi	r18, 0x01	; 1
     374:	30 40       	sbci	r19, 0x00	; 0
     376:	40 40       	sbci	r20, 0x00	; 0
     378:	e1 f7       	brne	.-8      	; 0x372 <led_blink_red+0xc>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <led_blink_red+0x16>
     37c:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<0);
     37e:	15 b8       	out	0x05, r1	; 5
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	39 e6       	ldi	r19, 0x69	; 105
     384:	48 e1       	ldi	r20, 0x18	; 24
     386:	21 50       	subi	r18, 0x01	; 1
     388:	30 40       	sbci	r19, 0x00	; 0
     38a:	40 40       	sbci	r20, 0x00	; 0
     38c:	e1 f7       	brne	.-8      	; 0x386 <led_blink_red+0x20>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <led_blink_red+0x2a>
     390:	00 00       	nop
#include "led.h"

void led_blink_red (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	49 f7       	brne	.-46     	; 0x36a <led_blink_red+0x4>
     398:	08 95       	ret

0000039a <led_blink_green>:
}

void led_blink_green (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     39a:	00 97       	sbiw	r24, 0x00	; 0
     39c:	b9 f0       	breq	.+46     	; 0x3cc <led_blink_green+0x32>
	{
		PORTB|=(1<<1);
     39e:	29 9a       	sbi	0x05, 1	; 5
     3a0:	2f ef       	ldi	r18, 0xFF	; 255
     3a2:	39 e6       	ldi	r19, 0x69	; 105
     3a4:	48 e1       	ldi	r20, 0x18	; 24
     3a6:	21 50       	subi	r18, 0x01	; 1
     3a8:	30 40       	sbci	r19, 0x00	; 0
     3aa:	40 40       	sbci	r20, 0x00	; 0
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <led_blink_green+0xc>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <led_blink_green+0x16>
     3b0:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<1);
     3b2:	15 b8       	out	0x05, r1	; 5
     3b4:	2f ef       	ldi	r18, 0xFF	; 255
     3b6:	39 e6       	ldi	r19, 0x69	; 105
     3b8:	48 e1       	ldi	r20, 0x18	; 24
     3ba:	21 50       	subi	r18, 0x01	; 1
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <led_blink_green+0x20>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <led_blink_green+0x2a>
     3c4:	00 00       	nop
}

void led_blink_green (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	49 f7       	brne	.-46     	; 0x39e <led_blink_green+0x4>
     3cc:	08 95       	ret

000003ce <led_blink_yellow>:
}

void led_blink_yellow (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	b9 f0       	breq	.+46     	; 0x400 <led_blink_yellow+0x32>
	{
		PORTB|=(1<<2);
     3d2:	2a 9a       	sbi	0x05, 2	; 5
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	39 e6       	ldi	r19, 0x69	; 105
     3d8:	48 e1       	ldi	r20, 0x18	; 24
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	30 40       	sbci	r19, 0x00	; 0
     3de:	40 40       	sbci	r20, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <led_blink_yellow+0xc>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <led_blink_yellow+0x16>
     3e4:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<2);
     3e6:	15 b8       	out	0x05, r1	; 5
     3e8:	2f ef       	ldi	r18, 0xFF	; 255
     3ea:	39 e6       	ldi	r19, 0x69	; 105
     3ec:	48 e1       	ldi	r20, 0x18	; 24
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	30 40       	sbci	r19, 0x00	; 0
     3f2:	40 40       	sbci	r20, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <led_blink_yellow+0x20>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <led_blink_yellow+0x2a>
     3f8:	00 00       	nop
}

void led_blink_yellow (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	49 f7       	brne	.-46     	; 0x3d2 <led_blink_yellow+0x4>
     400:	08 95       	ret

00000402 <create_empty_sensor>:
﻿#include "sensor_data.h"

Sensor_Data* sd;

Sensor_Data* create_empty_sensor(bool data)
{
     402:	cf 93       	push	r28
     404:	c8 2f       	mov	r28, r24
	Sensor_Data sd;
	Sensor_Data* sd_p = malloc(sizeof(sd));
     406:	8d e2       	ldi	r24, 0x2D	; 45
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <malloc>
     40e:	fc 01       	movw	r30, r24
	sd_p->acc[0] = 0;
     410:	10 82       	st	Z, r1
     412:	11 82       	std	Z+1, r1	; 0x01
     414:	12 82       	std	Z+2, r1	; 0x02
     416:	13 82       	std	Z+3, r1	; 0x03
	sd_p->acc[1] = 0;
     418:	14 82       	std	Z+4, r1	; 0x04
     41a:	15 82       	std	Z+5, r1	; 0x05
     41c:	16 82       	std	Z+6, r1	; 0x06
     41e:	17 82       	std	Z+7, r1	; 0x07
	sd_p->acc[2] = 0;
     420:	10 86       	std	Z+8, r1	; 0x08
     422:	11 86       	std	Z+9, r1	; 0x09
     424:	12 86       	std	Z+10, r1	; 0x0a
     426:	13 86       	std	Z+11, r1	; 0x0b
	sd_p->gyro[0] = 0;
     428:	14 86       	std	Z+12, r1	; 0x0c
     42a:	15 86       	std	Z+13, r1	; 0x0d
     42c:	16 86       	std	Z+14, r1	; 0x0e
     42e:	17 86       	std	Z+15, r1	; 0x0f
	sd_p->gyro[1] = 0;
     430:	10 8a       	std	Z+16, r1	; 0x10
     432:	11 8a       	std	Z+17, r1	; 0x11
     434:	12 8a       	std	Z+18, r1	; 0x12
     436:	13 8a       	std	Z+19, r1	; 0x13
	sd_p->gyro[2] = 0;
     438:	14 8a       	std	Z+20, r1	; 0x14
     43a:	15 8a       	std	Z+21, r1	; 0x15
     43c:	16 8a       	std	Z+22, r1	; 0x16
     43e:	17 8a       	std	Z+23, r1	; 0x17
	sd_p->angle[0] = 0;
     440:	10 8e       	std	Z+24, r1	; 0x18
     442:	11 8e       	std	Z+25, r1	; 0x19
     444:	12 8e       	std	Z+26, r1	; 0x1a
     446:	13 8e       	std	Z+27, r1	; 0x1b
	sd_p->angle[1] = 0;
     448:	14 8e       	std	Z+28, r1	; 0x1c
     44a:	15 8e       	std	Z+29, r1	; 0x1d
     44c:	16 8e       	std	Z+30, r1	; 0x1e
     44e:	17 8e       	std	Z+31, r1	; 0x1f
	sd_p->angle[2] = 0;
     450:	10 a2       	std	Z+32, r1	; 0x20
     452:	11 a2       	std	Z+33, r1	; 0x21
     454:	12 a2       	std	Z+34, r1	; 0x22
     456:	13 a2       	std	Z+35, r1	; 0x23
	sd_p->distance = 0;
     458:	14 a2       	std	Z+36, r1	; 0x24
     45a:	15 a2       	std	Z+37, r1	; 0x25
     45c:	16 a2       	std	Z+38, r1	; 0x26
     45e:	17 a2       	std	Z+39, r1	; 0x27
	/*
	sd_p->distance[0] = 0;
	sd_p->distance[1] = 0;
	sd_p->distance[2] = 0;
	*/
	sd_p->has_data = data;
     460:	dc 01       	movw	r26, r24
     462:	a8 5d       	subi	r26, 0xD8	; 216
     464:	be 4f       	sbci	r27, 0xFE	; 254
     466:	cc 93       	st	X, r28
	sd_p->has_ir = data;
     468:	11 96       	adiw	r26, 0x01	; 1
     46a:	cc 93       	st	X, r28
	sd_p->has_angle = data;
     46c:	11 96       	adiw	r26, 0x01	; 1
     46e:	cc 93       	st	X, r28
	sd_p->has_acc = data;
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	cc 93       	st	X, r28
	sd_p->has_distance = data;
     474:	11 96       	adiw	r26, 0x01	; 1
     476:	cc 93       	st	X, r28
	return sd_p;
}
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <init_temp>:
{
	measure_distance();
	_delay_ms(5);
	sd->distance = distance_value;
	return;
}
     47c:	21 e0       	ldi	r18, 0x01	; 1
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	62 e0       	ldi	r22, 0x02	; 2
     484:	82 ed       	ldi	r24, 0xD2	; 210
     486:	46 df       	rcall	.-372    	; 0x314 <i2c_write_reg>
     488:	8f e3       	ldi	r24, 0x3F	; 63
     48a:	9c e9       	ldi	r25, 0x9C	; 156
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <init_temp+0x10>
     490:	00 c0       	rjmp	.+0      	; 0x492 <init_temp+0x16>
     492:	00 00       	nop
     494:	08 95       	ret

00000496 <init_acc>:
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	47 e5       	ldi	r20, 0x57	; 87
     49c:	60 e2       	ldi	r22, 0x20	; 32
     49e:	82 e3       	ldi	r24, 0x32	; 50
     4a0:	39 df       	rcall	.-398    	; 0x314 <i2c_write_reg>
     4a2:	8f e3       	ldi	r24, 0x3F	; 63
     4a4:	9c e9       	ldi	r25, 0x9C	; 156
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <init_acc+0x10>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <init_acc+0x16>
     4ac:	00 00       	nop
     4ae:	08 95       	ret

000004b0 <init_gyro>:
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	4f e0       	ldi	r20, 0x0F	; 15
     4b6:	60 e2       	ldi	r22, 0x20	; 32
     4b8:	86 ed       	ldi	r24, 0xD6	; 214
     4ba:	2c df       	rcall	.-424    	; 0x314 <i2c_write_reg>
     4bc:	8f e3       	ldi	r24, 0x3F	; 63
     4be:	9c e9       	ldi	r25, 0x9C	; 156
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <init_gyro+0x10>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <init_gyro+0x16>
     4c6:	00 00       	nop
     4c8:	08 95       	ret

000004ca <format_acc>:
     4ca:	26 2f       	mov	r18, r22
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	32 2f       	mov	r19, r18
     4d0:	22 27       	eor	r18, r18
     4d2:	28 2b       	or	r18, r24
     4d4:	b9 01       	movw	r22, r18
     4d6:	75 95       	asr	r23
     4d8:	67 95       	ror	r22
     4da:	75 95       	asr	r23
     4dc:	67 95       	ror	r22
     4de:	75 95       	asr	r23
     4e0:	67 95       	ror	r22
     4e2:	75 95       	asr	r23
     4e4:	67 95       	ror	r22
     4e6:	88 27       	eor	r24, r24
     4e8:	77 fd       	sbrc	r23, 7
     4ea:	80 95       	com	r24
     4ec:	98 2f       	mov	r25, r24
     4ee:	7f d7       	rcall	.+3838   	; 0x13ee <__floatsisf>
     4f0:	21 ed       	ldi	r18, 0xD1	; 209
     4f2:	32 e2       	ldi	r19, 0x22	; 34
     4f4:	4d e1       	ldi	r20, 0x1D	; 29
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__mulsf3>
     4fc:	2f e6       	ldi	r18, 0x6F	; 111
     4fe:	32 e1       	ldi	r19, 0x12	; 18
     500:	43 e8       	ldi	r20, 0x83	; 131
     502:	5a e3       	ldi	r21, 0x3A	; 58
     504:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__mulsf3>
     508:	08 95       	ret

0000050a <format_distance>:
     50a:	4f 92       	push	r4
     50c:	5f 92       	push	r5
     50e:	6f 92       	push	r6
     510:	7f 92       	push	r7
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	bc 01       	movw	r22, r24
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	60 d7       	rcall	.+3776   	; 0x13ea <__floatunsisf>
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e8       	ldi	r20, 0x80	; 128
     534:	50 e4       	ldi	r21, 0x40	; 64
     536:	0e 94 48 0b 	call	0x1690	; 0x1690 <pow>
     53a:	4b 01       	movw	r8, r22
     53c:	5c 01       	movw	r10, r24
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e4       	ldi	r20, 0x40	; 64
     544:	50 e4       	ldi	r21, 0x40	; 64
     546:	c7 01       	movw	r24, r14
     548:	b6 01       	movw	r22, r12
     54a:	0e 94 48 0b 	call	0x1690	; 0x1690 <pow>
     54e:	2b 01       	movw	r4, r22
     550:	3c 01       	movw	r6, r24
     552:	26 ea       	ldi	r18, 0xA6	; 166
     554:	34 e8       	ldi	r19, 0x84	; 132
     556:	40 ef       	ldi	r20, 0xF0	; 240
     558:	51 e3       	ldi	r21, 0x31	; 49
     55a:	c5 01       	movw	r24, r10
     55c:	b4 01       	movw	r22, r8
     55e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__mulsf3>
     562:	4b 01       	movw	r8, r22
     564:	5c 01       	movw	r10, r24
     566:	2c ea       	ldi	r18, 0xAC	; 172
     568:	35 ec       	ldi	r19, 0xC5	; 197
     56a:	47 e2       	ldi	r20, 0x27	; 39
     56c:	57 eb       	ldi	r21, 0xB7	; 183
     56e:	c3 01       	movw	r24, r6
     570:	b2 01       	movw	r22, r4
     572:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__mulsf3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	c5 01       	movw	r24, r10
     57c:	b4 01       	movw	r22, r8
     57e:	65 d6       	rcall	.+3274   	; 0x124a <__addsf3>
     580:	4b 01       	movw	r8, r22
     582:	5c 01       	movw	r10, r24
     584:	a7 01       	movw	r20, r14
     586:	96 01       	movw	r18, r12
     588:	c7 01       	movw	r24, r14
     58a:	b6 01       	movw	r22, r12
     58c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__mulsf3>
     590:	24 e3       	ldi	r18, 0x34	; 52
     592:	30 e8       	ldi	r19, 0x80	; 128
     594:	47 eb       	ldi	r20, 0xB7	; 183
     596:	5b e3       	ldi	r21, 0x3B	; 59
     598:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__mulsf3>
     59c:	9b 01       	movw	r18, r22
     59e:	ac 01       	movw	r20, r24
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	52 d6       	rcall	.+3236   	; 0x124a <__addsf3>
     5a6:	4b 01       	movw	r8, r22
     5a8:	5c 01       	movw	r10, r24
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	3c eb       	ldi	r19, 0xBC	; 188
     5ae:	45 eb       	ldi	r20, 0xB5	; 181
     5b0:	5f eb       	ldi	r21, 0xBF	; 191
     5b2:	c7 01       	movw	r24, r14
     5b4:	b6 01       	movw	r22, r12
     5b6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__mulsf3>
     5ba:	9b 01       	movw	r18, r22
     5bc:	ac 01       	movw	r20, r24
     5be:	c5 01       	movw	r24, r10
     5c0:	b4 01       	movw	r22, r8
     5c2:	43 d6       	rcall	.+3206   	; 0x124a <__addsf3>
     5c4:	22 e5       	ldi	r18, 0x52	; 82
     5c6:	38 e3       	ldi	r19, 0x38	; 56
     5c8:	4e e1       	ldi	r20, 0x1E	; 30
     5ca:	53 e4       	ldi	r21, 0x43	; 67
     5cc:	3e d6       	rcall	.+3196   	; 0x124a <__addsf3>
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	bf 90       	pop	r11
     5d8:	af 90       	pop	r10
     5da:	9f 90       	pop	r9
     5dc:	8f 90       	pop	r8
     5de:	7f 90       	pop	r7
     5e0:	6f 90       	pop	r6
     5e2:	5f 90       	pop	r5
     5e4:	4f 90       	pop	r4
     5e6:	08 95       	ret

000005e8 <get_uncalibrated_acc>:
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	af 92       	push	r10
     5ee:	bf 92       	push	r11
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	ec 01       	movw	r28, r24
     600:	41 e0       	ldi	r20, 0x01	; 1
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	68 e2       	ldi	r22, 0x28	; 40
     606:	82 e3       	ldi	r24, 0x32	; 50
     608:	98 de       	rcall	.-720    	; 0x33a <i2c_read_reg>
     60a:	18 2f       	mov	r17, r24
     60c:	8f e9       	ldi	r24, 0x9F	; 159
     60e:	9f e0       	ldi	r25, 0x0F	; 15
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <get_uncalibrated_acc+0x28>
     614:	00 c0       	rjmp	.+0      	; 0x616 <get_uncalibrated_acc+0x2e>
     616:	00 00       	nop
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	69 e2       	ldi	r22, 0x29	; 41
     61e:	82 e3       	ldi	r24, 0x32	; 50
     620:	8c de       	rcall	.-744    	; 0x33a <i2c_read_reg>
     622:	68 2f       	mov	r22, r24
     624:	81 2f       	mov	r24, r17
     626:	51 df       	rcall	.-350    	; 0x4ca <format_acc>
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
     62c:	41 e0       	ldi	r20, 0x01	; 1
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	6a e2       	ldi	r22, 0x2A	; 42
     632:	82 e3       	ldi	r24, 0x32	; 50
     634:	82 de       	rcall	.-764    	; 0x33a <i2c_read_reg>
     636:	18 2f       	mov	r17, r24
     638:	8f e9       	ldi	r24, 0x9F	; 159
     63a:	9f e0       	ldi	r25, 0x0F	; 15
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <get_uncalibrated_acc+0x54>
     640:	00 c0       	rjmp	.+0      	; 0x642 <get_uncalibrated_acc+0x5a>
     642:	00 00       	nop
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	6b e2       	ldi	r22, 0x2B	; 43
     64a:	82 e3       	ldi	r24, 0x32	; 50
     64c:	76 de       	rcall	.-788    	; 0x33a <i2c_read_reg>
     64e:	68 2f       	mov	r22, r24
     650:	81 2f       	mov	r24, r17
     652:	3b df       	rcall	.-394    	; 0x4ca <format_acc>
     654:	6b 01       	movw	r12, r22
     656:	7c 01       	movw	r14, r24
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	6c e2       	ldi	r22, 0x2C	; 44
     65e:	82 e3       	ldi	r24, 0x32	; 50
     660:	6c de       	rcall	.-808    	; 0x33a <i2c_read_reg>
     662:	18 2f       	mov	r17, r24
     664:	8f e9       	ldi	r24, 0x9F	; 159
     666:	9f e0       	ldi	r25, 0x0F	; 15
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <get_uncalibrated_acc+0x80>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <get_uncalibrated_acc+0x86>
     66e:	00 00       	nop
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	6d e2       	ldi	r22, 0x2D	; 45
     676:	82 e3       	ldi	r24, 0x32	; 50
     678:	60 de       	rcall	.-832    	; 0x33a <i2c_read_reg>
     67a:	68 2f       	mov	r22, r24
     67c:	81 2f       	mov	r24, r17
     67e:	25 df       	rcall	.-438    	; 0x4ca <format_acc>
     680:	88 82       	st	Y, r8
     682:	99 82       	std	Y+1, r9	; 0x01
     684:	aa 82       	std	Y+2, r10	; 0x02
     686:	bb 82       	std	Y+3, r11	; 0x03
     688:	cc 82       	std	Y+4, r12	; 0x04
     68a:	dd 82       	std	Y+5, r13	; 0x05
     68c:	ee 82       	std	Y+6, r14	; 0x06
     68e:	ff 82       	std	Y+7, r15	; 0x07
     690:	68 87       	std	Y+8, r22	; 0x08
     692:	79 87       	std	Y+9, r23	; 0x09
     694:	8a 87       	std	Y+10, r24	; 0x0a
     696:	9b 87       	std	Y+11, r25	; 0x0b
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	9f 90       	pop	r9
     6ac:	8f 90       	pop	r8
     6ae:	08 95       	ret

000006b0 <calibrate_acc>:
     6b0:	4f 92       	push	r4
     6b2:	5f 92       	push	r5
     6b4:	6f 92       	push	r6
     6b6:	7f 92       	push	r7
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	97 de       	rcall	.-722    	; 0x402 <create_empty_sensor>
     6d4:	ec 01       	movw	r28, r24
     6d6:	04 e6       	ldi	r16, 0x64	; 100
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	c1 2c       	mov	r12, r1
     6dc:	d1 2c       	mov	r13, r1
     6de:	76 01       	movw	r14, r12
     6e0:	46 01       	movw	r8, r12
     6e2:	57 01       	movw	r10, r14
     6e4:	26 01       	movw	r4, r12
     6e6:	37 01       	movw	r6, r14
     6e8:	ce 01       	movw	r24, r28
     6ea:	7e df       	rcall	.-260    	; 0x5e8 <get_uncalibrated_acc>
     6ec:	28 81       	ld	r18, Y
     6ee:	39 81       	ldd	r19, Y+1	; 0x01
     6f0:	4a 81       	ldd	r20, Y+2	; 0x02
     6f2:	5b 81       	ldd	r21, Y+3	; 0x03
     6f4:	c3 01       	movw	r24, r6
     6f6:	b2 01       	movw	r22, r4
     6f8:	a8 d5       	rcall	.+2896   	; 0x124a <__addsf3>
     6fa:	2b 01       	movw	r4, r22
     6fc:	3c 01       	movw	r6, r24
     6fe:	2c 81       	ldd	r18, Y+4	; 0x04
     700:	3d 81       	ldd	r19, Y+5	; 0x05
     702:	4e 81       	ldd	r20, Y+6	; 0x06
     704:	5f 81       	ldd	r21, Y+7	; 0x07
     706:	c5 01       	movw	r24, r10
     708:	b4 01       	movw	r22, r8
     70a:	9f d5       	rcall	.+2878   	; 0x124a <__addsf3>
     70c:	4b 01       	movw	r8, r22
     70e:	5c 01       	movw	r10, r24
     710:	28 85       	ldd	r18, Y+8	; 0x08
     712:	39 85       	ldd	r19, Y+9	; 0x09
     714:	4a 85       	ldd	r20, Y+10	; 0x0a
     716:	5b 85       	ldd	r21, Y+11	; 0x0b
     718:	c7 01       	movw	r24, r14
     71a:	b6 01       	movw	r22, r12
     71c:	96 d5       	rcall	.+2860   	; 0x124a <__addsf3>
     71e:	6b 01       	movw	r12, r22
     720:	7c 01       	movw	r14, r24
     722:	01 50       	subi	r16, 0x01	; 1
     724:	11 09       	sbc	r17, r1
     726:	01 15       	cp	r16, r1
     728:	11 05       	cpc	r17, r1
     72a:	f1 f6       	brne	.-68     	; 0x6e8 <calibrate_acc+0x38>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	48 ec       	ldi	r20, 0xC8	; 200
     732:	52 e4       	ldi	r21, 0x42	; 66
     734:	c3 01       	movw	r24, r6
     736:	b2 01       	movw	r22, r4
     738:	f0 d5       	rcall	.+3040   	; 0x131a <__divsf3>
     73a:	60 93 1d 01 	sts	0x011D, r22
     73e:	70 93 1e 01 	sts	0x011E, r23
     742:	80 93 1f 01 	sts	0x011F, r24
     746:	90 93 20 01 	sts	0x0120, r25
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	48 ec       	ldi	r20, 0xC8	; 200
     750:	52 e4       	ldi	r21, 0x42	; 66
     752:	c5 01       	movw	r24, r10
     754:	b4 01       	movw	r22, r8
     756:	e1 d5       	rcall	.+3010   	; 0x131a <__divsf3>
     758:	60 93 19 01 	sts	0x0119, r22
     75c:	70 93 1a 01 	sts	0x011A, r23
     760:	80 93 1b 01 	sts	0x011B, r24
     764:	90 93 1c 01 	sts	0x011C, r25
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	48 ec       	ldi	r20, 0xC8	; 200
     76e:	52 e4       	ldi	r21, 0x42	; 66
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	d2 d5       	rcall	.+2980   	; 0x131a <__divsf3>
     776:	60 93 15 01 	sts	0x0115, r22
     77a:	70 93 16 01 	sts	0x0116, r23
     77e:	80 93 17 01 	sts	0x0117, r24
     782:	90 93 18 01 	sts	0x0118, r25
     786:	ce 01       	movw	r24, r28
     788:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <free>
     78c:	8f e3       	ldi	r24, 0x3F	; 63
     78e:	9c e9       	ldi	r25, 0x9C	; 156
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <calibrate_acc+0xe0>
     794:	00 c0       	rjmp	.+0      	; 0x796 <calibrate_acc+0xe6>
     796:	00 00       	nop
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	7f 90       	pop	r7
     7b2:	6f 90       	pop	r6
     7b4:	5f 90       	pop	r5
     7b6:	4f 90       	pop	r4
     7b8:	08 95       	ret

000007ba <get_uncalibrated_gyro>:
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	68 e2       	ldi	r22, 0x28	; 40
     7d2:	86 ed       	ldi	r24, 0xD6	; 214
     7d4:	b2 dd       	rcall	.-1180   	; 0x33a <i2c_read_reg>
     7d6:	d8 2e       	mov	r13, r24
     7d8:	8f e9       	ldi	r24, 0x9F	; 159
     7da:	9f e0       	ldi	r25, 0x0F	; 15
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <get_uncalibrated_gyro+0x22>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <get_uncalibrated_gyro+0x28>
     7e2:	00 00       	nop
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	69 e2       	ldi	r22, 0x29	; 41
     7ea:	86 ed       	ldi	r24, 0xD6	; 214
     7ec:	a6 dd       	rcall	.-1204   	; 0x33a <i2c_read_reg>
     7ee:	c8 2e       	mov	r12, r24
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	6a e2       	ldi	r22, 0x2A	; 42
     7f6:	86 ed       	ldi	r24, 0xD6	; 214
     7f8:	a0 dd       	rcall	.-1216   	; 0x33a <i2c_read_reg>
     7fa:	f8 2e       	mov	r15, r24
     7fc:	8f e9       	ldi	r24, 0x9F	; 159
     7fe:	9f e0       	ldi	r25, 0x0F	; 15
     800:	01 97       	sbiw	r24, 0x01	; 1
     802:	f1 f7       	brne	.-4      	; 0x800 <get_uncalibrated_gyro+0x46>
     804:	00 c0       	rjmp	.+0      	; 0x806 <get_uncalibrated_gyro+0x4c>
     806:	00 00       	nop
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	6b e2       	ldi	r22, 0x2B	; 43
     80e:	86 ed       	ldi	r24, 0xD6	; 214
     810:	94 dd       	rcall	.-1240   	; 0x33a <i2c_read_reg>
     812:	e8 2e       	mov	r14, r24
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	6c e2       	ldi	r22, 0x2C	; 44
     81a:	86 ed       	ldi	r24, 0xD6	; 214
     81c:	8e dd       	rcall	.-1252   	; 0x33a <i2c_read_reg>
     81e:	18 2f       	mov	r17, r24
     820:	8f e9       	ldi	r24, 0x9F	; 159
     822:	9f e0       	ldi	r25, 0x0F	; 15
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <get_uncalibrated_gyro+0x6a>
     828:	00 c0       	rjmp	.+0      	; 0x82a <get_uncalibrated_gyro+0x70>
     82a:	00 00       	nop
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	6d e2       	ldi	r22, 0x2D	; 45
     832:	86 ed       	ldi	r24, 0xD6	; 214
     834:	82 dd       	rcall	.-1276   	; 0x33a <i2c_read_reg>
     836:	08 2f       	mov	r16, r24
     838:	6c 2d       	mov	r22, r12
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	76 2f       	mov	r23, r22
     83e:	66 27       	eor	r22, r22
     840:	6d 0d       	add	r22, r13
     842:	71 1d       	adc	r23, r1
     844:	88 27       	eor	r24, r24
     846:	77 fd       	sbrc	r23, 7
     848:	80 95       	com	r24
     84a:	98 2f       	mov	r25, r24
     84c:	d0 d5       	rcall	.+2976   	; 0x13ee <__floatsisf>
     84e:	29 e2       	ldi	r18, 0x29	; 41
     850:	3c e5       	ldi	r19, 0x5C	; 92
     852:	4f e0       	ldi	r20, 0x0F	; 15
     854:	5c e3       	ldi	r21, 0x3C	; 60
     856:	b9 d6       	rcall	.+3442   	; 0x15ca <__mulsf3>
     858:	6c 87       	std	Y+12, r22	; 0x0c
     85a:	7d 87       	std	Y+13, r23	; 0x0d
     85c:	8e 87       	std	Y+14, r24	; 0x0e
     85e:	9f 87       	std	Y+15, r25	; 0x0f
     860:	6e 2d       	mov	r22, r14
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	76 2f       	mov	r23, r22
     866:	66 27       	eor	r22, r22
     868:	6f 0d       	add	r22, r15
     86a:	71 1d       	adc	r23, r1
     86c:	88 27       	eor	r24, r24
     86e:	77 fd       	sbrc	r23, 7
     870:	80 95       	com	r24
     872:	98 2f       	mov	r25, r24
     874:	bc d5       	rcall	.+2936   	; 0x13ee <__floatsisf>
     876:	29 e2       	ldi	r18, 0x29	; 41
     878:	3c e5       	ldi	r19, 0x5C	; 92
     87a:	4f e0       	ldi	r20, 0x0F	; 15
     87c:	5c e3       	ldi	r21, 0x3C	; 60
     87e:	a5 d6       	rcall	.+3402   	; 0x15ca <__mulsf3>
     880:	68 8b       	std	Y+16, r22	; 0x10
     882:	79 8b       	std	Y+17, r23	; 0x11
     884:	8a 8b       	std	Y+18, r24	; 0x12
     886:	9b 8b       	std	Y+19, r25	; 0x13
     888:	60 2f       	mov	r22, r16
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	76 2f       	mov	r23, r22
     88e:	66 27       	eor	r22, r22
     890:	61 0f       	add	r22, r17
     892:	71 1d       	adc	r23, r1
     894:	88 27       	eor	r24, r24
     896:	77 fd       	sbrc	r23, 7
     898:	80 95       	com	r24
     89a:	98 2f       	mov	r25, r24
     89c:	a8 d5       	rcall	.+2896   	; 0x13ee <__floatsisf>
     89e:	29 e2       	ldi	r18, 0x29	; 41
     8a0:	3c e5       	ldi	r19, 0x5C	; 92
     8a2:	4f e0       	ldi	r20, 0x0F	; 15
     8a4:	5c e3       	ldi	r21, 0x3C	; 60
     8a6:	91 d6       	rcall	.+3362   	; 0x15ca <__mulsf3>
     8a8:	6c 8b       	std	Y+20, r22	; 0x14
     8aa:	7d 8b       	std	Y+21, r23	; 0x15
     8ac:	8e 8b       	std	Y+22, r24	; 0x16
     8ae:	9f 8b       	std	Y+23, r25	; 0x17
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	08 95       	ret

000008c2 <calibrate_gyro>:
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	8f 92       	push	r8
     8cc:	9f 92       	push	r9
     8ce:	af 92       	push	r10
     8d0:	bf 92       	push	r11
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	8e dd       	rcall	.-1252   	; 0x402 <create_empty_sensor>
     8e6:	ec 01       	movw	r28, r24
     8e8:	04 e6       	ldi	r16, 0x64	; 100
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	c1 2c       	mov	r12, r1
     8ee:	d1 2c       	mov	r13, r1
     8f0:	76 01       	movw	r14, r12
     8f2:	46 01       	movw	r8, r12
     8f4:	57 01       	movw	r10, r14
     8f6:	26 01       	movw	r4, r12
     8f8:	37 01       	movw	r6, r14
     8fa:	ce 01       	movw	r24, r28
     8fc:	5e df       	rcall	.-324    	; 0x7ba <get_uncalibrated_gyro>
     8fe:	2c 85       	ldd	r18, Y+12	; 0x0c
     900:	3d 85       	ldd	r19, Y+13	; 0x0d
     902:	4e 85       	ldd	r20, Y+14	; 0x0e
     904:	5f 85       	ldd	r21, Y+15	; 0x0f
     906:	c3 01       	movw	r24, r6
     908:	b2 01       	movw	r22, r4
     90a:	9f d4       	rcall	.+2366   	; 0x124a <__addsf3>
     90c:	2b 01       	movw	r4, r22
     90e:	3c 01       	movw	r6, r24
     910:	28 89       	ldd	r18, Y+16	; 0x10
     912:	39 89       	ldd	r19, Y+17	; 0x11
     914:	4a 89       	ldd	r20, Y+18	; 0x12
     916:	5b 89       	ldd	r21, Y+19	; 0x13
     918:	c5 01       	movw	r24, r10
     91a:	b4 01       	movw	r22, r8
     91c:	96 d4       	rcall	.+2348   	; 0x124a <__addsf3>
     91e:	4b 01       	movw	r8, r22
     920:	5c 01       	movw	r10, r24
     922:	2c 89       	ldd	r18, Y+20	; 0x14
     924:	3d 89       	ldd	r19, Y+21	; 0x15
     926:	4e 89       	ldd	r20, Y+22	; 0x16
     928:	5f 89       	ldd	r21, Y+23	; 0x17
     92a:	c7 01       	movw	r24, r14
     92c:	b6 01       	movw	r22, r12
     92e:	8d d4       	rcall	.+2330   	; 0x124a <__addsf3>
     930:	6b 01       	movw	r12, r22
     932:	7c 01       	movw	r14, r24
     934:	01 50       	subi	r16, 0x01	; 1
     936:	11 09       	sbc	r17, r1
     938:	01 15       	cp	r16, r1
     93a:	11 05       	cpc	r17, r1
     93c:	f1 f6       	brne	.-68     	; 0x8fa <calibrate_gyro+0x38>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	48 ec       	ldi	r20, 0xC8	; 200
     944:	52 e4       	ldi	r21, 0x42	; 66
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	e7 d4       	rcall	.+2510   	; 0x131a <__divsf3>
     94c:	60 93 29 01 	sts	0x0129, r22
     950:	70 93 2a 01 	sts	0x012A, r23
     954:	80 93 2b 01 	sts	0x012B, r24
     958:	90 93 2c 01 	sts	0x012C, r25
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	48 ec       	ldi	r20, 0xC8	; 200
     962:	52 e4       	ldi	r21, 0x42	; 66
     964:	c5 01       	movw	r24, r10
     966:	b4 01       	movw	r22, r8
     968:	d8 d4       	rcall	.+2480   	; 0x131a <__divsf3>
     96a:	60 93 25 01 	sts	0x0125, r22
     96e:	70 93 26 01 	sts	0x0126, r23
     972:	80 93 27 01 	sts	0x0127, r24
     976:	90 93 28 01 	sts	0x0128, r25
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	48 ec       	ldi	r20, 0xC8	; 200
     980:	52 e4       	ldi	r21, 0x42	; 66
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	c9 d4       	rcall	.+2450   	; 0x131a <__divsf3>
     988:	60 93 21 01 	sts	0x0121, r22
     98c:	70 93 22 01 	sts	0x0122, r23
     990:	80 93 23 01 	sts	0x0123, r24
     994:	90 93 24 01 	sts	0x0124, r25
     998:	ce 01       	movw	r24, r28
     99a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <free>
     99e:	8f e3       	ldi	r24, 0x3F	; 63
     9a0:	9c e9       	ldi	r25, 0x9C	; 156
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <calibrate_gyro+0xe0>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <calibrate_gyro+0xe6>
     9a8:	00 00       	nop
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	7f 90       	pop	r7
     9c4:	6f 90       	pop	r6
     9c6:	5f 90       	pop	r5
     9c8:	4f 90       	pop	r4
     9ca:	08 95       	ret

000009cc <init_sensors>:
     9cc:	57 dd       	rcall	.-1362   	; 0x47c <init_temp>
     9ce:	8b e8       	ldi	r24, 0x8B	; 139
     9d0:	80 93 7a 00 	sts	0x007A, r24
     9d4:	60 dd       	rcall	.-1344   	; 0x496 <init_acc>
     9d6:	6c dd       	rcall	.-1320   	; 0x4b0 <init_gyro>
     9d8:	74 df       	rcall	.-280    	; 0x8c2 <calibrate_gyro>
     9da:	6a ce       	rjmp	.-812    	; 0x6b0 <calibrate_acc>
     9dc:	08 95       	ret

000009de <initialize_all>:
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	84 b9       	out	0x04, r24	; 4
     9e2:	15 b8       	out	0x05, r1	; 5
     9e4:	04 dc       	rcall	.-2040   	; 0x1ee <i2c_init>
     9e6:	be d2       	rcall	.+1404   	; 0xf64 <spi_init>
     9e8:	78 94       	sei
     9ea:	f0 df       	rcall	.-32     	; 0x9cc <init_sensors>
     9ec:	c8 d2       	rcall	.+1424   	; 0xf7e <data_direction_init>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	ed dc       	rcall	.-1574   	; 0x3ce <led_blink_yellow>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	d0 dc       	rcall	.-1632   	; 0x39a <led_blink_green>
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	91 e4       	ldi	r25, 0x41	; 65
     a02:	fe c2       	rjmp	.+1532   	; 0x1000 <timer_1_init>
     a04:	08 95       	ret

00000a06 <get_gyro>:
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	68 e2       	ldi	r22, 0x28	; 40
     a1e:	86 ed       	ldi	r24, 0xD6	; 214
     a20:	8c dc       	rcall	.-1768   	; 0x33a <i2c_read_reg>
     a22:	d8 2e       	mov	r13, r24
     a24:	8f e9       	ldi	r24, 0x9F	; 159
     a26:	9f e0       	ldi	r25, 0x0F	; 15
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <get_gyro+0x22>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <get_gyro+0x28>
     a2e:	00 00       	nop
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	69 e2       	ldi	r22, 0x29	; 41
     a36:	86 ed       	ldi	r24, 0xD6	; 214
     a38:	80 dc       	rcall	.-1792   	; 0x33a <i2c_read_reg>
     a3a:	c8 2e       	mov	r12, r24
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	6a e2       	ldi	r22, 0x2A	; 42
     a42:	86 ed       	ldi	r24, 0xD6	; 214
     a44:	7a dc       	rcall	.-1804   	; 0x33a <i2c_read_reg>
     a46:	f8 2e       	mov	r15, r24
     a48:	8f e9       	ldi	r24, 0x9F	; 159
     a4a:	9f e0       	ldi	r25, 0x0F	; 15
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <get_gyro+0x46>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <get_gyro+0x4c>
     a52:	00 00       	nop
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	6b e2       	ldi	r22, 0x2B	; 43
     a5a:	86 ed       	ldi	r24, 0xD6	; 214
     a5c:	6e dc       	rcall	.-1828   	; 0x33a <i2c_read_reg>
     a5e:	e8 2e       	mov	r14, r24
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	6c e2       	ldi	r22, 0x2C	; 44
     a66:	86 ed       	ldi	r24, 0xD6	; 214
     a68:	68 dc       	rcall	.-1840   	; 0x33a <i2c_read_reg>
     a6a:	18 2f       	mov	r17, r24
     a6c:	8f e9       	ldi	r24, 0x9F	; 159
     a6e:	9f e0       	ldi	r25, 0x0F	; 15
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <get_gyro+0x6a>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <get_gyro+0x70>
     a76:	00 00       	nop
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	6d e2       	ldi	r22, 0x2D	; 45
     a7e:	86 ed       	ldi	r24, 0xD6	; 214
     a80:	5c dc       	rcall	.-1864   	; 0x33a <i2c_read_reg>
     a82:	08 2f       	mov	r16, r24
     a84:	6c 2d       	mov	r22, r12
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	76 2f       	mov	r23, r22
     a8a:	66 27       	eor	r22, r22
     a8c:	6d 0d       	add	r22, r13
     a8e:	71 1d       	adc	r23, r1
     a90:	88 27       	eor	r24, r24
     a92:	77 fd       	sbrc	r23, 7
     a94:	80 95       	com	r24
     a96:	98 2f       	mov	r25, r24
     a98:	aa d4       	rcall	.+2388   	; 0x13ee <__floatsisf>
     a9a:	29 e2       	ldi	r18, 0x29	; 41
     a9c:	3c e5       	ldi	r19, 0x5C	; 92
     a9e:	4f e0       	ldi	r20, 0x0F	; 15
     aa0:	5c e3       	ldi	r21, 0x3C	; 60
     aa2:	93 d5       	rcall	.+2854   	; 0x15ca <__mulsf3>
     aa4:	20 91 29 01 	lds	r18, 0x0129
     aa8:	30 91 2a 01 	lds	r19, 0x012A
     aac:	40 91 2b 01 	lds	r20, 0x012B
     ab0:	50 91 2c 01 	lds	r21, 0x012C
     ab4:	c9 d3       	rcall	.+1938   	; 0x1248 <__subsf3>
     ab6:	6c 87       	std	Y+12, r22	; 0x0c
     ab8:	7d 87       	std	Y+13, r23	; 0x0d
     aba:	8e 87       	std	Y+14, r24	; 0x0e
     abc:	9f 87       	std	Y+15, r25	; 0x0f
     abe:	6e 2d       	mov	r22, r14
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	76 2f       	mov	r23, r22
     ac4:	66 27       	eor	r22, r22
     ac6:	6f 0d       	add	r22, r15
     ac8:	71 1d       	adc	r23, r1
     aca:	88 27       	eor	r24, r24
     acc:	77 fd       	sbrc	r23, 7
     ace:	80 95       	com	r24
     ad0:	98 2f       	mov	r25, r24
     ad2:	8d d4       	rcall	.+2330   	; 0x13ee <__floatsisf>
     ad4:	29 e2       	ldi	r18, 0x29	; 41
     ad6:	3c e5       	ldi	r19, 0x5C	; 92
     ad8:	4f e0       	ldi	r20, 0x0F	; 15
     ada:	5c e3       	ldi	r21, 0x3C	; 60
     adc:	76 d5       	rcall	.+2796   	; 0x15ca <__mulsf3>
     ade:	20 91 25 01 	lds	r18, 0x0125
     ae2:	30 91 26 01 	lds	r19, 0x0126
     ae6:	40 91 27 01 	lds	r20, 0x0127
     aea:	50 91 28 01 	lds	r21, 0x0128
     aee:	ac d3       	rcall	.+1880   	; 0x1248 <__subsf3>
     af0:	68 8b       	std	Y+16, r22	; 0x10
     af2:	79 8b       	std	Y+17, r23	; 0x11
     af4:	8a 8b       	std	Y+18, r24	; 0x12
     af6:	9b 8b       	std	Y+19, r25	; 0x13
     af8:	60 2f       	mov	r22, r16
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	76 2f       	mov	r23, r22
     afe:	66 27       	eor	r22, r22
     b00:	61 0f       	add	r22, r17
     b02:	71 1d       	adc	r23, r1
     b04:	88 27       	eor	r24, r24
     b06:	77 fd       	sbrc	r23, 7
     b08:	80 95       	com	r24
     b0a:	98 2f       	mov	r25, r24
     b0c:	70 d4       	rcall	.+2272   	; 0x13ee <__floatsisf>
     b0e:	29 e2       	ldi	r18, 0x29	; 41
     b10:	3c e5       	ldi	r19, 0x5C	; 92
     b12:	4f e0       	ldi	r20, 0x0F	; 15
     b14:	5c e3       	ldi	r21, 0x3C	; 60
     b16:	59 d5       	rcall	.+2738   	; 0x15ca <__mulsf3>
     b18:	20 91 21 01 	lds	r18, 0x0121
     b1c:	30 91 22 01 	lds	r19, 0x0122
     b20:	40 91 23 01 	lds	r20, 0x0123
     b24:	50 91 24 01 	lds	r21, 0x0124
     b28:	8f d3       	rcall	.+1822   	; 0x1248 <__subsf3>
     b2a:	6c 8b       	std	Y+20, r22	; 0x14
     b2c:	7d 8b       	std	Y+21, r23	; 0x15
     b2e:	8e 8b       	std	Y+22, r24	; 0x16
     b30:	9f 8b       	std	Y+23, r25	; 0x17
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <get_angle>:
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
     b52:	59 df       	rcall	.-334    	; 0xa06 <get_gyro>
     b54:	d0 d2       	rcall	.+1440   	; 0x10f6 <timer_1_get_time>
     b56:	20 91 11 01 	lds	r18, 0x0111
     b5a:	30 91 12 01 	lds	r19, 0x0112
     b5e:	40 91 13 01 	lds	r20, 0x0113
     b62:	50 91 14 01 	lds	r21, 0x0114
     b66:	71 d3       	rcall	.+1762   	; 0x124a <__addsf3>
     b68:	6b 01       	movw	r12, r22
     b6a:	7c 01       	movw	r14, r24
     b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     b6e:	3d 85       	ldd	r19, Y+13	; 0x0d
     b70:	4e 85       	ldd	r20, Y+14	; 0x0e
     b72:	5f 85       	ldd	r21, Y+15	; 0x0f
     b74:	2a d5       	rcall	.+2644   	; 0x15ca <__mulsf3>
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e4       	ldi	r20, 0x40	; 64
     b7c:	50 e4       	ldi	r21, 0x40	; 64
     b7e:	25 d5       	rcall	.+2634   	; 0x15ca <__mulsf3>
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	68 8d       	ldd	r22, Y+24	; 0x18
     b86:	79 8d       	ldd	r23, Y+25	; 0x19
     b88:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b8c:	5e d3       	rcall	.+1724   	; 0x124a <__addsf3>
     b8e:	68 8f       	std	Y+24, r22	; 0x18
     b90:	79 8f       	std	Y+25, r23	; 0x19
     b92:	8a 8f       	std	Y+26, r24	; 0x1a
     b94:	9b 8f       	std	Y+27, r25	; 0x1b
     b96:	28 89       	ldd	r18, Y+16	; 0x10
     b98:	39 89       	ldd	r19, Y+17	; 0x11
     b9a:	4a 89       	ldd	r20, Y+18	; 0x12
     b9c:	5b 89       	ldd	r21, Y+19	; 0x13
     b9e:	c7 01       	movw	r24, r14
     ba0:	b6 01       	movw	r22, r12
     ba2:	13 d5       	rcall	.+2598   	; 0x15ca <__mulsf3>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	40 e4       	ldi	r20, 0x40	; 64
     baa:	50 e4       	ldi	r21, 0x40	; 64
     bac:	0e d5       	rcall	.+2588   	; 0x15ca <__mulsf3>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	6c 8d       	ldd	r22, Y+28	; 0x1c
     bb4:	7d 8d       	ldd	r23, Y+29	; 0x1d
     bb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     bb8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     bba:	47 d3       	rcall	.+1678   	; 0x124a <__addsf3>
     bbc:	6c 8f       	std	Y+28, r22	; 0x1c
     bbe:	7d 8f       	std	Y+29, r23	; 0x1d
     bc0:	8e 8f       	std	Y+30, r24	; 0x1e
     bc2:	9f 8f       	std	Y+31, r25	; 0x1f
     bc4:	2c 89       	ldd	r18, Y+20	; 0x14
     bc6:	3d 89       	ldd	r19, Y+21	; 0x15
     bc8:	4e 89       	ldd	r20, Y+22	; 0x16
     bca:	5f 89       	ldd	r21, Y+23	; 0x17
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
     bd0:	fc d4       	rcall	.+2552   	; 0x15ca <__mulsf3>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e4       	ldi	r20, 0x40	; 64
     bd8:	50 e4       	ldi	r21, 0x40	; 64
     bda:	f7 d4       	rcall	.+2542   	; 0x15ca <__mulsf3>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	68 a1       	ldd	r22, Y+32	; 0x20
     be2:	79 a1       	ldd	r23, Y+33	; 0x21
     be4:	8a a1       	ldd	r24, Y+34	; 0x22
     be6:	9b a1       	ldd	r25, Y+35	; 0x23
     be8:	30 d3       	rcall	.+1632   	; 0x124a <__addsf3>
     bea:	68 a3       	std	Y+32, r22	; 0x20
     bec:	79 a3       	std	Y+33, r23	; 0x21
     bee:	8a a3       	std	Y+34, r24	; 0x22
     bf0:	9b a3       	std	Y+35, r25	; 0x23
     bf2:	a7 01       	movw	r20, r14
     bf4:	96 01       	movw	r18, r12
     bf6:	60 91 0d 01 	lds	r22, 0x010D
     bfa:	70 91 0e 01 	lds	r23, 0x010E
     bfe:	80 91 0f 01 	lds	r24, 0x010F
     c02:	90 91 10 01 	lds	r25, 0x0110
     c06:	21 d3       	rcall	.+1602   	; 0x124a <__addsf3>
     c08:	60 93 0d 01 	sts	0x010D, r22
     c0c:	70 93 0e 01 	sts	0x010E, r23
     c10:	80 93 0f 01 	sts	0x010F, r24
     c14:	90 93 10 01 	sts	0x0110, r25
     c18:	10 92 11 01 	sts	0x0111, r1
     c1c:	10 92 12 01 	sts	0x0112, r1
     c20:	10 92 13 01 	sts	0x0113, r1
     c24:	10 92 14 01 	sts	0x0114, r1
     c28:	51 d2       	rcall	.+1186   	; 0x10cc <timer_1_start>
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	08 95       	ret

00000c38 <send_data>:
/******************************************************************
************************** SPI FUNCTIONS **************************
******************************************************************/

void send_data(Sensor_Data* sd)
{
     c38:	cf 92       	push	r12
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	cd 52       	subi	r28, 0x2D	; 45
     c4e:	d1 40       	sbci	r29, 0x01	; 1
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	8c 01       	movw	r16, r24
	unsigned char data = 0;
	data = SPDR;
     c5c:	8e b5       	in	r24, 0x2e	; 46
	switch(data)
     c5e:	83 30       	cpi	r24, 0x03	; 3
     c60:	a9 f1       	breq	.+106    	; 0xccc <send_data+0x94>
     c62:	38 f4       	brcc	.+14     	; 0xc72 <send_data+0x3a>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	09 f4       	brne	.+2      	; 0xc6a <send_data+0x32>
     c68:	c1 c0       	rjmp	.+386    	; 0xdec <send_data+0x1b4>
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	09 f4       	brne	.+2      	; 0xc70 <send_data+0x38>
     c6e:	8d c0       	rjmp	.+282    	; 0xd8a <send_data+0x152>
     c70:	dd c0       	rjmp	.+442    	; 0xe2c <send_data+0x1f4>
     c72:	84 30       	cpi	r24, 0x04	; 4
     c74:	09 f4       	brne	.+2      	; 0xc78 <send_data+0x40>
     c76:	68 c0       	rjmp	.+208    	; 0xd48 <send_data+0x110>
     c78:	85 30       	cpi	r24, 0x05	; 5
     c7a:	09 f0       	breq	.+2      	; 0xc7e <send_data+0x46>
     c7c:	d7 c0       	rjmp	.+430    	; 0xe2c <send_data+0x1f4>
	{
		case IR_DATA_REQUEST :
			if(sd->has_ir)
     c7e:	f8 01       	movw	r30, r16
     c80:	e7 5d       	subi	r30, 0xD7	; 215
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	80 81       	ld	r24, Z
     c86:	88 23       	and	r24, r24
     c88:	09 f4       	brne	.+2      	; 0xc8c <send_data+0x54>
     c8a:	d0 c0       	rjmp	.+416    	; 0xe2c <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     c8c:	81 e1       	ldi	r24, 0x11	; 17
     c8e:	71 d1       	rcall	.+738    	; 0xf72 <spi_tranceiver>
     c90:	d8 01       	movw	r26, r16
     c92:	98 96       	adiw	r26, 0x28	; 40
     c94:	fe 01       	movw	r30, r28
     c96:	31 96       	adiw	r30, 0x01	; 1
     c98:	7e 01       	movw	r14, r28
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	e8 0e       	add	r14, r24
     c9e:	f8 1e       	adc	r15, r24
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
				{
					ir_packet.ir[i] = sd->ir[i];
     ca0:	4d 91       	ld	r20, X+
     ca2:	5d 91       	ld	r21, X+
     ca4:	6d 91       	ld	r22, X+
     ca6:	7d 91       	ld	r23, X+
     ca8:	41 93       	st	Z+, r20
     caa:	51 93       	st	Z+, r21
     cac:	61 93       	st	Z+, r22
     cae:	71 93       	st	Z+, r23
		case IR_DATA_REQUEST :
			if(sd->has_ir)
			{
				spi_tranceiver(SPI_DATA_OK);
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
     cb0:	ee 15       	cp	r30, r14
     cb2:	ff 05       	cpc	r31, r15
     cb4:	a9 f7       	brne	.-22     	; 0xca0 <send_data+0x68>
     cb6:	8e 01       	movw	r16, r28
     cb8:	0f 5f       	subi	r16, 0xFF	; 255
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					ir_packet.ir[i] = sd->ir[i];
				}
				for (int i = 0; i < IR_SIZE; i++)
				{
					spi_tranceiver(ir_packet.packet[i]);
     cbc:	f8 01       	movw	r30, r16
     cbe:	81 91       	ld	r24, Z+
     cc0:	8f 01       	movw	r16, r30
     cc2:	57 d1       	rcall	.+686    	; 0xf72 <spi_tranceiver>
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
				{
					ir_packet.ir[i] = sd->ir[i];
				}
				for (int i = 0; i < IR_SIZE; i++)
     cc4:	e0 16       	cp	r14, r16
     cc6:	f1 06       	cpc	r15, r17
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <send_data+0x84>
     cca:	b0 c0       	rjmp	.+352    	; 0xe2c <send_data+0x1f4>
				}
			}
			break;
		
		case ANGLE_DATA_REQUEST :
			if(sd->has_angle)
     ccc:	f8 01       	movw	r30, r16
     cce:	e6 5d       	subi	r30, 0xD6	; 214
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	80 81       	ld	r24, Z
     cd4:	88 23       	and	r24, r24
     cd6:	09 f4       	brne	.+2      	; 0xcda <send_data+0xa2>
     cd8:	a9 c0       	rjmp	.+338    	; 0xe2c <send_data+0x1f4>
			{
				
				spi_tranceiver(SPI_DATA_OK);
     cda:	81 e1       	ldi	r24, 0x11	; 17
     cdc:	4a d1       	rcall	.+660    	; 0xf72 <spi_tranceiver>
				Angle_packet angle_packet;
				
	
				for(int i = 0; i < 3; i++)
				{
					angle_packet.angle[i] = sd->angle[i];
     cde:	f8 01       	movw	r30, r16
     ce0:	80 8d       	ldd	r24, Z+24	; 0x18
     ce2:	91 8d       	ldd	r25, Z+25	; 0x19
     ce4:	a2 8d       	ldd	r26, Z+26	; 0x1a
     ce6:	b3 8d       	ldd	r27, Z+27	; 0x1b
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	ab 83       	std	Y+3, r26	; 0x03
     cee:	bc 83       	std	Y+4, r27	; 0x04
     cf0:	84 8d       	ldd	r24, Z+28	; 0x1c
     cf2:	95 8d       	ldd	r25, Z+29	; 0x1d
     cf4:	a6 8d       	ldd	r26, Z+30	; 0x1e
     cf6:	b7 8d       	ldd	r27, Z+31	; 0x1f
     cf8:	8d 83       	std	Y+5, r24	; 0x05
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	af 83       	std	Y+7, r26	; 0x07
     cfe:	b8 87       	std	Y+8, r27	; 0x08
     d00:	80 a1       	ldd	r24, Z+32	; 0x20
     d02:	91 a1       	ldd	r25, Z+33	; 0x21
     d04:	a2 a1       	ldd	r26, Z+34	; 0x22
     d06:	b3 a1       	ldd	r27, Z+35	; 0x23
     d08:	89 87       	std	Y+9, r24	; 0x09
     d0a:	9a 87       	std	Y+10, r25	; 0x0a
     d0c:	ab 87       	std	Y+11, r26	; 0x0b
     d0e:	bc 87       	std	Y+12, r27	; 0x0c
     d10:	ce 01       	movw	r24, r28
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	7c 01       	movw	r14, r24
     d16:	6e 01       	movw	r12, r28
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	c9 0e       	add	r12, r25
     d1c:	d1 1c       	adc	r13, r1
				}
				
				for (int i = 0; i < ANGLE_SIZE; i++)
				{
					spi_tranceiver(angle_packet.packet[i]);
     d1e:	f7 01       	movw	r30, r14
     d20:	81 91       	ld	r24, Z+
     d22:	7f 01       	movw	r14, r30
     d24:	26 d1       	rcall	.+588    	; 0xf72 <spi_tranceiver>
				for(int i = 0; i < 3; i++)
				{
					angle_packet.angle[i] = sd->angle[i];
				}
				
				for (int i = 0; i < ANGLE_SIZE; i++)
     d26:	ec 14       	cp	r14, r12
     d28:	fd 04       	cpc	r15, r13
     d2a:	c9 f7       	brne	.-14     	; 0xd1e <send_data+0xe6>
					spi_tranceiver(angle_packet.packet[i]);
				}
				
				for(int i = 0; i < 3; i++)
				{
					sd->angle[i] = 0;
     d2c:	f8 01       	movw	r30, r16
     d2e:	10 8e       	std	Z+24, r1	; 0x18
     d30:	11 8e       	std	Z+25, r1	; 0x19
     d32:	12 8e       	std	Z+26, r1	; 0x1a
     d34:	13 8e       	std	Z+27, r1	; 0x1b
     d36:	14 8e       	std	Z+28, r1	; 0x1c
     d38:	15 8e       	std	Z+29, r1	; 0x1d
     d3a:	16 8e       	std	Z+30, r1	; 0x1e
     d3c:	17 8e       	std	Z+31, r1	; 0x1f
     d3e:	10 a2       	std	Z+32, r1	; 0x20
     d40:	11 a2       	std	Z+33, r1	; 0x21
     d42:	12 a2       	std	Z+34, r1	; 0x22
     d44:	13 a2       	std	Z+35, r1	; 0x23
     d46:	72 c0       	rjmp	.+228    	; 0xe2c <send_data+0x1f4>
			
			}
			break;
		
		case DISTANCE_DATA_REQUEST :
			if(sd->has_distance)
     d48:	f8 01       	movw	r30, r16
     d4a:	e4 5d       	subi	r30, 0xD4	; 212
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	88 23       	and	r24, r24
     d52:	09 f4       	brne	.+2      	; 0xd56 <send_data+0x11e>
     d54:	6b c0       	rjmp	.+214    	; 0xe2c <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     d56:	81 e1       	ldi	r24, 0x11	; 17
     d58:	0c d1       	rcall	.+536    	; 0xf72 <spi_tranceiver>
				Distance_packet distance_packet;
				
				distance_packet.distance = sd->distance;
     d5a:	f8 01       	movw	r30, r16
     d5c:	84 a1       	ldd	r24, Z+36	; 0x24
     d5e:	95 a1       	ldd	r25, Z+37	; 0x25
     d60:	a6 a1       	ldd	r26, Z+38	; 0x26
     d62:	b7 a1       	ldd	r27, Z+39	; 0x27
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	ab 83       	std	Y+3, r26	; 0x03
     d6a:	bc 83       	std	Y+4, r27	; 0x04
     d6c:	8e 01       	movw	r16, r28
     d6e:	0f 5f       	subi	r16, 0xFF	; 255
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	7e 01       	movw	r14, r28
     d74:	f5 e0       	ldi	r31, 0x05	; 5
     d76:	ef 0e       	add	r14, r31
     d78:	f1 1c       	adc	r15, r1
				}
				*/
				
				for (int i = 0; i < DISTANCE_SIZE; i++)
				{
					spi_tranceiver(distance_packet.packet[i]);
     d7a:	f8 01       	movw	r30, r16
     d7c:	81 91       	ld	r24, Z+
     d7e:	8f 01       	movw	r16, r30
     d80:	f8 d0       	rcall	.+496    	; 0xf72 <spi_tranceiver>
				{
					distance_packet.distance[i] = sd->distance[i];
				}
				*/
				
				for (int i = 0; i < DISTANCE_SIZE; i++)
     d82:	0e 15       	cp	r16, r14
     d84:	1f 05       	cpc	r17, r15
     d86:	c9 f7       	brne	.-14     	; 0xd7a <send_data+0x142>
     d88:	51 c0       	rjmp	.+162    	; 0xe2c <send_data+0x1f4>
				}
			}
			break;
		
		case ACC_DATA_REQUEST :
			if(sd->has_acc)
     d8a:	f8 01       	movw	r30, r16
     d8c:	e5 5d       	subi	r30, 0xD5	; 213
     d8e:	fe 4f       	sbci	r31, 0xFE	; 254
     d90:	80 81       	ld	r24, Z
     d92:	88 23       	and	r24, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <send_data+0x160>
     d96:	4a c0       	rjmp	.+148    	; 0xe2c <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     d98:	81 e1       	ldi	r24, 0x11	; 17
     d9a:	eb d0       	rcall	.+470    	; 0xf72 <spi_tranceiver>
				Acc_packet acc_packet;
				
				for(int i = 0; i < 3; i++)
				{
					acc_packet.acc[i] = sd->acc[i];
     d9c:	f8 01       	movw	r30, r16
     d9e:	80 81       	ld	r24, Z
     da0:	91 81       	ldd	r25, Z+1	; 0x01
     da2:	a2 81       	ldd	r26, Z+2	; 0x02
     da4:	b3 81       	ldd	r27, Z+3	; 0x03
     da6:	89 83       	std	Y+1, r24	; 0x01
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	ab 83       	std	Y+3, r26	; 0x03
     dac:	bc 83       	std	Y+4, r27	; 0x04
     dae:	44 81       	ldd	r20, Z+4	; 0x04
     db0:	55 81       	ldd	r21, Z+5	; 0x05
     db2:	66 81       	ldd	r22, Z+6	; 0x06
     db4:	77 81       	ldd	r23, Z+7	; 0x07
     db6:	4d 83       	std	Y+5, r20	; 0x05
     db8:	5e 83       	std	Y+6, r21	; 0x06
     dba:	6f 83       	std	Y+7, r22	; 0x07
     dbc:	78 87       	std	Y+8, r23	; 0x08
     dbe:	80 85       	ldd	r24, Z+8	; 0x08
     dc0:	91 85       	ldd	r25, Z+9	; 0x09
     dc2:	a2 85       	ldd	r26, Z+10	; 0x0a
     dc4:	b3 85       	ldd	r27, Z+11	; 0x0b
     dc6:	89 87       	std	Y+9, r24	; 0x09
     dc8:	9a 87       	std	Y+10, r25	; 0x0a
     dca:	ab 87       	std	Y+11, r26	; 0x0b
     dcc:	bc 87       	std	Y+12, r27	; 0x0c
     dce:	8e 01       	movw	r16, r28
     dd0:	0f 5f       	subi	r16, 0xFF	; 255
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	7e 01       	movw	r14, r28
     dd6:	fd e0       	ldi	r31, 0x0D	; 13
     dd8:	ef 0e       	add	r14, r31
     dda:	f1 1c       	adc	r15, r1
				}
				for (int i = 0; i < ACC_SIZE; i++)
				{
					spi_tranceiver(acc_packet.packet[i]);
     ddc:	f8 01       	movw	r30, r16
     dde:	81 91       	ld	r24, Z+
     de0:	8f 01       	movw	r16, r30
     de2:	c7 d0       	rcall	.+398    	; 0xf72 <spi_tranceiver>
				
				for(int i = 0; i < 3; i++)
				{
					acc_packet.acc[i] = sd->acc[i];
				}
				for (int i = 0; i < ACC_SIZE; i++)
     de4:	0e 15       	cp	r16, r14
     de6:	1f 05       	cpc	r17, r15
     de8:	c9 f7       	brne	.-14     	; 0xddc <send_data+0x1a4>
     dea:	20 c0       	rjmp	.+64     	; 0xe2c <send_data+0x1f4>
				}
			}
			break;
			
		case ALL_DATA_REQUEST :
			if(sd->has_data)
     dec:	f8 01       	movw	r30, r16
     dee:	e8 5d       	subi	r30, 0xD8	; 216
     df0:	fe 4f       	sbci	r31, 0xFE	; 254
     df2:	80 81       	ld	r24, Z
     df4:	88 23       	and	r24, r24
     df6:	d1 f0       	breq	.+52     	; 0xe2c <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     df8:	81 e1       	ldi	r24, 0x11	; 17
     dfa:	bb d0       	rcall	.+374    	; 0xf72 <spi_tranceiver>
				SPI_packet spi_packet;
				spi_packet.sd = *sd;
     dfc:	8d e2       	ldi	r24, 0x2D	; 45
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	f8 01       	movw	r30, r16
     e02:	de 01       	movw	r26, r28
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <send_data+0x1ce>
     e0e:	8e 01       	movw	r16, r28
     e10:	0f 5f       	subi	r16, 0xFF	; 255
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	7e 01       	movw	r14, r28
     e16:	f2 ed       	ldi	r31, 0xD2	; 210
     e18:	ef 1a       	sub	r14, r31
     e1a:	fe ef       	ldi	r31, 0xFE	; 254
     e1c:	ff 0a       	sbc	r15, r31
				for (int i = 0; i < PACKET_SIZE; i++)
				{
					spi_tranceiver(spi_packet.packet[i]);
     e1e:	f8 01       	movw	r30, r16
     e20:	81 91       	ld	r24, Z+
     e22:	8f 01       	movw	r16, r30
     e24:	a6 d0       	rcall	.+332    	; 0xf72 <spi_tranceiver>
			if(sd->has_data)
			{
				spi_tranceiver(SPI_DATA_OK);
				SPI_packet spi_packet;
				spi_packet.sd = *sd;
				for (int i = 0; i < PACKET_SIZE; i++)
     e26:	0e 15       	cp	r16, r14
     e28:	1f 05       	cpc	r17, r15
     e2a:	c9 f7       	brne	.-14     	; 0xe1e <send_data+0x1e6>
		/*default :
			spi_tranceiver(SPI_DATA_ERROR);
			led_blink_yellow(1);
			break;*/
	}
}
     e2c:	c3 5d       	subi	r28, 0xD3	; 211
     e2e:	de 4f       	sbci	r29, 0xFE	; 254
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	df 90       	pop	r13
     e48:	cf 90       	pop	r12
     e4a:	08 95       	ret

00000e4c <__vector_19>:
	EIFR = (1 << INT0);				// Clear flag
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
*/

ISR(SPI_STC_vect)  
{  
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	0b b6       	in	r0, 0x3b	; 59
     e58:	0f 92       	push	r0
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (!(data_sending))
     e72:	80 91 0c 01 	lds	r24, 0x010C
     e76:	81 11       	cpse	r24, r1
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <__vector_19+0x44>
	{
		data_sending = true;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 0c 01 	sts	0x010C, r24
		send_data(current_data);
     e80:	80 91 31 01 	lds	r24, 0x0131
     e84:	90 91 32 01 	lds	r25, 0x0132
     e88:	d7 de       	rcall	.-594    	; 0xc38 <send_data>
		data_sending = false;
     e8a:	10 92 0c 01 	sts	0x010C, r1
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <__vector_19+0x4a>
	}
	else
	{
		led_blink_red(1);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	68 da       	rcall	.-2864   	; 0x366 <led_blink_red>
	}
}
     e96:	ff 91       	pop	r31
     e98:	ef 91       	pop	r30
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	0f 90       	pop	r0
     eb0:	0b be       	out	0x3b, r0	; 59
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_24>:

ISR(ADC_vect)
{
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	0b b6       	in	r0, 0x3b	; 59
     ec8:	0f 92       	push	r0
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	digital_data = (uint16_t)(ADCL | (ADCH << 8));
     ee2:	80 91 78 00 	lds	r24, 0x0078
     ee6:	20 91 79 00 	lds	r18, 0x0079
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	92 2b       	or	r25, r18
     eee:	90 93 34 01 	sts	0x0134, r25
     ef2:	80 93 33 01 	sts	0x0133, r24
	/*********************************************************
						Vid kalibrering:
	*********************************************************/
	//Write_data_to_LCD(digital_data); 
	/*------------------------------------------------------*/
	distance_value = format_distance(digital_data);
     ef6:	80 91 33 01 	lds	r24, 0x0133
     efa:	90 91 34 01 	lds	r25, 0x0134
     efe:	05 db       	rcall	.-2550   	; 0x50a <format_distance>
     f00:	60 93 35 01 	sts	0x0135, r22
     f04:	70 93 36 01 	sts	0x0136, r23
     f08:	80 93 37 01 	sts	0x0137, r24
     f0c:	90 93 38 01 	sts	0x0138, r25
     f10:	8f e9       	ldi	r24, 0x9F	; 159
     f12:	9f e0       	ldi	r25, 0x0F	; 15
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <__vector_24+0x58>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <__vector_24+0x5e>
     f1a:	00 00       	nop
	//Write_data_to_LCD(distance); 
	_delay_ms(1);
	ADCSRA |= (0 << ADEN) | (0 << ADIE);
     f1c:	ea e7       	ldi	r30, 0x7A	; 122
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 83       	st	Z, r24
}
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	0f 90       	pop	r0
     f3e:	0b be       	out	0x3b, r0	; 59
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <main>:

int main(void)
{
	initialize_all();
     f4a:	49 dd       	rcall	.-1390   	; 0x9de <initialize_all>
	current_data = create_empty_sensor(true);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	59 da       	rcall	.-2894   	; 0x402 <create_empty_sensor>
     f50:	90 93 32 01 	sts	0x0132, r25
     f54:	80 93 31 01 	sts	0x0131, r24
	while(1)
	{
		get_angle(current_data);
     f58:	80 91 31 01 	lds	r24, 0x0131
     f5c:	90 91 32 01 	lds	r25, 0x0132
     f60:	f1 dd       	rcall	.-1054   	; 0xb44 <get_angle>
     f62:	fa cf       	rjmp	.-12     	; 0xf58 <main+0xe>

00000f64 <spi_init>:

#include "spi_slave.h"

void spi_init(void)
{
	SPCR |= (1 << SPIE);  
     f64:	8c b5       	in	r24, 0x2c	; 44
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);  //Enable SPI
     f6a:	8c b5       	in	r24, 0x2c	; 44
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	8c bd       	out	0x2c, r24	; 44
     f70:	08 95       	ret

00000f72 <spi_tranceiver>:
}

//Function to send and receive data
unsigned char spi_tranceiver (unsigned char indata)
{	
	SPDR = indata;											//Load data into buffer
     f72:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));							//Wait until transmission complete
     f74:	0d b4       	in	r0, 0x2d	; 45
     f76:	07 fe       	sbrs	r0, 7
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <spi_tranceiver+0x2>
	return SPDR;											//Return received data
     f7a:	8e b5       	in	r24, 0x2e	; 46
}
     f7c:	08 95       	ret

00000f7e <data_direction_init>:

void data_direction_init()
{
	DDRB = (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB6);			//Set PB0, PB1, PB2 and PB6 (MISO) as outputs
     f7e:	87 e4       	ldi	r24, 0x47	; 71
     f80:	84 b9       	out	0x04, r24	; 4
     f82:	08 95       	ret

00000f84 <__vector_15>:

volatile uint64_t overflows;
volatile float prescaler_;

ISR(TIMER1_OVF_vect)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
	//keep track of number of overflows
	overflows++;
     fa0:	20 91 3d 01 	lds	r18, 0x013D
     fa4:	30 91 3e 01 	lds	r19, 0x013E
     fa8:	40 91 3f 01 	lds	r20, 0x013F
     fac:	50 91 40 01 	lds	r21, 0x0140
     fb0:	60 91 41 01 	lds	r22, 0x0141
     fb4:	70 91 42 01 	lds	r23, 0x0142
     fb8:	80 91 43 01 	lds	r24, 0x0143
     fbc:	90 91 44 01 	lds	r25, 0x0144
     fc0:	a1 e0       	ldi	r26, 0x01	; 1
     fc2:	f3 d4       	rcall	.+2534   	; 0x19aa <__adddi3_s8>
     fc4:	20 93 3d 01 	sts	0x013D, r18
     fc8:	30 93 3e 01 	sts	0x013E, r19
     fcc:	40 93 3f 01 	sts	0x013F, r20
     fd0:	50 93 40 01 	sts	0x0140, r21
     fd4:	60 93 41 01 	sts	0x0141, r22
     fd8:	70 93 42 01 	sts	0x0142, r23
     fdc:	80 93 43 01 	sts	0x0143, r24
     fe0:	90 93 44 01 	sts	0x0144, r25
}
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <timer_1_init>:

void timer_1_init(float prescaler)
{
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
	//normal mode
	TCCR1A |= (0 << WGM10)|(0 << WGM11)|(0 << WGM12);;
    100c:	e0 e8       	ldi	r30, 0x80	; 128
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 83       	st	Z, r24
	if (prescaler == 1.0)
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e8       	ldi	r20, 0x80	; 128
    101a:	5f e3       	ldi	r21, 0x3F	; 63
    101c:	c7 01       	movw	r24, r14
    101e:	b6 01       	movw	r22, r12
    1020:	78 d1       	rcall	.+752    	; 0x1312 <__cmpsf2>
    1022:	81 11       	cpse	r24, r1
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <timer_1_init+0x32>
	{
		TCCR1B |= (1 << CS00)|(0 << CS01)|(0 << CS02);
    1026:	e1 e8       	ldi	r30, 0x81	; 129
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	80 83       	st	Z, r24
    1030:	1e c0       	rjmp	.+60     	; 0x106e <timer_1_init+0x6e>
	}
	if (prescaler == 8.0)
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	c7 01       	movw	r24, r14
    103c:	b6 01       	movw	r22, r12
    103e:	69 d1       	rcall	.+722    	; 0x1312 <__cmpsf2>
    1040:	81 11       	cpse	r24, r1
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <timer_1_init+0x50>
	{
		TCCR1B |= (0 << CS00)|(1 << CS01)|(0 << CS02);
    1044:	e1 e8       	ldi	r30, 0x81	; 129
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	80 83       	st	Z, r24
    104e:	1e c0       	rjmp	.+60     	; 0x108c <timer_1_init+0x8c>
	}
	if (prescaler == 64.0)
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e8       	ldi	r20, 0x80	; 128
    1056:	52 e4       	ldi	r21, 0x42	; 66
    1058:	c7 01       	movw	r24, r14
    105a:	b6 01       	movw	r22, r12
    105c:	5a d1       	rcall	.+692    	; 0x1312 <__cmpsf2>
    105e:	81 11       	cpse	r24, r1
    1060:	06 c0       	rjmp	.+12     	; 0x106e <timer_1_init+0x6e>
	{
		TCCR1B |= (1 << CS00)|(1 << CS01)|(0 << CS02);
    1062:	e1 e8       	ldi	r30, 0x81	; 129
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	83 60       	ori	r24, 0x03	; 3
    106a:	80 83       	st	Z, r24
    106c:	1d c0       	rjmp	.+58     	; 0x10a8 <timer_1_init+0xa8>
	}
	if (prescaler == 256.0)
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e8       	ldi	r20, 0x80	; 128
    1074:	53 e4       	ldi	r21, 0x43	; 67
    1076:	c7 01       	movw	r24, r14
    1078:	b6 01       	movw	r22, r12
    107a:	4b d1       	rcall	.+662    	; 0x1312 <__cmpsf2>
    107c:	81 11       	cpse	r24, r1
    107e:	06 c0       	rjmp	.+12     	; 0x108c <timer_1_init+0x8c>
	{
		TCCR1B |= (0 << CS00)|(0 << CS01)|(1 << CS02);
    1080:	e1 e8       	ldi	r30, 0x81	; 129
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	84 60       	ori	r24, 0x04	; 4
    1088:	80 83       	st	Z, r24
    108a:	0e c0       	rjmp	.+28     	; 0x10a8 <timer_1_init+0xa8>
	}
	if (prescaler == 1024.0)
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	54 e4       	ldi	r21, 0x44	; 68
    1094:	c7 01       	movw	r24, r14
    1096:	b6 01       	movw	r22, r12
    1098:	3c d1       	rcall	.+632    	; 0x1312 <__cmpsf2>
    109a:	81 11       	cpse	r24, r1
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <timer_1_init+0xa8>
	{
		TCCR1B |= (1 << CS00)|(0 << CS01)|(1 << CS02);
    109e:	e1 e8       	ldi	r30, 0x81	; 129
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	85 60       	ori	r24, 0x05	; 5
    10a6:	80 83       	st	Z, r24
	}
	prescaler_ = prescaler;
    10a8:	c0 92 39 01 	sts	0x0139, r12
    10ac:	d0 92 3a 01 	sts	0x013A, r13
    10b0:	e0 92 3b 01 	sts	0x013B, r14
    10b4:	f0 92 3c 01 	sts	0x013C, r15
	TIMSK1 |= (1 << TOIE1);
    10b8:	ef e6       	ldi	r30, 0x6F	; 111
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	81 60       	ori	r24, 0x01	; 1
    10c0:	80 83       	st	Z, r24
}
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	08 95       	ret

000010cc <timer_1_start>:

void timer_1_start()
{
	overflows = 0;
    10cc:	10 92 3d 01 	sts	0x013D, r1
    10d0:	10 92 3e 01 	sts	0x013E, r1
    10d4:	10 92 3f 01 	sts	0x013F, r1
    10d8:	10 92 40 01 	sts	0x0140, r1
    10dc:	10 92 41 01 	sts	0x0141, r1
    10e0:	10 92 42 01 	sts	0x0142, r1
    10e4:	10 92 43 01 	sts	0x0143, r1
    10e8:	10 92 44 01 	sts	0x0144, r1
	TCNT1 = 0;
    10ec:	10 92 85 00 	sts	0x0085, r1
    10f0:	10 92 84 00 	sts	0x0084, r1
    10f4:	08 95       	ret

000010f6 <timer_1_get_time>:
}

float timer_1_get_time()
{
    10f6:	2f 92       	push	r2
    10f8:	3f 92       	push	r3
    10fa:	4f 92       	push	r4
    10fc:	5f 92       	push	r5
    10fe:	6f 92       	push	r6
    1100:	7f 92       	push	r7
    1102:	8f 92       	push	r8
    1104:	9f 92       	push	r9
    1106:	af 92       	push	r10
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	00 d0       	rcall	.+0      	; 0x111c <timer_1_get_time+0x26>
    111c:	00 d0       	rcall	.+0      	; 0x111e <timer_1_get_time+0x28>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <timer_1_get_time+0x2a>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	float time = 0.0;
	uint16_t count = TCNT1;
    1124:	60 90 84 00 	lds	r6, 0x0084
    1128:	70 90 85 00 	lds	r7, 0x0085
	uint64_t tot_count = (overflows * 65535) + count;
    112c:	20 90 3d 01 	lds	r2, 0x013D
    1130:	30 90 3e 01 	lds	r3, 0x013E
    1134:	80 90 3f 01 	lds	r8, 0x013F
    1138:	90 90 40 01 	lds	r9, 0x0140
    113c:	80 91 41 01 	lds	r24, 0x0141
    1140:	8e 83       	std	Y+6, r24	; 0x06
    1142:	e0 91 42 01 	lds	r30, 0x0142
    1146:	ed 83       	std	Y+5, r30	; 0x05
    1148:	40 90 43 01 	lds	r4, 0x0143
    114c:	50 90 44 01 	lds	r5, 0x0144
	time = (prescaler_/F_CPU) * (tot_count + 1);
    1150:	60 91 39 01 	lds	r22, 0x0139
    1154:	70 91 3a 01 	lds	r23, 0x013A
    1158:	80 91 3b 01 	lds	r24, 0x013B
    115c:	90 91 3c 01 	lds	r25, 0x013C
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	34 e2       	ldi	r19, 0x24	; 36
    1164:	44 e7       	ldi	r20, 0x74	; 116
    1166:	5b e4       	ldi	r21, 0x4B	; 75
    1168:	d8 d0       	rcall	.+432    	; 0x131a <__divsf3>
    116a:	69 83       	std	Y+1, r22	; 0x01
    116c:	7a 83       	std	Y+2, r23	; 0x02
    116e:	8b 83       	std	Y+3, r24	; 0x03
    1170:	9c 83       	std	Y+4, r25	; 0x04

float timer_1_get_time()
{
	float time = 0.0;
	uint16_t count = TCNT1;
	uint64_t tot_count = (overflows * 65535) + count;
    1172:	22 2d       	mov	r18, r2
    1174:	33 2d       	mov	r19, r3
    1176:	48 2d       	mov	r20, r8
    1178:	59 2d       	mov	r21, r9
    117a:	6e 81       	ldd	r22, Y+6	; 0x06
    117c:	7d 81       	ldd	r23, Y+5	; 0x05
    117e:	84 2d       	mov	r24, r4
    1180:	95 2d       	mov	r25, r5
    1182:	07 e0       	ldi	r16, 0x07	; 7
    1184:	f0 d3       	rcall	.+2016   	; 0x1966 <__ashldi3>
    1186:	a2 2c       	mov	r10, r2
    1188:	b3 2c       	mov	r11, r3
    118a:	c8 2c       	mov	r12, r8
    118c:	d9 2c       	mov	r13, r9
    118e:	ee 80       	ldd	r14, Y+6	; 0x06
    1190:	fd 80       	ldd	r15, Y+5	; 0x05
    1192:	04 2d       	mov	r16, r4
    1194:	15 2d       	mov	r17, r5
    1196:	00 d4       	rcall	.+2048   	; 0x1998 <__adddi3>
    1198:	01 e0       	ldi	r16, 0x01	; 1
    119a:	e5 d3       	rcall	.+1994   	; 0x1966 <__ashldi3>
    119c:	04 2d       	mov	r16, r4
    119e:	11 d4       	rcall	.+2082   	; 0x19c2 <__subdi3>
    11a0:	a2 2e       	mov	r10, r18
    11a2:	b3 2e       	mov	r11, r19
    11a4:	c4 2e       	mov	r12, r20
    11a6:	d5 2e       	mov	r13, r21
    11a8:	e6 2e       	mov	r14, r22
    11aa:	f7 2e       	mov	r15, r23
    11ac:	e8 2f       	mov	r30, r24
    11ae:	19 2f       	mov	r17, r25
    11b0:	04 e0       	ldi	r16, 0x04	; 4
    11b2:	d9 d3       	rcall	.+1970   	; 0x1966 <__ashldi3>
    11b4:	0e 2f       	mov	r16, r30
    11b6:	05 d4       	rcall	.+2058   	; 0x19c2 <__subdi3>
    11b8:	82 2e       	mov	r8, r18
    11ba:	93 2e       	mov	r9, r19
    11bc:	44 2e       	mov	r4, r20
    11be:	55 2e       	mov	r5, r21
    11c0:	b6 2f       	mov	r27, r22
    11c2:	a7 2f       	mov	r26, r23
    11c4:	f8 2f       	mov	r31, r24
    11c6:	e9 2f       	mov	r30, r25
    11c8:	04 e0       	ldi	r16, 0x04	; 4
    11ca:	cd d3       	rcall	.+1946   	; 0x1966 <__ashldi3>
    11cc:	a2 2e       	mov	r10, r18
    11ce:	b3 2e       	mov	r11, r19
    11d0:	c4 2e       	mov	r12, r20
    11d2:	d5 2e       	mov	r13, r21
    11d4:	e6 2e       	mov	r14, r22
    11d6:	f7 2e       	mov	r15, r23
    11d8:	08 2f       	mov	r16, r24
    11da:	19 2f       	mov	r17, r25
    11dc:	28 2d       	mov	r18, r8
    11de:	39 2d       	mov	r19, r9
    11e0:	44 2d       	mov	r20, r4
    11e2:	55 2d       	mov	r21, r5
    11e4:	6b 2f       	mov	r22, r27
    11e6:	7a 2f       	mov	r23, r26
    11e8:	8f 2f       	mov	r24, r31
    11ea:	9e 2f       	mov	r25, r30
    11ec:	d5 d3       	rcall	.+1962   	; 0x1998 <__adddi3>
    11ee:	13 01       	movw	r2, r6
    11f0:	a2 2c       	mov	r10, r2
    11f2:	b3 2c       	mov	r11, r3
    11f4:	c1 2c       	mov	r12, r1
    11f6:	d1 2c       	mov	r13, r1
    11f8:	e1 2c       	mov	r14, r1
    11fa:	f1 2c       	mov	r15, r1
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	cb d3       	rcall	.+1942   	; 0x1998 <__adddi3>
	time = (prescaler_/F_CPU) * (tot_count + 1);
    1202:	a1 e0       	ldi	r26, 0x01	; 1
    1204:	d2 d3       	rcall	.+1956   	; 0x19aa <__adddi3_s8>
    1206:	2e d1       	rcall	.+604    	; 0x1464 <__floatundisf>
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	69 81       	ldd	r22, Y+1	; 0x01
    120e:	7a 81       	ldd	r23, Y+2	; 0x02
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	da d1       	rcall	.+948    	; 0x15ca <__mulsf3>
	return time;
    1216:	26 96       	adiw	r28, 0x06	; 6
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	ff 90       	pop	r15
    122c:	ef 90       	pop	r14
    122e:	df 90       	pop	r13
    1230:	cf 90       	pop	r12
    1232:	bf 90       	pop	r11
    1234:	af 90       	pop	r10
    1236:	9f 90       	pop	r9
    1238:	8f 90       	pop	r8
    123a:	7f 90       	pop	r7
    123c:	6f 90       	pop	r6
    123e:	5f 90       	pop	r5
    1240:	4f 90       	pop	r4
    1242:	3f 90       	pop	r3
    1244:	2f 90       	pop	r2
    1246:	08 95       	ret

00001248 <__subsf3>:
    1248:	50 58       	subi	r21, 0x80	; 128

0000124a <__addsf3>:
    124a:	bb 27       	eor	r27, r27
    124c:	aa 27       	eor	r26, r26
    124e:	0e d0       	rcall	.+28     	; 0x126c <__addsf3x>
    1250:	82 c1       	rjmp	.+772    	; 0x1556 <__fp_round>
    1252:	73 d1       	rcall	.+742    	; 0x153a <__fp_pscA>
    1254:	30 f0       	brcs	.+12     	; 0x1262 <__addsf3+0x18>
    1256:	78 d1       	rcall	.+752    	; 0x1548 <__fp_pscB>
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__addsf3+0x18>
    125a:	31 f4       	brne	.+12     	; 0x1268 <__addsf3+0x1e>
    125c:	9f 3f       	cpi	r25, 0xFF	; 255
    125e:	11 f4       	brne	.+4      	; 0x1264 <__addsf3+0x1a>
    1260:	1e f4       	brtc	.+6      	; 0x1268 <__addsf3+0x1e>
    1262:	68 c1       	rjmp	.+720    	; 0x1534 <__fp_nan>
    1264:	0e f4       	brtc	.+2      	; 0x1268 <__addsf3+0x1e>
    1266:	e0 95       	com	r30
    1268:	e7 fb       	bst	r30, 7
    126a:	5e c1       	rjmp	.+700    	; 0x1528 <__fp_inf>

0000126c <__addsf3x>:
    126c:	e9 2f       	mov	r30, r25
    126e:	84 d1       	rcall	.+776    	; 0x1578 <__fp_split3>
    1270:	80 f3       	brcs	.-32     	; 0x1252 <__addsf3+0x8>
    1272:	ba 17       	cp	r27, r26
    1274:	62 07       	cpc	r22, r18
    1276:	73 07       	cpc	r23, r19
    1278:	84 07       	cpc	r24, r20
    127a:	95 07       	cpc	r25, r21
    127c:	18 f0       	brcs	.+6      	; 0x1284 <__addsf3x+0x18>
    127e:	71 f4       	brne	.+28     	; 0x129c <__addsf3x+0x30>
    1280:	9e f5       	brtc	.+102    	; 0x12e8 <__addsf3x+0x7c>
    1282:	9c c1       	rjmp	.+824    	; 0x15bc <__fp_zero>
    1284:	0e f4       	brtc	.+2      	; 0x1288 <__addsf3x+0x1c>
    1286:	e0 95       	com	r30
    1288:	0b 2e       	mov	r0, r27
    128a:	ba 2f       	mov	r27, r26
    128c:	a0 2d       	mov	r26, r0
    128e:	0b 01       	movw	r0, r22
    1290:	b9 01       	movw	r22, r18
    1292:	90 01       	movw	r18, r0
    1294:	0c 01       	movw	r0, r24
    1296:	ca 01       	movw	r24, r20
    1298:	a0 01       	movw	r20, r0
    129a:	11 24       	eor	r1, r1
    129c:	ff 27       	eor	r31, r31
    129e:	59 1b       	sub	r21, r25
    12a0:	99 f0       	breq	.+38     	; 0x12c8 <__addsf3x+0x5c>
    12a2:	59 3f       	cpi	r21, 0xF9	; 249
    12a4:	50 f4       	brcc	.+20     	; 0x12ba <__addsf3x+0x4e>
    12a6:	50 3e       	cpi	r21, 0xE0	; 224
    12a8:	68 f1       	brcs	.+90     	; 0x1304 <__addsf3x+0x98>
    12aa:	1a 16       	cp	r1, r26
    12ac:	f0 40       	sbci	r31, 0x00	; 0
    12ae:	a2 2f       	mov	r26, r18
    12b0:	23 2f       	mov	r18, r19
    12b2:	34 2f       	mov	r19, r20
    12b4:	44 27       	eor	r20, r20
    12b6:	58 5f       	subi	r21, 0xF8	; 248
    12b8:	f3 cf       	rjmp	.-26     	; 0x12a0 <__addsf3x+0x34>
    12ba:	46 95       	lsr	r20
    12bc:	37 95       	ror	r19
    12be:	27 95       	ror	r18
    12c0:	a7 95       	ror	r26
    12c2:	f0 40       	sbci	r31, 0x00	; 0
    12c4:	53 95       	inc	r21
    12c6:	c9 f7       	brne	.-14     	; 0x12ba <__addsf3x+0x4e>
    12c8:	7e f4       	brtc	.+30     	; 0x12e8 <__addsf3x+0x7c>
    12ca:	1f 16       	cp	r1, r31
    12cc:	ba 0b       	sbc	r27, r26
    12ce:	62 0b       	sbc	r22, r18
    12d0:	73 0b       	sbc	r23, r19
    12d2:	84 0b       	sbc	r24, r20
    12d4:	ba f0       	brmi	.+46     	; 0x1304 <__addsf3x+0x98>
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	a1 f0       	breq	.+40     	; 0x1302 <__addsf3x+0x96>
    12da:	ff 0f       	add	r31, r31
    12dc:	bb 1f       	adc	r27, r27
    12de:	66 1f       	adc	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	c2 f7       	brpl	.-16     	; 0x12d6 <__addsf3x+0x6a>
    12e6:	0e c0       	rjmp	.+28     	; 0x1304 <__addsf3x+0x98>
    12e8:	ba 0f       	add	r27, r26
    12ea:	62 1f       	adc	r22, r18
    12ec:	73 1f       	adc	r23, r19
    12ee:	84 1f       	adc	r24, r20
    12f0:	48 f4       	brcc	.+18     	; 0x1304 <__addsf3x+0x98>
    12f2:	87 95       	ror	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	b7 95       	ror	r27
    12fa:	f7 95       	ror	r31
    12fc:	9e 3f       	cpi	r25, 0xFE	; 254
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <__addsf3x+0x96>
    1300:	b3 cf       	rjmp	.-154    	; 0x1268 <__addsf3+0x1e>
    1302:	93 95       	inc	r25
    1304:	88 0f       	add	r24, r24
    1306:	08 f0       	brcs	.+2      	; 0x130a <__addsf3x+0x9e>
    1308:	99 27       	eor	r25, r25
    130a:	ee 0f       	add	r30, r30
    130c:	97 95       	ror	r25
    130e:	87 95       	ror	r24
    1310:	08 95       	ret

00001312 <__cmpsf2>:
    1312:	e6 d0       	rcall	.+460    	; 0x14e0 <__fp_cmp>
    1314:	08 f4       	brcc	.+2      	; 0x1318 <__cmpsf2+0x6>
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	08 95       	ret

0000131a <__divsf3>:
    131a:	0c d0       	rcall	.+24     	; 0x1334 <__divsf3x>
    131c:	1c c1       	rjmp	.+568    	; 0x1556 <__fp_round>
    131e:	14 d1       	rcall	.+552    	; 0x1548 <__fp_pscB>
    1320:	40 f0       	brcs	.+16     	; 0x1332 <__divsf3+0x18>
    1322:	0b d1       	rcall	.+534    	; 0x153a <__fp_pscA>
    1324:	30 f0       	brcs	.+12     	; 0x1332 <__divsf3+0x18>
    1326:	21 f4       	brne	.+8      	; 0x1330 <__divsf3+0x16>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	19 f0       	breq	.+6      	; 0x1332 <__divsf3+0x18>
    132c:	fd c0       	rjmp	.+506    	; 0x1528 <__fp_inf>
    132e:	51 11       	cpse	r21, r1
    1330:	46 c1       	rjmp	.+652    	; 0x15be <__fp_szero>
    1332:	00 c1       	rjmp	.+512    	; 0x1534 <__fp_nan>

00001334 <__divsf3x>:
    1334:	21 d1       	rcall	.+578    	; 0x1578 <__fp_split3>
    1336:	98 f3       	brcs	.-26     	; 0x131e <__divsf3+0x4>

00001338 <__divsf3_pse>:
    1338:	99 23       	and	r25, r25
    133a:	c9 f3       	breq	.-14     	; 0x132e <__divsf3+0x14>
    133c:	55 23       	and	r21, r21
    133e:	b1 f3       	breq	.-20     	; 0x132c <__divsf3+0x12>
    1340:	95 1b       	sub	r25, r21
    1342:	55 0b       	sbc	r21, r21
    1344:	bb 27       	eor	r27, r27
    1346:	aa 27       	eor	r26, r26
    1348:	62 17       	cp	r22, r18
    134a:	73 07       	cpc	r23, r19
    134c:	84 07       	cpc	r24, r20
    134e:	38 f0       	brcs	.+14     	; 0x135e <__divsf3_pse+0x26>
    1350:	9f 5f       	subi	r25, 0xFF	; 255
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	22 0f       	add	r18, r18
    1356:	33 1f       	adc	r19, r19
    1358:	44 1f       	adc	r20, r20
    135a:	aa 1f       	adc	r26, r26
    135c:	a9 f3       	breq	.-22     	; 0x1348 <__divsf3_pse+0x10>
    135e:	33 d0       	rcall	.+102    	; 0x13c6 <__divsf3_pse+0x8e>
    1360:	0e 2e       	mov	r0, r30
    1362:	3a f0       	brmi	.+14     	; 0x1372 <__divsf3_pse+0x3a>
    1364:	e0 e8       	ldi	r30, 0x80	; 128
    1366:	30 d0       	rcall	.+96     	; 0x13c8 <__divsf3_pse+0x90>
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	e6 95       	lsr	r30
    136e:	00 1c       	adc	r0, r0
    1370:	ca f7       	brpl	.-14     	; 0x1364 <__divsf3_pse+0x2c>
    1372:	29 d0       	rcall	.+82     	; 0x13c6 <__divsf3_pse+0x8e>
    1374:	fe 2f       	mov	r31, r30
    1376:	27 d0       	rcall	.+78     	; 0x13c6 <__divsf3_pse+0x8e>
    1378:	66 0f       	add	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	bb 1f       	adc	r27, r27
    1380:	26 17       	cp	r18, r22
    1382:	37 07       	cpc	r19, r23
    1384:	48 07       	cpc	r20, r24
    1386:	ab 07       	cpc	r26, r27
    1388:	b0 e8       	ldi	r27, 0x80	; 128
    138a:	09 f0       	breq	.+2      	; 0x138e <__divsf3_pse+0x56>
    138c:	bb 0b       	sbc	r27, r27
    138e:	80 2d       	mov	r24, r0
    1390:	bf 01       	movw	r22, r30
    1392:	ff 27       	eor	r31, r31
    1394:	93 58       	subi	r25, 0x83	; 131
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	2a f0       	brmi	.+10     	; 0x13a4 <__divsf3_pse+0x6c>
    139a:	9e 3f       	cpi	r25, 0xFE	; 254
    139c:	51 05       	cpc	r21, r1
    139e:	68 f0       	brcs	.+26     	; 0x13ba <__divsf3_pse+0x82>
    13a0:	c3 c0       	rjmp	.+390    	; 0x1528 <__fp_inf>
    13a2:	0d c1       	rjmp	.+538    	; 0x15be <__fp_szero>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	ec f3       	brlt	.-6      	; 0x13a2 <__divsf3_pse+0x6a>
    13a8:	98 3e       	cpi	r25, 0xE8	; 232
    13aa:	dc f3       	brlt	.-10     	; 0x13a2 <__divsf3_pse+0x6a>
    13ac:	86 95       	lsr	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	b7 95       	ror	r27
    13b4:	f7 95       	ror	r31
    13b6:	9f 5f       	subi	r25, 0xFF	; 255
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__divsf3_pse+0x74>
    13ba:	88 0f       	add	r24, r24
    13bc:	91 1d       	adc	r25, r1
    13be:	96 95       	lsr	r25
    13c0:	87 95       	ror	r24
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret
    13c6:	e1 e0       	ldi	r30, 0x01	; 1
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	88 1f       	adc	r24, r24
    13ce:	bb 1f       	adc	r27, r27
    13d0:	62 17       	cp	r22, r18
    13d2:	73 07       	cpc	r23, r19
    13d4:	84 07       	cpc	r24, r20
    13d6:	ba 07       	cpc	r27, r26
    13d8:	20 f0       	brcs	.+8      	; 0x13e2 <__divsf3_pse+0xaa>
    13da:	62 1b       	sub	r22, r18
    13dc:	73 0b       	sbc	r23, r19
    13de:	84 0b       	sbc	r24, r20
    13e0:	ba 0b       	sbc	r27, r26
    13e2:	ee 1f       	adc	r30, r30
    13e4:	88 f7       	brcc	.-30     	; 0x13c8 <__divsf3_pse+0x90>
    13e6:	e0 95       	com	r30
    13e8:	08 95       	ret

000013ea <__floatunsisf>:
    13ea:	e8 94       	clt
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <__floatsisf+0x12>

000013ee <__floatsisf>:
    13ee:	97 fb       	bst	r25, 7
    13f0:	3e f4       	brtc	.+14     	; 0x1400 <__floatsisf+0x12>
    13f2:	90 95       	com	r25
    13f4:	80 95       	com	r24
    13f6:	70 95       	com	r23
    13f8:	61 95       	neg	r22
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	8f 4f       	sbci	r24, 0xFF	; 255
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	99 23       	and	r25, r25
    1402:	a9 f0       	breq	.+42     	; 0x142e <__floatsisf+0x40>
    1404:	f9 2f       	mov	r31, r25
    1406:	96 e9       	ldi	r25, 0x96	; 150
    1408:	bb 27       	eor	r27, r27
    140a:	93 95       	inc	r25
    140c:	f6 95       	lsr	r31
    140e:	87 95       	ror	r24
    1410:	77 95       	ror	r23
    1412:	67 95       	ror	r22
    1414:	b7 95       	ror	r27
    1416:	f1 11       	cpse	r31, r1
    1418:	f8 cf       	rjmp	.-16     	; 0x140a <__floatsisf+0x1c>
    141a:	fa f4       	brpl	.+62     	; 0x145a <__floatsisf+0x6c>
    141c:	bb 0f       	add	r27, r27
    141e:	11 f4       	brne	.+4      	; 0x1424 <__floatsisf+0x36>
    1420:	60 ff       	sbrs	r22, 0
    1422:	1b c0       	rjmp	.+54     	; 0x145a <__floatsisf+0x6c>
    1424:	6f 5f       	subi	r22, 0xFF	; 255
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	8f 4f       	sbci	r24, 0xFF	; 255
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	16 c0       	rjmp	.+44     	; 0x145a <__floatsisf+0x6c>
    142e:	88 23       	and	r24, r24
    1430:	11 f0       	breq	.+4      	; 0x1436 <__floatsisf+0x48>
    1432:	96 e9       	ldi	r25, 0x96	; 150
    1434:	11 c0       	rjmp	.+34     	; 0x1458 <__floatsisf+0x6a>
    1436:	77 23       	and	r23, r23
    1438:	21 f0       	breq	.+8      	; 0x1442 <__floatsisf+0x54>
    143a:	9e e8       	ldi	r25, 0x8E	; 142
    143c:	87 2f       	mov	r24, r23
    143e:	76 2f       	mov	r23, r22
    1440:	05 c0       	rjmp	.+10     	; 0x144c <__floatsisf+0x5e>
    1442:	66 23       	and	r22, r22
    1444:	71 f0       	breq	.+28     	; 0x1462 <__floatsisf+0x74>
    1446:	96 e8       	ldi	r25, 0x86	; 134
    1448:	86 2f       	mov	r24, r22
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	2a f0       	brmi	.+10     	; 0x145a <__floatsisf+0x6c>
    1450:	9a 95       	dec	r25
    1452:	66 0f       	add	r22, r22
    1454:	77 1f       	adc	r23, r23
    1456:	88 1f       	adc	r24, r24
    1458:	da f7       	brpl	.-10     	; 0x1450 <__floatsisf+0x62>
    145a:	88 0f       	add	r24, r24
    145c:	96 95       	lsr	r25
    145e:	87 95       	ror	r24
    1460:	97 f9       	bld	r25, 7
    1462:	08 95       	ret

00001464 <__floatundisf>:
    1464:	e8 94       	clt

00001466 <__fp_di2sf>:
    1466:	f9 2f       	mov	r31, r25
    1468:	96 eb       	ldi	r25, 0xB6	; 182
    146a:	ff 23       	and	r31, r31
    146c:	81 f0       	breq	.+32     	; 0x148e <__fp_di2sf+0x28>
    146e:	12 16       	cp	r1, r18
    1470:	13 06       	cpc	r1, r19
    1472:	14 06       	cpc	r1, r20
    1474:	44 0b       	sbc	r20, r20
    1476:	93 95       	inc	r25
    1478:	f6 95       	lsr	r31
    147a:	87 95       	ror	r24
    147c:	77 95       	ror	r23
    147e:	67 95       	ror	r22
    1480:	57 95       	ror	r21
    1482:	40 40       	sbci	r20, 0x00	; 0
    1484:	ff 23       	and	r31, r31
    1486:	b9 f7       	brne	.-18     	; 0x1476 <__fp_di2sf+0x10>
    1488:	1b c0       	rjmp	.+54     	; 0x14c0 <__fp_di2sf+0x5a>
    148a:	99 27       	eor	r25, r25
    148c:	08 95       	ret
    148e:	88 23       	and	r24, r24
    1490:	51 f4       	brne	.+20     	; 0x14a6 <__fp_di2sf+0x40>
    1492:	98 50       	subi	r25, 0x08	; 8
    1494:	d2 f7       	brpl	.-12     	; 0x148a <__fp_di2sf+0x24>
    1496:	87 2b       	or	r24, r23
    1498:	76 2f       	mov	r23, r22
    149a:	65 2f       	mov	r22, r21
    149c:	54 2f       	mov	r21, r20
    149e:	43 2f       	mov	r20, r19
    14a0:	32 2f       	mov	r19, r18
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	b1 f3       	breq	.-20     	; 0x1492 <__fp_di2sf+0x2c>
    14a6:	12 16       	cp	r1, r18
    14a8:	13 06       	cpc	r1, r19
    14aa:	14 06       	cpc	r1, r20
    14ac:	44 0b       	sbc	r20, r20
    14ae:	88 23       	and	r24, r24
    14b0:	3a f0       	brmi	.+14     	; 0x14c0 <__fp_di2sf+0x5a>
    14b2:	9a 95       	dec	r25
    14b4:	44 0f       	add	r20, r20
    14b6:	55 1f       	adc	r21, r21
    14b8:	66 1f       	adc	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	88 1f       	adc	r24, r24
    14be:	ca f7       	brpl	.-14     	; 0x14b2 <__fp_di2sf+0x4c>
    14c0:	55 23       	and	r21, r21
    14c2:	4a f4       	brpl	.+18     	; 0x14d6 <__fp_di2sf+0x70>
    14c4:	44 0f       	add	r20, r20
    14c6:	55 1f       	adc	r21, r21
    14c8:	11 f4       	brne	.+4      	; 0x14ce <__fp_di2sf+0x68>
    14ca:	60 ff       	sbrs	r22, 0
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <__fp_di2sf+0x70>
    14ce:	6f 5f       	subi	r22, 0xFF	; 255
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	8f 4f       	sbci	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	88 0f       	add	r24, r24
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	97 f9       	bld	r25, 7
    14de:	08 95       	ret

000014e0 <__fp_cmp>:
    14e0:	99 0f       	add	r25, r25
    14e2:	00 08       	sbc	r0, r0
    14e4:	55 0f       	add	r21, r21
    14e6:	aa 0b       	sbc	r26, r26
    14e8:	e0 e8       	ldi	r30, 0x80	; 128
    14ea:	fe ef       	ldi	r31, 0xFE	; 254
    14ec:	16 16       	cp	r1, r22
    14ee:	17 06       	cpc	r1, r23
    14f0:	e8 07       	cpc	r30, r24
    14f2:	f9 07       	cpc	r31, r25
    14f4:	c0 f0       	brcs	.+48     	; 0x1526 <__fp_cmp+0x46>
    14f6:	12 16       	cp	r1, r18
    14f8:	13 06       	cpc	r1, r19
    14fa:	e4 07       	cpc	r30, r20
    14fc:	f5 07       	cpc	r31, r21
    14fe:	98 f0       	brcs	.+38     	; 0x1526 <__fp_cmp+0x46>
    1500:	62 1b       	sub	r22, r18
    1502:	73 0b       	sbc	r23, r19
    1504:	84 0b       	sbc	r24, r20
    1506:	95 0b       	sbc	r25, r21
    1508:	39 f4       	brne	.+14     	; 0x1518 <__fp_cmp+0x38>
    150a:	0a 26       	eor	r0, r26
    150c:	61 f0       	breq	.+24     	; 0x1526 <__fp_cmp+0x46>
    150e:	23 2b       	or	r18, r19
    1510:	24 2b       	or	r18, r20
    1512:	25 2b       	or	r18, r21
    1514:	21 f4       	brne	.+8      	; 0x151e <__fp_cmp+0x3e>
    1516:	08 95       	ret
    1518:	0a 26       	eor	r0, r26
    151a:	09 f4       	brne	.+2      	; 0x151e <__fp_cmp+0x3e>
    151c:	a1 40       	sbci	r26, 0x01	; 1
    151e:	a6 95       	lsr	r26
    1520:	8f ef       	ldi	r24, 0xFF	; 255
    1522:	81 1d       	adc	r24, r1
    1524:	81 1d       	adc	r24, r1
    1526:	08 95       	ret

00001528 <__fp_inf>:
    1528:	97 f9       	bld	r25, 7
    152a:	9f 67       	ori	r25, 0x7F	; 127
    152c:	80 e8       	ldi	r24, 0x80	; 128
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	08 95       	ret

00001534 <__fp_nan>:
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	80 ec       	ldi	r24, 0xC0	; 192
    1538:	08 95       	ret

0000153a <__fp_pscA>:
    153a:	00 24       	eor	r0, r0
    153c:	0a 94       	dec	r0
    153e:	16 16       	cp	r1, r22
    1540:	17 06       	cpc	r1, r23
    1542:	18 06       	cpc	r1, r24
    1544:	09 06       	cpc	r0, r25
    1546:	08 95       	ret

00001548 <__fp_pscB>:
    1548:	00 24       	eor	r0, r0
    154a:	0a 94       	dec	r0
    154c:	12 16       	cp	r1, r18
    154e:	13 06       	cpc	r1, r19
    1550:	14 06       	cpc	r1, r20
    1552:	05 06       	cpc	r0, r21
    1554:	08 95       	ret

00001556 <__fp_round>:
    1556:	09 2e       	mov	r0, r25
    1558:	03 94       	inc	r0
    155a:	00 0c       	add	r0, r0
    155c:	11 f4       	brne	.+4      	; 0x1562 <__fp_round+0xc>
    155e:	88 23       	and	r24, r24
    1560:	52 f0       	brmi	.+20     	; 0x1576 <__fp_round+0x20>
    1562:	bb 0f       	add	r27, r27
    1564:	40 f4       	brcc	.+16     	; 0x1576 <__fp_round+0x20>
    1566:	bf 2b       	or	r27, r31
    1568:	11 f4       	brne	.+4      	; 0x156e <__fp_round+0x18>
    156a:	60 ff       	sbrs	r22, 0
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <__fp_round+0x20>
    156e:	6f 5f       	subi	r22, 0xFF	; 255
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8f 4f       	sbci	r24, 0xFF	; 255
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__fp_split3>:
    1578:	57 fd       	sbrc	r21, 7
    157a:	90 58       	subi	r25, 0x80	; 128
    157c:	44 0f       	add	r20, r20
    157e:	55 1f       	adc	r21, r21
    1580:	59 f0       	breq	.+22     	; 0x1598 <__fp_splitA+0x10>
    1582:	5f 3f       	cpi	r21, 0xFF	; 255
    1584:	71 f0       	breq	.+28     	; 0x15a2 <__fp_splitA+0x1a>
    1586:	47 95       	ror	r20

00001588 <__fp_splitA>:
    1588:	88 0f       	add	r24, r24
    158a:	97 fb       	bst	r25, 7
    158c:	99 1f       	adc	r25, r25
    158e:	61 f0       	breq	.+24     	; 0x15a8 <__fp_splitA+0x20>
    1590:	9f 3f       	cpi	r25, 0xFF	; 255
    1592:	79 f0       	breq	.+30     	; 0x15b2 <__fp_splitA+0x2a>
    1594:	87 95       	ror	r24
    1596:	08 95       	ret
    1598:	12 16       	cp	r1, r18
    159a:	13 06       	cpc	r1, r19
    159c:	14 06       	cpc	r1, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	f2 cf       	rjmp	.-28     	; 0x1586 <__fp_split3+0xe>
    15a2:	46 95       	lsr	r20
    15a4:	f1 df       	rcall	.-30     	; 0x1588 <__fp_splitA>
    15a6:	08 c0       	rjmp	.+16     	; 0x15b8 <__fp_splitA+0x30>
    15a8:	16 16       	cp	r1, r22
    15aa:	17 06       	cpc	r1, r23
    15ac:	18 06       	cpc	r1, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	f1 cf       	rjmp	.-30     	; 0x1594 <__fp_splitA+0xc>
    15b2:	86 95       	lsr	r24
    15b4:	71 05       	cpc	r23, r1
    15b6:	61 05       	cpc	r22, r1
    15b8:	08 94       	sec
    15ba:	08 95       	ret

000015bc <__fp_zero>:
    15bc:	e8 94       	clt

000015be <__fp_szero>:
    15be:	bb 27       	eor	r27, r27
    15c0:	66 27       	eor	r22, r22
    15c2:	77 27       	eor	r23, r23
    15c4:	cb 01       	movw	r24, r22
    15c6:	97 f9       	bld	r25, 7
    15c8:	08 95       	ret

000015ca <__mulsf3>:
    15ca:	0b d0       	rcall	.+22     	; 0x15e2 <__mulsf3x>
    15cc:	c4 cf       	rjmp	.-120    	; 0x1556 <__fp_round>
    15ce:	b5 df       	rcall	.-150    	; 0x153a <__fp_pscA>
    15d0:	28 f0       	brcs	.+10     	; 0x15dc <__mulsf3+0x12>
    15d2:	ba df       	rcall	.-140    	; 0x1548 <__fp_pscB>
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <__mulsf3+0x12>
    15d6:	95 23       	and	r25, r21
    15d8:	09 f0       	breq	.+2      	; 0x15dc <__mulsf3+0x12>
    15da:	a6 cf       	rjmp	.-180    	; 0x1528 <__fp_inf>
    15dc:	ab cf       	rjmp	.-170    	; 0x1534 <__fp_nan>
    15de:	11 24       	eor	r1, r1
    15e0:	ee cf       	rjmp	.-36     	; 0x15be <__fp_szero>

000015e2 <__mulsf3x>:
    15e2:	ca df       	rcall	.-108    	; 0x1578 <__fp_split3>
    15e4:	a0 f3       	brcs	.-24     	; 0x15ce <__mulsf3+0x4>

000015e6 <__mulsf3_pse>:
    15e6:	95 9f       	mul	r25, r21
    15e8:	d1 f3       	breq	.-12     	; 0x15de <__mulsf3+0x14>
    15ea:	95 0f       	add	r25, r21
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	55 1f       	adc	r21, r21
    15f0:	62 9f       	mul	r22, r18
    15f2:	f0 01       	movw	r30, r0
    15f4:	72 9f       	mul	r23, r18
    15f6:	bb 27       	eor	r27, r27
    15f8:	f0 0d       	add	r31, r0
    15fa:	b1 1d       	adc	r27, r1
    15fc:	63 9f       	mul	r22, r19
    15fe:	aa 27       	eor	r26, r26
    1600:	f0 0d       	add	r31, r0
    1602:	b1 1d       	adc	r27, r1
    1604:	aa 1f       	adc	r26, r26
    1606:	64 9f       	mul	r22, r20
    1608:	66 27       	eor	r22, r22
    160a:	b0 0d       	add	r27, r0
    160c:	a1 1d       	adc	r26, r1
    160e:	66 1f       	adc	r22, r22
    1610:	82 9f       	mul	r24, r18
    1612:	22 27       	eor	r18, r18
    1614:	b0 0d       	add	r27, r0
    1616:	a1 1d       	adc	r26, r1
    1618:	62 1f       	adc	r22, r18
    161a:	73 9f       	mul	r23, r19
    161c:	b0 0d       	add	r27, r0
    161e:	a1 1d       	adc	r26, r1
    1620:	62 1f       	adc	r22, r18
    1622:	83 9f       	mul	r24, r19
    1624:	a0 0d       	add	r26, r0
    1626:	61 1d       	adc	r22, r1
    1628:	22 1f       	adc	r18, r18
    162a:	74 9f       	mul	r23, r20
    162c:	33 27       	eor	r19, r19
    162e:	a0 0d       	add	r26, r0
    1630:	61 1d       	adc	r22, r1
    1632:	23 1f       	adc	r18, r19
    1634:	84 9f       	mul	r24, r20
    1636:	60 0d       	add	r22, r0
    1638:	21 1d       	adc	r18, r1
    163a:	82 2f       	mov	r24, r18
    163c:	76 2f       	mov	r23, r22
    163e:	6a 2f       	mov	r22, r26
    1640:	11 24       	eor	r1, r1
    1642:	9f 57       	subi	r25, 0x7F	; 127
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	8a f0       	brmi	.+34     	; 0x166a <__mulsf3_pse+0x84>
    1648:	e1 f0       	breq	.+56     	; 0x1682 <__mulsf3_pse+0x9c>
    164a:	88 23       	and	r24, r24
    164c:	4a f0       	brmi	.+18     	; 0x1660 <__mulsf3_pse+0x7a>
    164e:	ee 0f       	add	r30, r30
    1650:	ff 1f       	adc	r31, r31
    1652:	bb 1f       	adc	r27, r27
    1654:	66 1f       	adc	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	91 50       	subi	r25, 0x01	; 1
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	a9 f7       	brne	.-22     	; 0x164a <__mulsf3_pse+0x64>
    1660:	9e 3f       	cpi	r25, 0xFE	; 254
    1662:	51 05       	cpc	r21, r1
    1664:	70 f0       	brcs	.+28     	; 0x1682 <__mulsf3_pse+0x9c>
    1666:	60 cf       	rjmp	.-320    	; 0x1528 <__fp_inf>
    1668:	aa cf       	rjmp	.-172    	; 0x15be <__fp_szero>
    166a:	5f 3f       	cpi	r21, 0xFF	; 255
    166c:	ec f3       	brlt	.-6      	; 0x1668 <__mulsf3_pse+0x82>
    166e:	98 3e       	cpi	r25, 0xE8	; 232
    1670:	dc f3       	brlt	.-10     	; 0x1668 <__mulsf3_pse+0x82>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f7 95       	ror	r31
    167c:	e7 95       	ror	r30
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	c1 f7       	brne	.-16     	; 0x1672 <__mulsf3_pse+0x8c>
    1682:	fe 2b       	or	r31, r30
    1684:	88 0f       	add	r24, r24
    1686:	91 1d       	adc	r25, r1
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	97 f9       	bld	r25, 7
    168e:	08 95       	ret

00001690 <pow>:
    1690:	fa 01       	movw	r30, r20
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	30 96       	adiw	r30, 0x00	; 0
    1698:	21 05       	cpc	r18, r1
    169a:	31 05       	cpc	r19, r1
    169c:	99 f1       	breq	.+102    	; 0x1704 <pow+0x74>
    169e:	61 15       	cp	r22, r1
    16a0:	71 05       	cpc	r23, r1
    16a2:	61 f4       	brne	.+24     	; 0x16bc <pow+0x2c>
    16a4:	80 38       	cpi	r24, 0x80	; 128
    16a6:	bf e3       	ldi	r27, 0x3F	; 63
    16a8:	9b 07       	cpc	r25, r27
    16aa:	49 f1       	breq	.+82     	; 0x16fe <pow+0x6e>
    16ac:	68 94       	set
    16ae:	90 38       	cpi	r25, 0x80	; 128
    16b0:	81 05       	cpc	r24, r1
    16b2:	61 f0       	breq	.+24     	; 0x16cc <pow+0x3c>
    16b4:	80 38       	cpi	r24, 0x80	; 128
    16b6:	bf ef       	ldi	r27, 0xFF	; 255
    16b8:	9b 07       	cpc	r25, r27
    16ba:	41 f0       	breq	.+16     	; 0x16cc <pow+0x3c>
    16bc:	99 23       	and	r25, r25
    16be:	42 f5       	brpl	.+80     	; 0x1710 <pow+0x80>
    16c0:	ff 3f       	cpi	r31, 0xFF	; 255
    16c2:	e1 05       	cpc	r30, r1
    16c4:	31 05       	cpc	r19, r1
    16c6:	21 05       	cpc	r18, r1
    16c8:	11 f1       	breq	.+68     	; 0x170e <pow+0x7e>
    16ca:	e8 94       	clt
    16cc:	08 94       	sec
    16ce:	e7 95       	ror	r30
    16d0:	d9 01       	movw	r26, r18
    16d2:	aa 23       	and	r26, r26
    16d4:	29 f4       	brne	.+10     	; 0x16e0 <pow+0x50>
    16d6:	ab 2f       	mov	r26, r27
    16d8:	be 2f       	mov	r27, r30
    16da:	f8 5f       	subi	r31, 0xF8	; 248
    16dc:	d0 f3       	brcs	.-12     	; 0x16d2 <pow+0x42>
    16de:	10 c0       	rjmp	.+32     	; 0x1700 <pow+0x70>
    16e0:	ff 5f       	subi	r31, 0xFF	; 255
    16e2:	70 f4       	brcc	.+28     	; 0x1700 <pow+0x70>
    16e4:	a6 95       	lsr	r26
    16e6:	e0 f7       	brcc	.-8      	; 0x16e0 <pow+0x50>
    16e8:	f7 39       	cpi	r31, 0x97	; 151
    16ea:	50 f0       	brcs	.+20     	; 0x1700 <pow+0x70>
    16ec:	19 f0       	breq	.+6      	; 0x16f4 <pow+0x64>
    16ee:	ff 3a       	cpi	r31, 0xAF	; 175
    16f0:	38 f4       	brcc	.+14     	; 0x1700 <pow+0x70>
    16f2:	9f 77       	andi	r25, 0x7F	; 127
    16f4:	9f 93       	push	r25
    16f6:	0c d0       	rcall	.+24     	; 0x1710 <pow+0x80>
    16f8:	0f 90       	pop	r0
    16fa:	07 fc       	sbrc	r0, 7
    16fc:	90 58       	subi	r25, 0x80	; 128
    16fe:	08 95       	ret
    1700:	3e f0       	brts	.+14     	; 0x1710 <pow+0x80>
    1702:	18 cf       	rjmp	.-464    	; 0x1534 <__fp_nan>
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	80 e8       	ldi	r24, 0x80	; 128
    170a:	9f e3       	ldi	r25, 0x3F	; 63
    170c:	08 95       	ret
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	9f 77       	andi	r25, 0x7F	; 127
    1712:	5f 93       	push	r21
    1714:	4f 93       	push	r20
    1716:	3f 93       	push	r19
    1718:	2f 93       	push	r18
    171a:	9e d0       	rcall	.+316    	; 0x1858 <log>
    171c:	2f 91       	pop	r18
    171e:	3f 91       	pop	r19
    1720:	4f 91       	pop	r20
    1722:	5f 91       	pop	r21
    1724:	52 df       	rcall	.-348    	; 0x15ca <__mulsf3>
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <exp>
    1728:	19 f4       	brne	.+6      	; 0x1730 <pow+0xa0>
    172a:	0e f0       	brts	.+2      	; 0x172e <pow+0x9e>
    172c:	fd ce       	rjmp	.-518    	; 0x1528 <__fp_inf>
    172e:	46 cf       	rjmp	.-372    	; 0x15bc <__fp_zero>
    1730:	01 cf       	rjmp	.-510    	; 0x1534 <__fp_nan>

00001732 <exp>:
    1732:	2a df       	rcall	.-428    	; 0x1588 <__fp_splitA>
    1734:	c8 f3       	brcs	.-14     	; 0x1728 <pow+0x98>
    1736:	96 38       	cpi	r25, 0x86	; 134
    1738:	c0 f7       	brcc	.-16     	; 0x172a <pow+0x9a>
    173a:	07 f8       	bld	r0, 7
    173c:	0f 92       	push	r0
    173e:	e8 94       	clt
    1740:	2b e3       	ldi	r18, 0x3B	; 59
    1742:	3a ea       	ldi	r19, 0xAA	; 170
    1744:	48 eb       	ldi	r20, 0xB8	; 184
    1746:	5f e7       	ldi	r21, 0x7F	; 127
    1748:	4e df       	rcall	.-356    	; 0x15e6 <__mulsf3_pse>
    174a:	0f 92       	push	r0
    174c:	0f 92       	push	r0
    174e:	0f 92       	push	r0
    1750:	4d b7       	in	r20, 0x3d	; 61
    1752:	5e b7       	in	r21, 0x3e	; 62
    1754:	0f 92       	push	r0
    1756:	c0 d0       	rcall	.+384    	; 0x18d8 <modf>
    1758:	ee e2       	ldi	r30, 0x2E	; 46
    175a:	f1 e0       	ldi	r31, 0x01	; 1
    175c:	16 d0       	rcall	.+44     	; 0x178a <__fp_powser>
    175e:	4f 91       	pop	r20
    1760:	5f 91       	pop	r21
    1762:	ef 91       	pop	r30
    1764:	ff 91       	pop	r31
    1766:	e5 95       	asr	r30
    1768:	ee 1f       	adc	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	49 f0       	breq	.+18     	; 0x1780 <exp+0x4e>
    176e:	fe 57       	subi	r31, 0x7E	; 126
    1770:	e0 68       	ori	r30, 0x80	; 128
    1772:	44 27       	eor	r20, r20
    1774:	ee 0f       	add	r30, r30
    1776:	44 1f       	adc	r20, r20
    1778:	fa 95       	dec	r31
    177a:	e1 f7       	brne	.-8      	; 0x1774 <exp+0x42>
    177c:	41 95       	neg	r20
    177e:	55 0b       	sbc	r21, r21
    1780:	32 d0       	rcall	.+100    	; 0x17e6 <ldexp>
    1782:	0f 90       	pop	r0
    1784:	07 fe       	sbrs	r0, 7
    1786:	26 c0       	rjmp	.+76     	; 0x17d4 <inverse>
    1788:	08 95       	ret

0000178a <__fp_powser>:
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	1f 93       	push	r17
    1790:	0f 93       	push	r16
    1792:	ff 92       	push	r15
    1794:	ef 92       	push	r14
    1796:	df 92       	push	r13
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	68 94       	set
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <__fp_powser+0x20>
    17a0:	da 2e       	mov	r13, r26
    17a2:	ef 01       	movw	r28, r30
    17a4:	1e df       	rcall	.-452    	; 0x15e2 <__mulsf3x>
    17a6:	fe 01       	movw	r30, r28
    17a8:	e8 94       	clt
    17aa:	a5 91       	lpm	r26, Z+
    17ac:	25 91       	lpm	r18, Z+
    17ae:	35 91       	lpm	r19, Z+
    17b0:	45 91       	lpm	r20, Z+
    17b2:	55 91       	lpm	r21, Z+
    17b4:	ae f3       	brts	.-22     	; 0x17a0 <__fp_powser+0x16>
    17b6:	ef 01       	movw	r28, r30
    17b8:	59 dd       	rcall	.-1358   	; 0x126c <__addsf3x>
    17ba:	fe 01       	movw	r30, r28
    17bc:	97 01       	movw	r18, r14
    17be:	a8 01       	movw	r20, r16
    17c0:	da 94       	dec	r13
    17c2:	79 f7       	brne	.-34     	; 0x17a2 <__fp_powser+0x18>
    17c4:	df 90       	pop	r13
    17c6:	ef 90       	pop	r14
    17c8:	ff 90       	pop	r15
    17ca:	0f 91       	pop	r16
    17cc:	1f 91       	pop	r17
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <inverse>:
    17d4:	9b 01       	movw	r18, r22
    17d6:	ac 01       	movw	r20, r24
    17d8:	60 e0       	ldi	r22, 0x00	; 0
    17da:	70 e0       	ldi	r23, 0x00	; 0
    17dc:	80 e8       	ldi	r24, 0x80	; 128
    17de:	9f e3       	ldi	r25, 0x3F	; 63
    17e0:	9c cd       	rjmp	.-1224   	; 0x131a <__divsf3>
    17e2:	a2 ce       	rjmp	.-700    	; 0x1528 <__fp_inf>
    17e4:	ac c0       	rjmp	.+344    	; 0x193e <__fp_mpack>

000017e6 <ldexp>:
    17e6:	d0 de       	rcall	.-608    	; 0x1588 <__fp_splitA>
    17e8:	e8 f3       	brcs	.-6      	; 0x17e4 <inverse+0x10>
    17ea:	99 23       	and	r25, r25
    17ec:	d9 f3       	breq	.-10     	; 0x17e4 <inverse+0x10>
    17ee:	94 0f       	add	r25, r20
    17f0:	51 1d       	adc	r21, r1
    17f2:	bb f3       	brvs	.-18     	; 0x17e2 <inverse+0xe>
    17f4:	91 50       	subi	r25, 0x01	; 1
    17f6:	50 40       	sbci	r21, 0x00	; 0
    17f8:	94 f0       	brlt	.+36     	; 0x181e <ldexp+0x38>
    17fa:	59 f0       	breq	.+22     	; 0x1812 <ldexp+0x2c>
    17fc:	88 23       	and	r24, r24
    17fe:	32 f0       	brmi	.+12     	; 0x180c <ldexp+0x26>
    1800:	66 0f       	add	r22, r22
    1802:	77 1f       	adc	r23, r23
    1804:	88 1f       	adc	r24, r24
    1806:	91 50       	subi	r25, 0x01	; 1
    1808:	50 40       	sbci	r21, 0x00	; 0
    180a:	c1 f7       	brne	.-16     	; 0x17fc <ldexp+0x16>
    180c:	9e 3f       	cpi	r25, 0xFE	; 254
    180e:	51 05       	cpc	r21, r1
    1810:	44 f7       	brge	.-48     	; 0x17e2 <inverse+0xe>
    1812:	88 0f       	add	r24, r24
    1814:	91 1d       	adc	r25, r1
    1816:	96 95       	lsr	r25
    1818:	87 95       	ror	r24
    181a:	97 f9       	bld	r25, 7
    181c:	08 95       	ret
    181e:	5f 3f       	cpi	r21, 0xFF	; 255
    1820:	ac f0       	brlt	.+42     	; 0x184c <ldexp+0x66>
    1822:	98 3e       	cpi	r25, 0xE8	; 232
    1824:	9c f0       	brlt	.+38     	; 0x184c <ldexp+0x66>
    1826:	bb 27       	eor	r27, r27
    1828:	86 95       	lsr	r24
    182a:	77 95       	ror	r23
    182c:	67 95       	ror	r22
    182e:	b7 95       	ror	r27
    1830:	08 f4       	brcc	.+2      	; 0x1834 <ldexp+0x4e>
    1832:	b1 60       	ori	r27, 0x01	; 1
    1834:	93 95       	inc	r25
    1836:	c1 f7       	brne	.-16     	; 0x1828 <ldexp+0x42>
    1838:	bb 0f       	add	r27, r27
    183a:	58 f7       	brcc	.-42     	; 0x1812 <ldexp+0x2c>
    183c:	11 f4       	brne	.+4      	; 0x1842 <ldexp+0x5c>
    183e:	60 ff       	sbrs	r22, 0
    1840:	e8 cf       	rjmp	.-48     	; 0x1812 <ldexp+0x2c>
    1842:	6f 5f       	subi	r22, 0xFF	; 255
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	8f 4f       	sbci	r24, 0xFF	; 255
    1848:	9f 4f       	sbci	r25, 0xFF	; 255
    184a:	e3 cf       	rjmp	.-58     	; 0x1812 <ldexp+0x2c>
    184c:	b8 ce       	rjmp	.-656    	; 0x15be <__fp_szero>
    184e:	0e f0       	brts	.+2      	; 0x1852 <ldexp+0x6c>
    1850:	76 c0       	rjmp	.+236    	; 0x193e <__fp_mpack>
    1852:	70 ce       	rjmp	.-800    	; 0x1534 <__fp_nan>
    1854:	68 94       	set
    1856:	68 ce       	rjmp	.-816    	; 0x1528 <__fp_inf>

00001858 <log>:
    1858:	97 de       	rcall	.-722    	; 0x1588 <__fp_splitA>
    185a:	c8 f3       	brcs	.-14     	; 0x184e <ldexp+0x68>
    185c:	99 23       	and	r25, r25
    185e:	d1 f3       	breq	.-12     	; 0x1854 <ldexp+0x6e>
    1860:	c6 f3       	brts	.-16     	; 0x1852 <ldexp+0x6c>
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	1f 93       	push	r17
    1868:	0f 93       	push	r16
    186a:	ff 92       	push	r15
    186c:	c9 2f       	mov	r28, r25
    186e:	dd 27       	eor	r29, r29
    1870:	88 23       	and	r24, r24
    1872:	2a f0       	brmi	.+10     	; 0x187e <log+0x26>
    1874:	21 97       	sbiw	r28, 0x01	; 1
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	da f7       	brpl	.-10     	; 0x1874 <log+0x1c>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	5f eb       	ldi	r21, 0xBF	; 191
    1886:	9f e3       	ldi	r25, 0x3F	; 63
    1888:	88 39       	cpi	r24, 0x98	; 152
    188a:	20 f0       	brcs	.+8      	; 0x1894 <log+0x3c>
    188c:	80 3e       	cpi	r24, 0xE0	; 224
    188e:	30 f0       	brcs	.+12     	; 0x189c <log+0x44>
    1890:	21 96       	adiw	r28, 0x01	; 1
    1892:	8f 77       	andi	r24, 0x7F	; 127
    1894:	da dc       	rcall	.-1612   	; 0x124a <__addsf3>
    1896:	e6 e5       	ldi	r30, 0x56	; 86
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <log+0x4a>
    189c:	d6 dc       	rcall	.-1620   	; 0x124a <__addsf3>
    189e:	e3 e8       	ldi	r30, 0x83	; 131
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	73 df       	rcall	.-282    	; 0x178a <__fp_powser>
    18a4:	8b 01       	movw	r16, r22
    18a6:	be 01       	movw	r22, r28
    18a8:	ec 01       	movw	r28, r24
    18aa:	fb 2e       	mov	r15, r27
    18ac:	6f 57       	subi	r22, 0x7F	; 127
    18ae:	71 09       	sbc	r23, r1
    18b0:	75 95       	asr	r23
    18b2:	77 1f       	adc	r23, r23
    18b4:	88 0b       	sbc	r24, r24
    18b6:	99 0b       	sbc	r25, r25
    18b8:	9a dd       	rcall	.-1228   	; 0x13ee <__floatsisf>
    18ba:	28 e1       	ldi	r18, 0x18	; 24
    18bc:	32 e7       	ldi	r19, 0x72	; 114
    18be:	41 e3       	ldi	r20, 0x31	; 49
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	8f de       	rcall	.-738    	; 0x15e2 <__mulsf3x>
    18c4:	af 2d       	mov	r26, r15
    18c6:	98 01       	movw	r18, r16
    18c8:	ae 01       	movw	r20, r28
    18ca:	ff 90       	pop	r15
    18cc:	0f 91       	pop	r16
    18ce:	1f 91       	pop	r17
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	cb dc       	rcall	.-1642   	; 0x126c <__addsf3x>
    18d6:	3f ce       	rjmp	.-898    	; 0x1556 <__fp_round>

000018d8 <modf>:
    18d8:	fa 01       	movw	r30, r20
    18da:	dc 01       	movw	r26, r24
    18dc:	aa 0f       	add	r26, r26
    18de:	bb 1f       	adc	r27, r27
    18e0:	9b 01       	movw	r18, r22
    18e2:	ac 01       	movw	r20, r24
    18e4:	bf 57       	subi	r27, 0x7F	; 127
    18e6:	28 f4       	brcc	.+10     	; 0x18f2 <modf+0x1a>
    18e8:	22 27       	eor	r18, r18
    18ea:	33 27       	eor	r19, r19
    18ec:	44 27       	eor	r20, r20
    18ee:	50 78       	andi	r21, 0x80	; 128
    18f0:	1f c0       	rjmp	.+62     	; 0x1930 <modf+0x58>
    18f2:	b7 51       	subi	r27, 0x17	; 23
    18f4:	88 f4       	brcc	.+34     	; 0x1918 <modf+0x40>
    18f6:	ab 2f       	mov	r26, r27
    18f8:	00 24       	eor	r0, r0
    18fa:	46 95       	lsr	r20
    18fc:	37 95       	ror	r19
    18fe:	27 95       	ror	r18
    1900:	01 1c       	adc	r0, r1
    1902:	a3 95       	inc	r26
    1904:	d2 f3       	brmi	.-12     	; 0x18fa <modf+0x22>
    1906:	00 20       	and	r0, r0
    1908:	69 f0       	breq	.+26     	; 0x1924 <modf+0x4c>
    190a:	22 0f       	add	r18, r18
    190c:	33 1f       	adc	r19, r19
    190e:	44 1f       	adc	r20, r20
    1910:	b3 95       	inc	r27
    1912:	da f3       	brmi	.-10     	; 0x190a <modf+0x32>
    1914:	0d d0       	rcall	.+26     	; 0x1930 <modf+0x58>
    1916:	98 cc       	rjmp	.-1744   	; 0x1248 <__subsf3>
    1918:	61 30       	cpi	r22, 0x01	; 1
    191a:	71 05       	cpc	r23, r1
    191c:	a0 e8       	ldi	r26, 0x80	; 128
    191e:	8a 07       	cpc	r24, r26
    1920:	b9 46       	sbci	r27, 0x69	; 105
    1922:	30 f4       	brcc	.+12     	; 0x1930 <modf+0x58>
    1924:	9b 01       	movw	r18, r22
    1926:	ac 01       	movw	r20, r24
    1928:	66 27       	eor	r22, r22
    192a:	77 27       	eor	r23, r23
    192c:	88 27       	eor	r24, r24
    192e:	90 78       	andi	r25, 0x80	; 128
    1930:	30 96       	adiw	r30, 0x00	; 0
    1932:	21 f0       	breq	.+8      	; 0x193c <modf+0x64>
    1934:	20 83       	st	Z, r18
    1936:	31 83       	std	Z+1, r19	; 0x01
    1938:	42 83       	std	Z+2, r20	; 0x02
    193a:	53 83       	std	Z+3, r21	; 0x03
    193c:	08 95       	ret

0000193e <__fp_mpack>:
    193e:	9f 3f       	cpi	r25, 0xFF	; 255
    1940:	31 f0       	breq	.+12     	; 0x194e <__fp_mpack_finite+0xc>

00001942 <__fp_mpack_finite>:
    1942:	91 50       	subi	r25, 0x01	; 1
    1944:	20 f4       	brcc	.+8      	; 0x194e <__fp_mpack_finite+0xc>
    1946:	87 95       	ror	r24
    1948:	77 95       	ror	r23
    194a:	67 95       	ror	r22
    194c:	b7 95       	ror	r27
    194e:	88 0f       	add	r24, r24
    1950:	91 1d       	adc	r25, r1
    1952:	96 95       	lsr	r25
    1954:	87 95       	ror	r24
    1956:	97 f9       	bld	r25, 7
    1958:	08 95       	ret

0000195a <__tablejump2__>:
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31

0000195e <__tablejump__>:
    195e:	05 90       	lpm	r0, Z+
    1960:	f4 91       	lpm	r31, Z
    1962:	e0 2d       	mov	r30, r0
    1964:	09 94       	ijmp

00001966 <__ashldi3>:
    1966:	0f 93       	push	r16
    1968:	08 30       	cpi	r16, 0x08	; 8
    196a:	90 f0       	brcs	.+36     	; 0x1990 <__ashldi3+0x2a>
    196c:	98 2f       	mov	r25, r24
    196e:	87 2f       	mov	r24, r23
    1970:	76 2f       	mov	r23, r22
    1972:	65 2f       	mov	r22, r21
    1974:	54 2f       	mov	r21, r20
    1976:	43 2f       	mov	r20, r19
    1978:	32 2f       	mov	r19, r18
    197a:	22 27       	eor	r18, r18
    197c:	08 50       	subi	r16, 0x08	; 8
    197e:	f4 cf       	rjmp	.-24     	; 0x1968 <__ashldi3+0x2>
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	44 1f       	adc	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	66 1f       	adc	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 95       	dec	r16
    1992:	b2 f7       	brpl	.-20     	; 0x1980 <__ashldi3+0x1a>
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <__adddi3>:
    1998:	2a 0d       	add	r18, r10
    199a:	3b 1d       	adc	r19, r11
    199c:	4c 1d       	adc	r20, r12
    199e:	5d 1d       	adc	r21, r13
    19a0:	6e 1d       	adc	r22, r14
    19a2:	7f 1d       	adc	r23, r15
    19a4:	80 1f       	adc	r24, r16
    19a6:	91 1f       	adc	r25, r17
    19a8:	08 95       	ret

000019aa <__adddi3_s8>:
    19aa:	00 24       	eor	r0, r0
    19ac:	a7 fd       	sbrc	r26, 7
    19ae:	00 94       	com	r0
    19b0:	2a 0f       	add	r18, r26
    19b2:	30 1d       	adc	r19, r0
    19b4:	40 1d       	adc	r20, r0
    19b6:	50 1d       	adc	r21, r0
    19b8:	60 1d       	adc	r22, r0
    19ba:	70 1d       	adc	r23, r0
    19bc:	80 1d       	adc	r24, r0
    19be:	90 1d       	adc	r25, r0
    19c0:	08 95       	ret

000019c2 <__subdi3>:
    19c2:	2a 19       	sub	r18, r10
    19c4:	3b 09       	sbc	r19, r11
    19c6:	4c 09       	sbc	r20, r12
    19c8:	5d 09       	sbc	r21, r13
    19ca:	6e 09       	sbc	r22, r14
    19cc:	7f 09       	sbc	r23, r15
    19ce:	80 0b       	sbc	r24, r16
    19d0:	91 0b       	sbc	r25, r17
    19d2:	08 95       	ret

000019d4 <malloc>:
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	91 05       	cpc	r25, r1
    19dc:	10 f4       	brcc	.+4      	; 0x19e2 <malloc+0xe>
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	e0 91 47 01 	lds	r30, 0x0147
    19e6:	f0 91 48 01 	lds	r31, 0x0148
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a0 e0       	ldi	r26, 0x00	; 0
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	30 97       	sbiw	r30, 0x00	; 0
    19f4:	39 f1       	breq	.+78     	; 0x1a44 <malloc+0x70>
    19f6:	40 81       	ld	r20, Z
    19f8:	51 81       	ldd	r21, Z+1	; 0x01
    19fa:	48 17       	cp	r20, r24
    19fc:	59 07       	cpc	r21, r25
    19fe:	b8 f0       	brcs	.+46     	; 0x1a2e <malloc+0x5a>
    1a00:	48 17       	cp	r20, r24
    1a02:	59 07       	cpc	r21, r25
    1a04:	71 f4       	brne	.+28     	; 0x1a22 <malloc+0x4e>
    1a06:	82 81       	ldd	r24, Z+2	; 0x02
    1a08:	93 81       	ldd	r25, Z+3	; 0x03
    1a0a:	10 97       	sbiw	r26, 0x00	; 0
    1a0c:	29 f0       	breq	.+10     	; 0x1a18 <malloc+0x44>
    1a0e:	13 96       	adiw	r26, 0x03	; 3
    1a10:	9c 93       	st	X, r25
    1a12:	8e 93       	st	-X, r24
    1a14:	12 97       	sbiw	r26, 0x02	; 2
    1a16:	2c c0       	rjmp	.+88     	; 0x1a70 <malloc+0x9c>
    1a18:	90 93 48 01 	sts	0x0148, r25
    1a1c:	80 93 47 01 	sts	0x0147, r24
    1a20:	27 c0       	rjmp	.+78     	; 0x1a70 <malloc+0x9c>
    1a22:	21 15       	cp	r18, r1
    1a24:	31 05       	cpc	r19, r1
    1a26:	31 f0       	breq	.+12     	; 0x1a34 <malloc+0x60>
    1a28:	42 17       	cp	r20, r18
    1a2a:	53 07       	cpc	r21, r19
    1a2c:	18 f0       	brcs	.+6      	; 0x1a34 <malloc+0x60>
    1a2e:	a9 01       	movw	r20, r18
    1a30:	db 01       	movw	r26, r22
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <malloc+0x62>
    1a34:	ef 01       	movw	r28, r30
    1a36:	9a 01       	movw	r18, r20
    1a38:	bd 01       	movw	r22, r26
    1a3a:	df 01       	movw	r26, r30
    1a3c:	02 80       	ldd	r0, Z+2	; 0x02
    1a3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a40:	e0 2d       	mov	r30, r0
    1a42:	d7 cf       	rjmp	.-82     	; 0x19f2 <malloc+0x1e>
    1a44:	21 15       	cp	r18, r1
    1a46:	31 05       	cpc	r19, r1
    1a48:	f9 f0       	breq	.+62     	; 0x1a88 <malloc+0xb4>
    1a4a:	28 1b       	sub	r18, r24
    1a4c:	39 0b       	sbc	r19, r25
    1a4e:	24 30       	cpi	r18, 0x04	; 4
    1a50:	31 05       	cpc	r19, r1
    1a52:	80 f4       	brcc	.+32     	; 0x1a74 <malloc+0xa0>
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	61 15       	cp	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	21 f0       	breq	.+8      	; 0x1a66 <malloc+0x92>
    1a5e:	fb 01       	movw	r30, r22
    1a60:	93 83       	std	Z+3, r25	; 0x03
    1a62:	82 83       	std	Z+2, r24	; 0x02
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <malloc+0x9a>
    1a66:	90 93 48 01 	sts	0x0148, r25
    1a6a:	80 93 47 01 	sts	0x0147, r24
    1a6e:	fe 01       	movw	r30, r28
    1a70:	32 96       	adiw	r30, 0x02	; 2
    1a72:	44 c0       	rjmp	.+136    	; 0x1afc <malloc+0x128>
    1a74:	fe 01       	movw	r30, r28
    1a76:	e2 0f       	add	r30, r18
    1a78:	f3 1f       	adc	r31, r19
    1a7a:	81 93       	st	Z+, r24
    1a7c:	91 93       	st	Z+, r25
    1a7e:	22 50       	subi	r18, 0x02	; 2
    1a80:	31 09       	sbc	r19, r1
    1a82:	39 83       	std	Y+1, r19	; 0x01
    1a84:	28 83       	st	Y, r18
    1a86:	3a c0       	rjmp	.+116    	; 0x1afc <malloc+0x128>
    1a88:	20 91 45 01 	lds	r18, 0x0145
    1a8c:	30 91 46 01 	lds	r19, 0x0146
    1a90:	23 2b       	or	r18, r19
    1a92:	41 f4       	brne	.+16     	; 0x1aa4 <malloc+0xd0>
    1a94:	20 91 02 01 	lds	r18, 0x0102
    1a98:	30 91 03 01 	lds	r19, 0x0103
    1a9c:	30 93 46 01 	sts	0x0146, r19
    1aa0:	20 93 45 01 	sts	0x0145, r18
    1aa4:	20 91 00 01 	lds	r18, 0x0100
    1aa8:	30 91 01 01 	lds	r19, 0x0101
    1aac:	21 15       	cp	r18, r1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	41 f4       	brne	.+16     	; 0x1ac2 <malloc+0xee>
    1ab2:	2d b7       	in	r18, 0x3d	; 61
    1ab4:	3e b7       	in	r19, 0x3e	; 62
    1ab6:	40 91 04 01 	lds	r20, 0x0104
    1aba:	50 91 05 01 	lds	r21, 0x0105
    1abe:	24 1b       	sub	r18, r20
    1ac0:	35 0b       	sbc	r19, r21
    1ac2:	e0 91 45 01 	lds	r30, 0x0145
    1ac6:	f0 91 46 01 	lds	r31, 0x0146
    1aca:	e2 17       	cp	r30, r18
    1acc:	f3 07       	cpc	r31, r19
    1ace:	a0 f4       	brcc	.+40     	; 0x1af8 <malloc+0x124>
    1ad0:	2e 1b       	sub	r18, r30
    1ad2:	3f 0b       	sbc	r19, r31
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	78 f0       	brcs	.+30     	; 0x1af8 <malloc+0x124>
    1ada:	ac 01       	movw	r20, r24
    1adc:	4e 5f       	subi	r20, 0xFE	; 254
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	24 17       	cp	r18, r20
    1ae2:	35 07       	cpc	r19, r21
    1ae4:	48 f0       	brcs	.+18     	; 0x1af8 <malloc+0x124>
    1ae6:	4e 0f       	add	r20, r30
    1ae8:	5f 1f       	adc	r21, r31
    1aea:	50 93 46 01 	sts	0x0146, r21
    1aee:	40 93 45 01 	sts	0x0145, r20
    1af2:	81 93       	st	Z+, r24
    1af4:	91 93       	st	Z+, r25
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <malloc+0x128>
    1af8:	e0 e0       	ldi	r30, 0x00	; 0
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	cf 01       	movw	r24, r30
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <free>:
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <free+0xa>
    1b0c:	87 c0       	rjmp	.+270    	; 0x1c1c <free+0x118>
    1b0e:	fc 01       	movw	r30, r24
    1b10:	32 97       	sbiw	r30, 0x02	; 2
    1b12:	13 82       	std	Z+3, r1	; 0x03
    1b14:	12 82       	std	Z+2, r1	; 0x02
    1b16:	c0 91 47 01 	lds	r28, 0x0147
    1b1a:	d0 91 48 01 	lds	r29, 0x0148
    1b1e:	20 97       	sbiw	r28, 0x00	; 0
    1b20:	81 f4       	brne	.+32     	; 0x1b42 <free+0x3e>
    1b22:	20 81       	ld	r18, Z
    1b24:	31 81       	ldd	r19, Z+1	; 0x01
    1b26:	28 0f       	add	r18, r24
    1b28:	39 1f       	adc	r19, r25
    1b2a:	80 91 45 01 	lds	r24, 0x0145
    1b2e:	90 91 46 01 	lds	r25, 0x0146
    1b32:	82 17       	cp	r24, r18
    1b34:	93 07       	cpc	r25, r19
    1b36:	79 f5       	brne	.+94     	; 0x1b96 <free+0x92>
    1b38:	f0 93 46 01 	sts	0x0146, r31
    1b3c:	e0 93 45 01 	sts	0x0145, r30
    1b40:	6d c0       	rjmp	.+218    	; 0x1c1c <free+0x118>
    1b42:	de 01       	movw	r26, r28
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	ae 17       	cp	r26, r30
    1b4a:	bf 07       	cpc	r27, r31
    1b4c:	50 f4       	brcc	.+20     	; 0x1b62 <free+0x5e>
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	4d 91       	ld	r20, X+
    1b52:	5c 91       	ld	r21, X
    1b54:	13 97       	sbiw	r26, 0x03	; 3
    1b56:	9d 01       	movw	r18, r26
    1b58:	41 15       	cp	r20, r1
    1b5a:	51 05       	cpc	r21, r1
    1b5c:	09 f1       	breq	.+66     	; 0x1ba0 <free+0x9c>
    1b5e:	da 01       	movw	r26, r20
    1b60:	f3 cf       	rjmp	.-26     	; 0x1b48 <free+0x44>
    1b62:	b3 83       	std	Z+3, r27	; 0x03
    1b64:	a2 83       	std	Z+2, r26	; 0x02
    1b66:	40 81       	ld	r20, Z
    1b68:	51 81       	ldd	r21, Z+1	; 0x01
    1b6a:	84 0f       	add	r24, r20
    1b6c:	95 1f       	adc	r25, r21
    1b6e:	8a 17       	cp	r24, r26
    1b70:	9b 07       	cpc	r25, r27
    1b72:	71 f4       	brne	.+28     	; 0x1b90 <free+0x8c>
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	11 97       	sbiw	r26, 0x01	; 1
    1b7a:	84 0f       	add	r24, r20
    1b7c:	95 1f       	adc	r25, r21
    1b7e:	02 96       	adiw	r24, 0x02	; 2
    1b80:	91 83       	std	Z+1, r25	; 0x01
    1b82:	80 83       	st	Z, r24
    1b84:	12 96       	adiw	r26, 0x02	; 2
    1b86:	8d 91       	ld	r24, X+
    1b88:	9c 91       	ld	r25, X
    1b8a:	13 97       	sbiw	r26, 0x03	; 3
    1b8c:	93 83       	std	Z+3, r25	; 0x03
    1b8e:	82 83       	std	Z+2, r24	; 0x02
    1b90:	21 15       	cp	r18, r1
    1b92:	31 05       	cpc	r19, r1
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <free+0x9c>
    1b96:	f0 93 48 01 	sts	0x0148, r31
    1b9a:	e0 93 47 01 	sts	0x0147, r30
    1b9e:	3e c0       	rjmp	.+124    	; 0x1c1c <free+0x118>
    1ba0:	d9 01       	movw	r26, r18
    1ba2:	13 96       	adiw	r26, 0x03	; 3
    1ba4:	fc 93       	st	X, r31
    1ba6:	ee 93       	st	-X, r30
    1ba8:	12 97       	sbiw	r26, 0x02	; 2
    1baa:	4d 91       	ld	r20, X+
    1bac:	5d 91       	ld	r21, X+
    1bae:	a4 0f       	add	r26, r20
    1bb0:	b5 1f       	adc	r27, r21
    1bb2:	ea 17       	cp	r30, r26
    1bb4:	fb 07       	cpc	r31, r27
    1bb6:	79 f4       	brne	.+30     	; 0x1bd6 <free+0xd2>
    1bb8:	80 81       	ld	r24, Z
    1bba:	91 81       	ldd	r25, Z+1	; 0x01
    1bbc:	84 0f       	add	r24, r20
    1bbe:	95 1f       	adc	r25, r21
    1bc0:	02 96       	adiw	r24, 0x02	; 2
    1bc2:	d9 01       	movw	r26, r18
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	9c 93       	st	X, r25
    1bc8:	8e 93       	st	-X, r24
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	13 96       	adiw	r26, 0x03	; 3
    1bd0:	9c 93       	st	X, r25
    1bd2:	8e 93       	st	-X, r24
    1bd4:	12 97       	sbiw	r26, 0x02	; 2
    1bd6:	e0 e0       	ldi	r30, 0x00	; 0
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <free+0xe4>
    1be2:	fe 01       	movw	r30, r28
    1be4:	ec 01       	movw	r28, r24
    1be6:	f9 cf       	rjmp	.-14     	; 0x1bda <free+0xd6>
    1be8:	ce 01       	movw	r24, r28
    1bea:	02 96       	adiw	r24, 0x02	; 2
    1bec:	28 81       	ld	r18, Y
    1bee:	39 81       	ldd	r19, Y+1	; 0x01
    1bf0:	82 0f       	add	r24, r18
    1bf2:	93 1f       	adc	r25, r19
    1bf4:	20 91 45 01 	lds	r18, 0x0145
    1bf8:	30 91 46 01 	lds	r19, 0x0146
    1bfc:	28 17       	cp	r18, r24
    1bfe:	39 07       	cpc	r19, r25
    1c00:	69 f4       	brne	.+26     	; 0x1c1c <free+0x118>
    1c02:	30 97       	sbiw	r30, 0x00	; 0
    1c04:	29 f4       	brne	.+10     	; 0x1c10 <free+0x10c>
    1c06:	10 92 48 01 	sts	0x0148, r1
    1c0a:	10 92 47 01 	sts	0x0147, r1
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <free+0x110>
    1c10:	13 82       	std	Z+3, r1	; 0x03
    1c12:	12 82       	std	Z+2, r1	; 0x02
    1c14:	d0 93 46 01 	sts	0x0146, r29
    1c18:	c0 93 45 01 	sts	0x0145, r28
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
