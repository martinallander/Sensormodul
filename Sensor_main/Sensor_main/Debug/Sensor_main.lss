
Sensor_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000133a  000013ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800108  00800108  000013d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000239d  00000000  00000000  000015ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092a  00000000  00000000  0000398b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000113b  00000000  00000000  000042b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  000053f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000682  00000000  00000000  00005ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bd5  00000000  00000000  00006142  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00007d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d7 c0       	rjmp	.+430    	; 0x1b0 <__ctors_end>
       2:	00 00       	nop
       4:	f3 c0       	rjmp	.+486    	; 0x1ec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c0       	rjmp	.+482    	; 0x1ec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c0       	rjmp	.+478    	; 0x1ec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c0       	rjmp	.+474    	; 0x1ec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c0       	rjmp	.+470    	; 0x1ec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c0       	rjmp	.+466    	; 0x1ec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c0       	rjmp	.+462    	; 0x1ec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c0       	rjmp	.+458    	; 0x1ec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c0       	rjmp	.+454    	; 0x1ec <__bad_interrupt>
      26:	00 00       	nop
      28:	e1 c0       	rjmp	.+450    	; 0x1ec <__bad_interrupt>
      2a:	00 00       	nop
      2c:	df c0       	rjmp	.+446    	; 0x1ec <__bad_interrupt>
      2e:	00 00       	nop
      30:	dd c0       	rjmp	.+442    	; 0x1ec <__bad_interrupt>
      32:	00 00       	nop
      34:	db c0       	rjmp	.+438    	; 0x1ec <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c0       	rjmp	.+434    	; 0x1ec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	54 c4       	rjmp	.+2216   	; 0x8e6 <__vector_15>
      3e:	00 00       	nop
      40:	d5 c0       	rjmp	.+426    	; 0x1ec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c0       	rjmp	.+422    	; 0x1ec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c0       	rjmp	.+418    	; 0x1ec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c3       	rjmp	.+1912   	; 0x7c6 <__vector_19>
      4e:	00 00       	nop
      50:	cd c0       	rjmp	.+410    	; 0x1ec <__bad_interrupt>
      52:	00 00       	nop
      54:	cb c0       	rjmp	.+406    	; 0x1ec <__bad_interrupt>
      56:	00 00       	nop
      58:	c9 c0       	rjmp	.+402    	; 0x1ec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c0       	rjmp	.+398    	; 0x1ec <__bad_interrupt>
      5e:	00 00       	nop
      60:	e6 c3       	rjmp	.+1996   	; 0x82e <__vector_24>
      62:	00 00       	nop
      64:	c3 c0       	rjmp	.+390    	; 0x1ec <__bad_interrupt>
      66:	00 00       	nop
      68:	d8 c0       	rjmp	.+432    	; 0x21a <__vector_26>
      6a:	00 00       	nop
      6c:	bf c0       	rjmp	.+382    	; 0x1ec <__bad_interrupt>
      6e:	00 00       	nop
      70:	bd c0       	rjmp	.+378    	; 0x1ec <__bad_interrupt>
      72:	00 00       	nop
      74:	bb c0       	rjmp	.+374    	; 0x1ec <__bad_interrupt>
      76:	00 00       	nop
      78:	b9 c0       	rjmp	.+370    	; 0x1ec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c0       	rjmp	.+366    	; 0x1ec <__bad_interrupt>
      7e:	00 00       	nop
      80:	b5 c0       	rjmp	.+362    	; 0x1ec <__bad_interrupt>
      82:	00 00       	nop
      84:	b3 c0       	rjmp	.+358    	; 0x1ec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c0       	rjmp	.+354    	; 0x1ec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2d 01       	movw	r4, r26
      8e:	76 01       	movw	r14, r12
      90:	76 01       	movw	r14, r12
      92:	76 01       	movw	r14, r12
      94:	76 01       	movw	r14, r12
      96:	76 01       	movw	r14, r12
      98:	76 01       	movw	r14, r12
      9a:	76 01       	movw	r14, r12
      9c:	35 01       	movw	r6, r10
      9e:	76 01       	movw	r14, r12
      a0:	76 01       	movw	r14, r12
      a2:	76 01       	movw	r14, r12
      a4:	76 01       	movw	r14, r12
      a6:	76 01       	movw	r14, r12
      a8:	76 01       	movw	r14, r12
      aa:	76 01       	movw	r14, r12
      ac:	3e 01       	movw	r6, r28
      ae:	76 01       	movw	r14, r12
      b0:	76 01       	movw	r14, r12
      b2:	76 01       	movw	r14, r12
      b4:	76 01       	movw	r14, r12
      b6:	76 01       	movw	r14, r12
      b8:	76 01       	movw	r14, r12
      ba:	76 01       	movw	r14, r12
      bc:	46 01       	movw	r8, r12
      be:	76 01       	movw	r14, r12
      c0:	76 01       	movw	r14, r12
      c2:	76 01       	movw	r14, r12
      c4:	76 01       	movw	r14, r12
      c6:	76 01       	movw	r14, r12
      c8:	76 01       	movw	r14, r12
      ca:	76 01       	movw	r14, r12
      cc:	48 01       	movw	r8, r16
      ce:	76 01       	movw	r14, r12
      d0:	76 01       	movw	r14, r12
      d2:	76 01       	movw	r14, r12
      d4:	76 01       	movw	r14, r12
      d6:	76 01       	movw	r14, r12
      d8:	76 01       	movw	r14, r12
      da:	76 01       	movw	r14, r12
      dc:	76 01       	movw	r14, r12
      de:	76 01       	movw	r14, r12
      e0:	76 01       	movw	r14, r12
      e2:	76 01       	movw	r14, r12
      e4:	76 01       	movw	r14, r12
      e6:	76 01       	movw	r14, r12
      e8:	76 01       	movw	r14, r12
      ea:	76 01       	movw	r14, r12
      ec:	76 01       	movw	r14, r12
      ee:	76 01       	movw	r14, r12
      f0:	76 01       	movw	r14, r12
      f2:	76 01       	movw	r14, r12
      f4:	76 01       	movw	r14, r12
      f6:	76 01       	movw	r14, r12
      f8:	76 01       	movw	r14, r12
      fa:	76 01       	movw	r14, r12
      fc:	67 01       	movw	r12, r14
      fe:	76 01       	movw	r14, r12
     100:	76 01       	movw	r14, r12
     102:	76 01       	movw	r14, r12
     104:	76 01       	movw	r14, r12
     106:	76 01       	movw	r14, r12
     108:	76 01       	movw	r14, r12
     10a:	76 01       	movw	r14, r12
     10c:	76 01       	movw	r14, r12
     10e:	76 01       	movw	r14, r12
     110:	76 01       	movw	r14, r12
     112:	76 01       	movw	r14, r12
     114:	76 01       	movw	r14, r12
     116:	76 01       	movw	r14, r12
     118:	76 01       	movw	r14, r12
     11a:	76 01       	movw	r14, r12
     11c:	71 01       	movw	r14, r2
     11e:	76 01       	movw	r14, r12
     120:	76 01       	movw	r14, r12
     122:	76 01       	movw	r14, r12
     124:	76 01       	movw	r14, r12
     126:	76 01       	movw	r14, r12
     128:	76 01       	movw	r14, r12
     12a:	76 01       	movw	r14, r12
     12c:	6b 01       	movw	r12, r22
     12e:	07 63       	ori	r16, 0x37	; 55
     130:	42 36       	cpi	r20, 0x62	; 98
     132:	b7 9b       	sbis	0x16, 7	; 22
     134:	d8 a7       	std	Y+40, r29	; 0x28
     136:	1a 39       	cpi	r17, 0x9A	; 154
     138:	68 56       	subi	r22, 0x68	; 104
     13a:	18 ae       	std	Y+56, r1	; 0x38
     13c:	ba ab       	std	Y+50, r27	; 0x32
     13e:	55 8c       	ldd	r5, Z+29	; 0x1d
     140:	1d 3c       	cpi	r17, 0xCD	; 205
     142:	b7 cc       	rjmp	.-1682   	; 0xfffffab2 <__eeprom_end+0xff7efab2>
     144:	57 63       	ori	r21, 0x37	; 55
     146:	bd 6d       	ori	r27, 0xDD	; 221
     148:	ed fd       	.word	0xfded	; ????
     14a:	75 3e       	cpi	r23, 0xE5	; 229
     14c:	f6 17       	cp	r31, r22
     14e:	72 31       	cpi	r23, 0x12	; 18
     150:	bf 00       	.word	0x00bf	; ????
     152:	00 00       	nop
     154:	80 3f       	cpi	r24, 0xF0	; 240
     156:	08 00       	.word	0x0008	; ????
     158:	00 00       	nop
     15a:	be 92       	st	-X, r11
     15c:	24 49       	sbci	r18, 0x94	; 148
     15e:	12 3e       	cpi	r17, 0xE2	; 226
     160:	ab aa       	std	Y+51, r10	; 0x33
     162:	aa 2a       	or	r10, r26
     164:	be cd       	rjmp	.-1156   	; 0xfffffce2 <__eeprom_end+0xff7efce2>
     166:	cc cc       	rjmp	.-1640   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     168:	4c 3e       	cpi	r20, 0xEC	; 236
     16a:	00 00       	nop
     16c:	00 80       	ld	r0, Z
     16e:	be ab       	std	Y+54, r27	; 0x36
     170:	aa aa       	std	Y+50, r10	; 0x32
     172:	aa 3e       	cpi	r26, 0xEA	; 234
     174:	00 00       	nop
     176:	00 00       	nop
     178:	bf 00       	.word	0x00bf	; ????
     17a:	00 00       	nop
     17c:	80 3f       	cpi	r24, 0xF0	; 240
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	00 08       	sbc	r0, r0
     184:	41 78       	andi	r20, 0x81	; 129
     186:	d3 bb       	out	0x13, r29	; 19
     188:	43 87       	std	Z+11, r20	; 0x0b
     18a:	d1 13       	cpse	r29, r17
     18c:	3d 19       	sub	r19, r13
     18e:	0e 3c       	cpi	r16, 0xCE	; 206
     190:	c3 bd       	out	0x23, r28	; 35
     192:	42 82       	std	Z+2, r4	; 0x02
     194:	ad 2b       	or	r26, r29
     196:	3e 68       	ori	r19, 0x8E	; 142
     198:	ec 82       	std	Y+4, r14	; 0x04
     19a:	76 be       	out	0x36, r7	; 54
     19c:	d9 8f       	std	Y+25, r29	; 0x19
     19e:	e1 a9       	ldd	r30, Z+49	; 0x31
     1a0:	3e 4c       	sbci	r19, 0xCE	; 206
     1a2:	80 ef       	ldi	r24, 0xF0	; 240
     1a4:	ff be       	out	0x3f, r15	; 63
     1a6:	01 c4       	rjmp	.+2050   	; 0x9aa <timer_1_init+0x48>
     1a8:	ff 7f       	andi	r31, 0xFF	; 255
     1aa:	3f 00       	.word	0x003f	; ????
     1ac:	00 00       	nop
	...

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf ef       	ldi	r28, 0xFF	; 255
     1b6:	d0 e4       	ldi	r29, 0x40	; 64
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	11 e0       	ldi	r17, 0x01	; 1
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	b1 e0       	ldi	r27, 0x01	; 1
     1c2:	ea e3       	ldi	r30, 0x3A	; 58
     1c4:	f3 e1       	ldi	r31, 0x13	; 19
     1c6:	00 e0       	ldi	r16, 0x00	; 0
     1c8:	0b bf       	out	0x3b, r16	; 59
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <__do_copy_data+0x14>
     1cc:	07 90       	elpm	r0, Z+
     1ce:	0d 92       	st	X+, r0
     1d0:	a8 30       	cpi	r26, 0x08	; 8
     1d2:	b1 07       	cpc	r27, r17
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <__do_copy_data+0x10>

000001d6 <__do_clear_bss>:
     1d6:	21 e0       	ldi	r18, 0x01	; 1
     1d8:	a8 e0       	ldi	r26, 0x08	; 8
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <.do_clear_bss_start>

000001de <.do_clear_bss_loop>:
     1de:	1d 92       	st	X+, r1

000001e0 <.do_clear_bss_start>:
     1e0:	a9 32       	cpi	r26, 0x29	; 41
     1e2:	b2 07       	cpc	r27, r18
     1e4:	e1 f7       	brne	.-8      	; 0x1de <.do_clear_bss_loop>
     1e6:	62 d3       	rcall	.+1732   	; 0x8ac <main>
     1e8:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <_exit>

000001ec <__bad_interrupt>:
     1ec:	09 cf       	rjmp	.-494    	; 0x0 <__vectors>

000001ee <i2c_init>:
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     1ee:	10 92 b9 00 	sts	0x00B9, r1
     1f2:	82 e9       	ldi	r24, 0x92	; 146
     1f4:	80 93 b8 00 	sts	0x00B8, r24
     1f8:	85 e0       	ldi	r24, 0x05	; 5
     1fa:	80 93 bc 00 	sts	0x00BC, r24
     1fe:	08 95       	ret

00000200 <i2c_start>:
     200:	85 ea       	ldi	r24, 0xA5	; 165
     202:	80 93 bc 00 	sts	0x00BC, r24
     206:	10 92 07 01 	sts	0x0107, r1
     20a:	08 95       	ret

0000020c <i2c_stop>:
     20c:	85 e9       	ldi	r24, 0x95	; 149
     20e:	80 93 bc 00 	sts	0x00BC, r24
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 07 01 	sts	0x0107, r24
     218:	08 95       	ret

0000021a <__vector_26>:
}

ISR(TWI_vect)
{
     21a:	1f 92       	push	r1
     21c:	0f 92       	push	r0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	0f 92       	push	r0
     222:	11 24       	eor	r1, r1
     224:	0b b6       	in	r0, 0x3b	; 59
     226:	0f 92       	push	r0
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	ef 93       	push	r30
     23e:	ff 93       	push	r31
	uint8_t status = (TWSR & 0xF8);
     240:	80 91 b9 00 	lds	r24, 0x00B9
     244:	88 7f       	andi	r24, 0xF8	; 248
	switch (status)
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	fc 01       	movw	r30, r24
     24a:	38 97       	sbiw	r30, 0x08	; 8
     24c:	e1 35       	cpi	r30, 0x51	; 81
     24e:	f1 05       	cpc	r31, r1
     250:	08 f0       	brcs	.+2      	; 0x254 <__vector_26+0x3a>
     252:	4c c0       	rjmp	.+152    	; 0x2ec <__vector_26+0xd2>
     254:	ea 5b       	subi	r30, 0xBA	; 186
     256:	ff 4f       	sbci	r31, 0xFF	; 255
     258:	35 c7       	rjmp	.+3690   	; 0x10c4 <__tablejump2__>
	{
		case TW_START:						 //0x08
			i2c_send_data(device_addr + I2C_WRITE);
     25a:	80 91 0d 01 	lds	r24, 0x010D
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     25e:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     262:	85 e8       	ldi	r24, 0x85	; 133
     264:	80 93 bc 00 	sts	0x00BC, r24
     268:	41 c0       	rjmp	.+130    	; 0x2ec <__vector_26+0xd2>
	{
		case TW_START:						 //0x08
			i2c_send_data(device_addr + I2C_WRITE);
			break;
		case TW_REP_START:					 //0x10
			i2c_send_data(device_addr + I2C_READ);
     26a:	80 91 0d 01 	lds	r24, 0x010D
     26e:	8f 5f       	subi	r24, 0xFF	; 255
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     270:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     274:	85 e8       	ldi	r24, 0x85	; 133
     276:	80 93 bc 00 	sts	0x00BC, r24
     27a:	38 c0       	rjmp	.+112    	; 0x2ec <__vector_26+0xd2>
			break;
		case TW_REP_START:					 //0x10
			i2c_send_data(device_addr + I2C_READ);
			break;
		case TW_MT_SLA_ACK:					 //3
			i2c_send_data(register_addr);		 //load the register we want to handle
     27c:	80 91 0e 01 	lds	r24, 0x010E
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     280:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     284:	85 e8       	ldi	r24, 0x85	; 133
     286:	80 93 bc 00 	sts	0x00BC, r24
     28a:	30 c0       	rjmp	.+96     	; 0x2ec <__vector_26+0xd2>
			break;
		case TW_MT_SLA_ACK:					 //3
			i2c_send_data(register_addr);		 //load the register we want to handle
			break;
		case TW_MT_SLA_NACK:				 //4
			i2c_stop();	
     28c:	bf df       	rcall	.-130    	; 0x20c <i2c_stop>
			break;
     28e:	2e c0       	rjmp	.+92     	; 0x2ec <__vector_26+0xd2>
		case TW_MT_DATA_ACK:				 //5
			if(write_to_slave)
     290:	80 91 06 01 	lds	r24, 0x0106
     294:	88 23       	and	r24, r24
     296:	c9 f0       	breq	.+50     	; 0x2ca <__vector_26+0xb0>
			{
				if(n_o_writes == 0)
     298:	80 91 0a 01 	lds	r24, 0x010A
     29c:	90 91 0b 01 	lds	r25, 0x010B
     2a0:	89 2b       	or	r24, r25
     2a2:	11 f4       	brne	.+4      	; 0x2a8 <__vector_26+0x8e>
				{
					i2c_stop();
     2a4:	b3 df       	rcall	.-154    	; 0x20c <i2c_stop>
					break;
     2a6:	22 c0       	rjmp	.+68     	; 0x2ec <__vector_26+0xd2>
				}
				else
				{
					i2c_send_data(trans_data);
     2a8:	80 91 10 01 	lds	r24, 0x0110
	i2c_done = 1;
}

void i2c_send_data(uint8_t data)
{
		TWDR = data;
     2ac:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(1 << TWEN)|(1 << TWIE);
     2b0:	85 e8       	ldi	r24, 0x85	; 133
     2b2:	80 93 bc 00 	sts	0x00BC, r24
				}
				else
				{
					i2c_send_data(trans_data);
				}
				n_o_writes = n_o_writes - 1; 
     2b6:	80 91 0a 01 	lds	r24, 0x010A
     2ba:	90 91 0b 01 	lds	r25, 0x010B
     2be:	01 97       	sbiw	r24, 0x01	; 1
     2c0:	90 93 0b 01 	sts	0x010B, r25
     2c4:	80 93 0a 01 	sts	0x010A, r24
     2c8:	11 c0       	rjmp	.+34     	; 0x2ec <__vector_26+0xd2>
			}
			else
			{
				i2c_start(); //repeated start
     2ca:	9a df       	rcall	.-204    	; 0x200 <i2c_start>
     2cc:	0f c0       	rjmp	.+30     	; 0x2ec <__vector_26+0xd2>
			}
		
			break;
		case TW_MR_SLA_ACK: //6
			TWCR = (1 << TWINT)|(0 << TWSTA)|(0 << TWSTO)|(0 << TWEA)|(1 << TWEN)|(1 << TWIE);
     2ce:	85 e8       	ldi	r24, 0x85	; 133
     2d0:	80 93 bc 00 	sts	0x00BC, r24
			break;
     2d4:	0b c0       	rjmp	.+22     	; 0x2ec <__vector_26+0xd2>
		case TW_MR_DATA_NACK: //7
			rec_data = TWDR;
     2d6:	80 91 bb 00 	lds	r24, 0x00BB
     2da:	80 93 0f 01 	sts	0x010F, r24
			i2c_stop();
     2de:	96 df       	rcall	.-212    	; 0x20c <i2c_stop>
			break;
     2e0:	05 c0       	rjmp	.+10     	; 0x2ec <__vector_26+0xd2>
		case TW_MR_DATA_ACK: //8
			rec_data = TWDR;
     2e2:	80 91 bb 00 	lds	r24, 0x00BB
     2e6:	80 93 0f 01 	sts	0x010F, r24
			i2c_stop();
     2ea:	90 df       	rcall	.-224    	; 0x20c <i2c_stop>
			break;
	}
}
     2ec:	ff 91       	pop	r31
     2ee:	ef 91       	pop	r30
     2f0:	bf 91       	pop	r27
     2f2:	af 91       	pop	r26
     2f4:	9f 91       	pop	r25
     2f6:	8f 91       	pop	r24
     2f8:	7f 91       	pop	r23
     2fa:	6f 91       	pop	r22
     2fc:	5f 91       	pop	r21
     2fe:	4f 91       	pop	r20
     300:	3f 91       	pop	r19
     302:	2f 91       	pop	r18
     304:	0f 90       	pop	r0
     306:	0b be       	out	0x3b, r0	; 59
     308:	0f 90       	pop	r0
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	0f 90       	pop	r0
     30e:	1f 90       	pop	r1
     310:	18 95       	reti

00000312 <i2c_write_reg>:

void i2c_write_reg(uint8_t device_address, uint8_t reg_addr, uint8_t data, int n)
{
	while(!i2c_done){};
     312:	90 91 07 01 	lds	r25, 0x0107
     316:	99 23       	and	r25, r25
     318:	e1 f3       	breq	.-8      	; 0x312 <i2c_write_reg>
	n_o_writes = n;
     31a:	30 93 0b 01 	sts	0x010B, r19
     31e:	20 93 0a 01 	sts	0x010A, r18
	register_addr = reg_addr;
     322:	60 93 0e 01 	sts	0x010E, r22
	device_addr = device_address;
     326:	80 93 0d 01 	sts	0x010D, r24
	trans_data = data;
     32a:	40 93 10 01 	sts	0x0110, r20
	write_to_slave = 1;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 06 01 	sts	0x0106, r24
	i2c_start();
     334:	65 cf       	rjmp	.-310    	; 0x200 <i2c_start>
     336:	08 95       	ret

00000338 <i2c_read_reg>:
}

uint8_t i2c_read_reg(uint8_t device_address, uint8_t reg_addr, int n)
{
	while(!i2c_done){};
     338:	90 91 07 01 	lds	r25, 0x0107
     33c:	99 23       	and	r25, r25
     33e:	e1 f3       	breq	.-8      	; 0x338 <i2c_read_reg>
	n_o_reads = n;
     340:	50 93 09 01 	sts	0x0109, r21
     344:	40 93 08 01 	sts	0x0108, r20
	register_addr = reg_addr;
     348:	60 93 0e 01 	sts	0x010E, r22
	device_addr = device_address;
     34c:	80 93 0d 01 	sts	0x010D, r24
	write_to_slave = 0;
     350:	10 92 06 01 	sts	0x0106, r1
	i2c_start();
     354:	55 df       	rcall	.-342    	; 0x200 <i2c_start>
	while(!i2c_done){};
     356:	80 91 07 01 	lds	r24, 0x0107
     35a:	88 23       	and	r24, r24
     35c:	e1 f3       	breq	.-8      	; 0x356 <i2c_read_reg+0x1e>
	return rec_data;
     35e:	80 91 0f 01 	lds	r24, 0x010F
}
     362:	08 95       	ret

00000364 <led_blink_green>:
}

void led_blink_green (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     364:	00 97       	sbiw	r24, 0x00	; 0
     366:	b9 f0       	breq	.+46     	; 0x396 <led_blink_green+0x32>
	{
		PORTB|=(1<<1);
     368:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     36a:	2f ef       	ldi	r18, 0xFF	; 255
     36c:	39 e6       	ldi	r19, 0x69	; 105
     36e:	48 e1       	ldi	r20, 0x18	; 24
     370:	21 50       	subi	r18, 0x01	; 1
     372:	30 40       	sbci	r19, 0x00	; 0
     374:	40 40       	sbci	r20, 0x00	; 0
     376:	e1 f7       	brne	.-8      	; 0x370 <led_blink_green+0xc>
     378:	00 c0       	rjmp	.+0      	; 0x37a <led_blink_green+0x16>
     37a:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<1);
     37c:	15 b8       	out	0x05, r1	; 5
     37e:	2f ef       	ldi	r18, 0xFF	; 255
     380:	39 e6       	ldi	r19, 0x69	; 105
     382:	48 e1       	ldi	r20, 0x18	; 24
     384:	21 50       	subi	r18, 0x01	; 1
     386:	30 40       	sbci	r19, 0x00	; 0
     388:	40 40       	sbci	r20, 0x00	; 0
     38a:	e1 f7       	brne	.-8      	; 0x384 <led_blink_green+0x20>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <led_blink_green+0x2a>
     38e:	00 00       	nop
}

void led_blink_green (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	49 f7       	brne	.-46     	; 0x368 <led_blink_green+0x4>
     396:	08 95       	ret

00000398 <led_blink_yellow>:
}

void led_blink_yellow (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     398:	00 97       	sbiw	r24, 0x00	; 0
     39a:	b9 f0       	breq	.+46     	; 0x3ca <led_blink_yellow+0x32>
	{
		PORTB|=(1<<2);
     39c:	2a 9a       	sbi	0x05, 2	; 5
     39e:	2f ef       	ldi	r18, 0xFF	; 255
     3a0:	39 e6       	ldi	r19, 0x69	; 105
     3a2:	48 e1       	ldi	r20, 0x18	; 24
     3a4:	21 50       	subi	r18, 0x01	; 1
     3a6:	30 40       	sbci	r19, 0x00	; 0
     3a8:	40 40       	sbci	r20, 0x00	; 0
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <led_blink_yellow+0xc>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <led_blink_yellow+0x16>
     3ae:	00 00       	nop
		_delay_ms(500);
		PORTB=(0<<2);
     3b0:	15 b8       	out	0x05, r1	; 5
     3b2:	2f ef       	ldi	r18, 0xFF	; 255
     3b4:	39 e6       	ldi	r19, 0x69	; 105
     3b6:	48 e1       	ldi	r20, 0x18	; 24
     3b8:	21 50       	subi	r18, 0x01	; 1
     3ba:	30 40       	sbci	r19, 0x00	; 0
     3bc:	40 40       	sbci	r20, 0x00	; 0
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <led_blink_yellow+0x20>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <led_blink_yellow+0x2a>
     3c2:	00 00       	nop
}

void led_blink_yellow (uint16_t i)
{
	//Blink LED "i" number of times
	for (; i>0; --i)
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	49 f7       	brne	.-46     	; 0x39c <led_blink_yellow+0x4>
     3ca:	08 95       	ret

000003cc <create_empty_sensor>:
﻿#include "sensor_data.h"

Sensor_Data* sd;

Sensor_Data* create_empty_sensor(bool data)
{
     3cc:	cf 93       	push	r28
     3ce:	c8 2f       	mov	r28, r24
	Sensor_Data sd;
	Sensor_Data* sd_p = malloc(sizeof(sd));
     3d0:	8d e2       	ldi	r24, 0x2D	; 45
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	89 d6       	rcall	.+3346   	; 0x10e8 <malloc>
     3d6:	fc 01       	movw	r30, r24
	sd_p->acc[0] = 0;
     3d8:	10 82       	st	Z, r1
     3da:	11 82       	std	Z+1, r1	; 0x01
     3dc:	12 82       	std	Z+2, r1	; 0x02
     3de:	13 82       	std	Z+3, r1	; 0x03
	sd_p->acc[1] = 0;
     3e0:	14 82       	std	Z+4, r1	; 0x04
     3e2:	15 82       	std	Z+5, r1	; 0x05
     3e4:	16 82       	std	Z+6, r1	; 0x06
     3e6:	17 82       	std	Z+7, r1	; 0x07
	sd_p->acc[2] = 0;
     3e8:	10 86       	std	Z+8, r1	; 0x08
     3ea:	11 86       	std	Z+9, r1	; 0x09
     3ec:	12 86       	std	Z+10, r1	; 0x0a
     3ee:	13 86       	std	Z+11, r1	; 0x0b
	sd_p->gyro[0] = 0;
     3f0:	14 86       	std	Z+12, r1	; 0x0c
     3f2:	15 86       	std	Z+13, r1	; 0x0d
     3f4:	16 86       	std	Z+14, r1	; 0x0e
     3f6:	17 86       	std	Z+15, r1	; 0x0f
	sd_p->gyro[1] = 0;
     3f8:	10 8a       	std	Z+16, r1	; 0x10
     3fa:	11 8a       	std	Z+17, r1	; 0x11
     3fc:	12 8a       	std	Z+18, r1	; 0x12
     3fe:	13 8a       	std	Z+19, r1	; 0x13
	sd_p->gyro[2] = 0;
     400:	14 8a       	std	Z+20, r1	; 0x14
     402:	15 8a       	std	Z+21, r1	; 0x15
     404:	16 8a       	std	Z+22, r1	; 0x16
     406:	17 8a       	std	Z+23, r1	; 0x17
	sd_p->angle[0] = 0;
     408:	10 8e       	std	Z+24, r1	; 0x18
     40a:	11 8e       	std	Z+25, r1	; 0x19
     40c:	12 8e       	std	Z+26, r1	; 0x1a
     40e:	13 8e       	std	Z+27, r1	; 0x1b
	sd_p->angle[1] = 0;
     410:	14 8e       	std	Z+28, r1	; 0x1c
     412:	15 8e       	std	Z+29, r1	; 0x1d
     414:	16 8e       	std	Z+30, r1	; 0x1e
     416:	17 8e       	std	Z+31, r1	; 0x1f
	sd_p->angle[2] = 0;
     418:	10 a2       	std	Z+32, r1	; 0x20
     41a:	11 a2       	std	Z+33, r1	; 0x21
     41c:	12 a2       	std	Z+34, r1	; 0x22
     41e:	13 a2       	std	Z+35, r1	; 0x23
	sd_p->distance = 0;
     420:	14 a2       	std	Z+36, r1	; 0x24
     422:	15 a2       	std	Z+37, r1	; 0x25
     424:	16 a2       	std	Z+38, r1	; 0x26
     426:	17 a2       	std	Z+39, r1	; 0x27
	/*
	sd_p->distance[0] = 0;
	sd_p->distance[1] = 0;
	sd_p->distance[2] = 0;
	*/
	sd_p->has_data = data;
     428:	dc 01       	movw	r26, r24
     42a:	a8 5d       	subi	r26, 0xD8	; 216
     42c:	be 4f       	sbci	r27, 0xFE	; 254
     42e:	cc 93       	st	X, r28
	sd_p->has_ir = data;
     430:	11 96       	adiw	r26, 0x01	; 1
     432:	cc 93       	st	X, r28
	sd_p->has_angle = data;
     434:	11 96       	adiw	r26, 0x01	; 1
     436:	cc 93       	st	X, r28
	sd_p->has_acc = data;
     438:	11 96       	adiw	r26, 0x01	; 1
     43a:	cc 93       	st	X, r28
	sd_p->has_distance = data;
     43c:	11 96       	adiw	r26, 0x01	; 1
     43e:	cc 93       	st	X, r28
	return sd_p;
}
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <init_temp>:
{
	measure_distance();
	_delay_ms(5);
	sd->distance = distance_value;
	return;
}
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	62 e0       	ldi	r22, 0x02	; 2
     44c:	82 ed       	ldi	r24, 0xD2	; 210
     44e:	61 df       	rcall	.-318    	; 0x312 <i2c_write_reg>
     450:	8f e3       	ldi	r24, 0x3F	; 63
     452:	9c e9       	ldi	r25, 0x9C	; 156
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <init_temp+0x10>
     458:	00 c0       	rjmp	.+0      	; 0x45a <init_temp+0x16>
     45a:	00 00       	nop
     45c:	08 95       	ret

0000045e <initialize_all>:
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	84 b9       	out	0x04, r24	; 4
     462:	15 b8       	out	0x05, r1	; 5
     464:	c4 de       	rcall	.-632    	; 0x1ee <i2c_init>
     466:	2f d2       	rcall	.+1118   	; 0x8c6 <spi_init>
     468:	78 94       	sei
     46a:	ec df       	rcall	.-40     	; 0x444 <init_temp>
     46c:	39 d2       	rcall	.+1138   	; 0x8e0 <data_direction_init>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	92 df       	rcall	.-220    	; 0x398 <led_blink_yellow>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	75 df       	rcall	.-278    	; 0x364 <led_blink_green>
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	91 e4       	ldi	r25, 0x41	; 65
     482:	6f c2       	rjmp	.+1246   	; 0x962 <timer_1_init>
     484:	08 95       	ret

00000486 <format_distance>:
     486:	4f 92       	push	r4
     488:	5f 92       	push	r5
     48a:	6f 92       	push	r6
     48c:	7f 92       	push	r7
     48e:	8f 92       	push	r8
     490:	9f 92       	push	r9
     492:	af 92       	push	r10
     494:	bf 92       	push	r11
     496:	cf 92       	push	r12
     498:	df 92       	push	r13
     49a:	ef 92       	push	r14
     49c:	ff 92       	push	r15
     49e:	bc 01       	movw	r22, r24
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	95 d3       	rcall	.+1834   	; 0xbd0 <__floatunsisf>
     4a6:	6b 01       	movw	r12, r22
     4a8:	7c 01       	movw	r14, r24
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e8       	ldi	r20, 0x80	; 128
     4b0:	50 e4       	ldi	r21, 0x40	; 64
     4b2:	a3 d4       	rcall	.+2374   	; 0xdfa <pow>
     4b4:	4b 01       	movw	r8, r22
     4b6:	5c 01       	movw	r10, r24
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e4       	ldi	r20, 0x40	; 64
     4be:	50 e4       	ldi	r21, 0x40	; 64
     4c0:	c7 01       	movw	r24, r14
     4c2:	b6 01       	movw	r22, r12
     4c4:	9a d4       	rcall	.+2356   	; 0xdfa <pow>
     4c6:	2b 01       	movw	r4, r22
     4c8:	3c 01       	movw	r6, r24
     4ca:	26 ea       	ldi	r18, 0xA6	; 166
     4cc:	34 e8       	ldi	r19, 0x84	; 132
     4ce:	40 ef       	ldi	r20, 0xF0	; 240
     4d0:	51 e3       	ldi	r21, 0x31	; 49
     4d2:	c5 01       	movw	r24, r10
     4d4:	b4 01       	movw	r22, r8
     4d6:	2e d4       	rcall	.+2140   	; 0xd34 <__mulsf3>
     4d8:	4b 01       	movw	r8, r22
     4da:	5c 01       	movw	r10, r24
     4dc:	2c ea       	ldi	r18, 0xAC	; 172
     4de:	35 ec       	ldi	r19, 0xC5	; 197
     4e0:	47 e2       	ldi	r20, 0x27	; 39
     4e2:	57 eb       	ldi	r21, 0xB7	; 183
     4e4:	c3 01       	movw	r24, r6
     4e6:	b2 01       	movw	r22, r4
     4e8:	25 d4       	rcall	.+2122   	; 0xd34 <__mulsf3>
     4ea:	9b 01       	movw	r18, r22
     4ec:	ac 01       	movw	r20, r24
     4ee:	c5 01       	movw	r24, r10
     4f0:	b4 01       	movw	r22, r8
     4f2:	9e d2       	rcall	.+1340   	; 0xa30 <__addsf3>
     4f4:	4b 01       	movw	r8, r22
     4f6:	5c 01       	movw	r10, r24
     4f8:	a7 01       	movw	r20, r14
     4fa:	96 01       	movw	r18, r12
     4fc:	c7 01       	movw	r24, r14
     4fe:	b6 01       	movw	r22, r12
     500:	19 d4       	rcall	.+2098   	; 0xd34 <__mulsf3>
     502:	24 e3       	ldi	r18, 0x34	; 52
     504:	30 e8       	ldi	r19, 0x80	; 128
     506:	47 eb       	ldi	r20, 0xB7	; 183
     508:	5b e3       	ldi	r21, 0x3B	; 59
     50a:	14 d4       	rcall	.+2088   	; 0xd34 <__mulsf3>
     50c:	9b 01       	movw	r18, r22
     50e:	ac 01       	movw	r20, r24
     510:	c5 01       	movw	r24, r10
     512:	b4 01       	movw	r22, r8
     514:	8d d2       	rcall	.+1306   	; 0xa30 <__addsf3>
     516:	4b 01       	movw	r8, r22
     518:	5c 01       	movw	r10, r24
     51a:	22 e0       	ldi	r18, 0x02	; 2
     51c:	3c eb       	ldi	r19, 0xBC	; 188
     51e:	45 eb       	ldi	r20, 0xB5	; 181
     520:	5f eb       	ldi	r21, 0xBF	; 191
     522:	c7 01       	movw	r24, r14
     524:	b6 01       	movw	r22, r12
     526:	06 d4       	rcall	.+2060   	; 0xd34 <__mulsf3>
     528:	9b 01       	movw	r18, r22
     52a:	ac 01       	movw	r20, r24
     52c:	c5 01       	movw	r24, r10
     52e:	b4 01       	movw	r22, r8
     530:	7f d2       	rcall	.+1278   	; 0xa30 <__addsf3>
     532:	22 e5       	ldi	r18, 0x52	; 82
     534:	38 e3       	ldi	r19, 0x38	; 56
     536:	4e e1       	ldi	r20, 0x1E	; 30
     538:	53 e4       	ldi	r21, 0x43	; 67
     53a:	7a d2       	rcall	.+1268   	; 0xa30 <__addsf3>
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	bf 90       	pop	r11
     546:	af 90       	pop	r10
     548:	9f 90       	pop	r9
     54a:	8f 90       	pop	r8
     54c:	7f 90       	pop	r7
     54e:	6f 90       	pop	r6
     550:	5f 90       	pop	r5
     552:	4f 90       	pop	r4
     554:	08 95       	ret

00000556 <get_temp>:
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24
     560:	a8 96       	adiw	r28, 0x28	; 40
     562:	10 e8       	ldi	r17, 0x80	; 128
     564:	41 e0       	ldi	r20, 0x01	; 1
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	61 2f       	mov	r22, r17
     56a:	82 ed       	ldi	r24, 0xD2	; 210
     56c:	e5 de       	rcall	.-566    	; 0x338 <i2c_read_reg>
     56e:	08 2f       	mov	r16, r24
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	61 0f       	add	r22, r17
     574:	41 e0       	ldi	r20, 0x01	; 1
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	82 ed       	ldi	r24, 0xD2	; 210
     57a:	de de       	rcall	.-580    	; 0x338 <i2c_read_reg>
     57c:	68 2f       	mov	r22, r24
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	76 2f       	mov	r23, r22
     582:	66 27       	eor	r22, r22
     584:	60 0f       	add	r22, r16
     586:	71 1d       	adc	r23, r1
     588:	88 27       	eor	r24, r24
     58a:	77 fd       	sbrc	r23, 7
     58c:	80 95       	com	r24
     58e:	98 2f       	mov	r25, r24
     590:	21 d3       	rcall	.+1602   	; 0xbd4 <__floatsisf>
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e8       	ldi	r20, 0x80	; 128
     598:	5e e3       	ldi	r21, 0x3E	; 62
     59a:	cc d3       	rcall	.+1944   	; 0xd34 <__mulsf3>
     59c:	69 93       	st	Y+, r22
     59e:	79 93       	st	Y+, r23
     5a0:	89 93       	st	Y+, r24
     5a2:	99 93       	st	Y+, r25
     5a4:	1e 5f       	subi	r17, 0xFE	; 254
     5a6:	f1 f6       	brne	.-68     	; 0x564 <get_temp+0xe>
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	08 95       	ret

000005b2 <send_data>:
/******************************************************************
************************** SPI FUNCTIONS **************************
******************************************************************/

void send_data(Sensor_Data* sd)
{
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
     5c6:	cd 52       	subi	r28, 0x2D	; 45
     5c8:	d1 40       	sbci	r29, 0x01	; 1
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	8c 01       	movw	r16, r24
	unsigned char data = 0;
	data = SPDR;
     5d6:	8e b5       	in	r24, 0x2e	; 46
	switch(data)
     5d8:	83 30       	cpi	r24, 0x03	; 3
     5da:	a9 f1       	breq	.+106    	; 0x646 <send_data+0x94>
     5dc:	38 f4       	brcc	.+14     	; 0x5ec <send_data+0x3a>
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <send_data+0x32>
     5e2:	c1 c0       	rjmp	.+386    	; 0x766 <send_data+0x1b4>
     5e4:	82 30       	cpi	r24, 0x02	; 2
     5e6:	09 f4       	brne	.+2      	; 0x5ea <send_data+0x38>
     5e8:	8d c0       	rjmp	.+282    	; 0x704 <send_data+0x152>
     5ea:	dd c0       	rjmp	.+442    	; 0x7a6 <send_data+0x1f4>
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <send_data+0x40>
     5f0:	68 c0       	rjmp	.+208    	; 0x6c2 <send_data+0x110>
     5f2:	85 30       	cpi	r24, 0x05	; 5
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <send_data+0x46>
     5f6:	d7 c0       	rjmp	.+430    	; 0x7a6 <send_data+0x1f4>
	{
		case IR_DATA_REQUEST :
			if(sd->has_ir)
     5f8:	f8 01       	movw	r30, r16
     5fa:	e7 5d       	subi	r30, 0xD7	; 215
     5fc:	fe 4f       	sbci	r31, 0xFE	; 254
     5fe:	80 81       	ld	r24, Z
     600:	88 23       	and	r24, r24
     602:	09 f4       	brne	.+2      	; 0x606 <send_data+0x54>
     604:	d0 c0       	rjmp	.+416    	; 0x7a6 <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     606:	81 e1       	ldi	r24, 0x11	; 17
     608:	65 d1       	rcall	.+714    	; 0x8d4 <spi_tranceiver>
     60a:	d8 01       	movw	r26, r16
     60c:	98 96       	adiw	r26, 0x28	; 40
     60e:	fe 01       	movw	r30, r28
     610:	31 96       	adiw	r30, 0x01	; 1
     612:	7e 01       	movw	r14, r28
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	e8 0e       	add	r14, r24
     618:	f8 1e       	adc	r15, r24
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
				{
					ir_packet.ir[i] = sd->ir[i];
     61a:	4d 91       	ld	r20, X+
     61c:	5d 91       	ld	r21, X+
     61e:	6d 91       	ld	r22, X+
     620:	7d 91       	ld	r23, X+
     622:	41 93       	st	Z+, r20
     624:	51 93       	st	Z+, r21
     626:	61 93       	st	Z+, r22
     628:	71 93       	st	Z+, r23
		case IR_DATA_REQUEST :
			if(sd->has_ir)
			{
				spi_tranceiver(SPI_DATA_OK);
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
     62a:	ee 15       	cp	r30, r14
     62c:	ff 05       	cpc	r31, r15
     62e:	a9 f7       	brne	.-22     	; 0x61a <send_data+0x68>
     630:	8e 01       	movw	r16, r28
     632:	0f 5f       	subi	r16, 0xFF	; 255
     634:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					ir_packet.ir[i] = sd->ir[i];
				}
				for (int i = 0; i < IR_SIZE; i++)
				{
					spi_tranceiver(ir_packet.packet[i]);
     636:	f8 01       	movw	r30, r16
     638:	81 91       	ld	r24, Z+
     63a:	8f 01       	movw	r16, r30
     63c:	4b d1       	rcall	.+662    	; 0x8d4 <spi_tranceiver>
				IR_packet ir_packet;
				for(int i = 0; i < 64; i++)
				{
					ir_packet.ir[i] = sd->ir[i];
				}
				for (int i = 0; i < IR_SIZE; i++)
     63e:	e0 16       	cp	r14, r16
     640:	f1 06       	cpc	r15, r17
     642:	c9 f7       	brne	.-14     	; 0x636 <send_data+0x84>
     644:	b0 c0       	rjmp	.+352    	; 0x7a6 <send_data+0x1f4>
				}
			}
			break;
		
		case ANGLE_DATA_REQUEST :
			if(sd->has_angle)
     646:	f8 01       	movw	r30, r16
     648:	e6 5d       	subi	r30, 0xD6	; 214
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	80 81       	ld	r24, Z
     64e:	88 23       	and	r24, r24
     650:	09 f4       	brne	.+2      	; 0x654 <send_data+0xa2>
     652:	a9 c0       	rjmp	.+338    	; 0x7a6 <send_data+0x1f4>
			{
				
				spi_tranceiver(SPI_DATA_OK);
     654:	81 e1       	ldi	r24, 0x11	; 17
     656:	3e d1       	rcall	.+636    	; 0x8d4 <spi_tranceiver>
				Angle_packet angle_packet;
				
	
				for(int i = 0; i < 3; i++)
				{
					angle_packet.angle[i] = sd->angle[i];
     658:	f8 01       	movw	r30, r16
     65a:	80 8d       	ldd	r24, Z+24	; 0x18
     65c:	91 8d       	ldd	r25, Z+25	; 0x19
     65e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     660:	b3 8d       	ldd	r27, Z+27	; 0x1b
     662:	89 83       	std	Y+1, r24	; 0x01
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	ab 83       	std	Y+3, r26	; 0x03
     668:	bc 83       	std	Y+4, r27	; 0x04
     66a:	84 8d       	ldd	r24, Z+28	; 0x1c
     66c:	95 8d       	ldd	r25, Z+29	; 0x1d
     66e:	a6 8d       	ldd	r26, Z+30	; 0x1e
     670:	b7 8d       	ldd	r27, Z+31	; 0x1f
     672:	8d 83       	std	Y+5, r24	; 0x05
     674:	9e 83       	std	Y+6, r25	; 0x06
     676:	af 83       	std	Y+7, r26	; 0x07
     678:	b8 87       	std	Y+8, r27	; 0x08
     67a:	80 a1       	ldd	r24, Z+32	; 0x20
     67c:	91 a1       	ldd	r25, Z+33	; 0x21
     67e:	a2 a1       	ldd	r26, Z+34	; 0x22
     680:	b3 a1       	ldd	r27, Z+35	; 0x23
     682:	89 87       	std	Y+9, r24	; 0x09
     684:	9a 87       	std	Y+10, r25	; 0x0a
     686:	ab 87       	std	Y+11, r26	; 0x0b
     688:	bc 87       	std	Y+12, r27	; 0x0c
     68a:	ce 01       	movw	r24, r28
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	7c 01       	movw	r14, r24
     690:	6e 01       	movw	r12, r28
     692:	9d e0       	ldi	r25, 0x0D	; 13
     694:	c9 0e       	add	r12, r25
     696:	d1 1c       	adc	r13, r1
				}
				
				for (int i = 0; i < ANGLE_SIZE; i++)
				{
					spi_tranceiver(angle_packet.packet[i]);
     698:	f7 01       	movw	r30, r14
     69a:	81 91       	ld	r24, Z+
     69c:	7f 01       	movw	r14, r30
     69e:	1a d1       	rcall	.+564    	; 0x8d4 <spi_tranceiver>
				for(int i = 0; i < 3; i++)
				{
					angle_packet.angle[i] = sd->angle[i];
				}
				
				for (int i = 0; i < ANGLE_SIZE; i++)
     6a0:	ec 14       	cp	r14, r12
     6a2:	fd 04       	cpc	r15, r13
     6a4:	c9 f7       	brne	.-14     	; 0x698 <send_data+0xe6>
					spi_tranceiver(angle_packet.packet[i]);
				}
				
				for(int i = 0; i < 3; i++)
				{
					sd->angle[i] = 0;
     6a6:	f8 01       	movw	r30, r16
     6a8:	10 8e       	std	Z+24, r1	; 0x18
     6aa:	11 8e       	std	Z+25, r1	; 0x19
     6ac:	12 8e       	std	Z+26, r1	; 0x1a
     6ae:	13 8e       	std	Z+27, r1	; 0x1b
     6b0:	14 8e       	std	Z+28, r1	; 0x1c
     6b2:	15 8e       	std	Z+29, r1	; 0x1d
     6b4:	16 8e       	std	Z+30, r1	; 0x1e
     6b6:	17 8e       	std	Z+31, r1	; 0x1f
     6b8:	10 a2       	std	Z+32, r1	; 0x20
     6ba:	11 a2       	std	Z+33, r1	; 0x21
     6bc:	12 a2       	std	Z+34, r1	; 0x22
     6be:	13 a2       	std	Z+35, r1	; 0x23
     6c0:	72 c0       	rjmp	.+228    	; 0x7a6 <send_data+0x1f4>
			
			}
			break;
		
		case DISTANCE_DATA_REQUEST :
			if(sd->has_distance)
     6c2:	f8 01       	movw	r30, r16
     6c4:	e4 5d       	subi	r30, 0xD4	; 212
     6c6:	fe 4f       	sbci	r31, 0xFE	; 254
     6c8:	80 81       	ld	r24, Z
     6ca:	88 23       	and	r24, r24
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <send_data+0x11e>
     6ce:	6b c0       	rjmp	.+214    	; 0x7a6 <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     6d0:	81 e1       	ldi	r24, 0x11	; 17
     6d2:	00 d1       	rcall	.+512    	; 0x8d4 <spi_tranceiver>
				Distance_packet distance_packet;
				
				distance_packet.distance = sd->distance;
     6d4:	f8 01       	movw	r30, r16
     6d6:	84 a1       	ldd	r24, Z+36	; 0x24
     6d8:	95 a1       	ldd	r25, Z+37	; 0x25
     6da:	a6 a1       	ldd	r26, Z+38	; 0x26
     6dc:	b7 a1       	ldd	r27, Z+39	; 0x27
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	ab 83       	std	Y+3, r26	; 0x03
     6e4:	bc 83       	std	Y+4, r27	; 0x04
     6e6:	8e 01       	movw	r16, r28
     6e8:	0f 5f       	subi	r16, 0xFF	; 255
     6ea:	1f 4f       	sbci	r17, 0xFF	; 255
     6ec:	7e 01       	movw	r14, r28
     6ee:	f5 e0       	ldi	r31, 0x05	; 5
     6f0:	ef 0e       	add	r14, r31
     6f2:	f1 1c       	adc	r15, r1
				}
				*/
				
				for (int i = 0; i < DISTANCE_SIZE; i++)
				{
					spi_tranceiver(distance_packet.packet[i]);
     6f4:	f8 01       	movw	r30, r16
     6f6:	81 91       	ld	r24, Z+
     6f8:	8f 01       	movw	r16, r30
     6fa:	ec d0       	rcall	.+472    	; 0x8d4 <spi_tranceiver>
				{
					distance_packet.distance[i] = sd->distance[i];
				}
				*/
				
				for (int i = 0; i < DISTANCE_SIZE; i++)
     6fc:	0e 15       	cp	r16, r14
     6fe:	1f 05       	cpc	r17, r15
     700:	c9 f7       	brne	.-14     	; 0x6f4 <send_data+0x142>
     702:	51 c0       	rjmp	.+162    	; 0x7a6 <send_data+0x1f4>
				}
			}
			break;
		
		case ACC_DATA_REQUEST :
			if(sd->has_acc)
     704:	f8 01       	movw	r30, r16
     706:	e5 5d       	subi	r30, 0xD5	; 213
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	80 81       	ld	r24, Z
     70c:	88 23       	and	r24, r24
     70e:	09 f4       	brne	.+2      	; 0x712 <send_data+0x160>
     710:	4a c0       	rjmp	.+148    	; 0x7a6 <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     712:	81 e1       	ldi	r24, 0x11	; 17
     714:	df d0       	rcall	.+446    	; 0x8d4 <spi_tranceiver>
				Acc_packet acc_packet;
				
				for(int i = 0; i < 3; i++)
				{
					acc_packet.acc[i] = sd->acc[i];
     716:	f8 01       	movw	r30, r16
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	a2 81       	ldd	r26, Z+2	; 0x02
     71e:	b3 81       	ldd	r27, Z+3	; 0x03
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	9a 83       	std	Y+2, r25	; 0x02
     724:	ab 83       	std	Y+3, r26	; 0x03
     726:	bc 83       	std	Y+4, r27	; 0x04
     728:	44 81       	ldd	r20, Z+4	; 0x04
     72a:	55 81       	ldd	r21, Z+5	; 0x05
     72c:	66 81       	ldd	r22, Z+6	; 0x06
     72e:	77 81       	ldd	r23, Z+7	; 0x07
     730:	4d 83       	std	Y+5, r20	; 0x05
     732:	5e 83       	std	Y+6, r21	; 0x06
     734:	6f 83       	std	Y+7, r22	; 0x07
     736:	78 87       	std	Y+8, r23	; 0x08
     738:	80 85       	ldd	r24, Z+8	; 0x08
     73a:	91 85       	ldd	r25, Z+9	; 0x09
     73c:	a2 85       	ldd	r26, Z+10	; 0x0a
     73e:	b3 85       	ldd	r27, Z+11	; 0x0b
     740:	89 87       	std	Y+9, r24	; 0x09
     742:	9a 87       	std	Y+10, r25	; 0x0a
     744:	ab 87       	std	Y+11, r26	; 0x0b
     746:	bc 87       	std	Y+12, r27	; 0x0c
     748:	8e 01       	movw	r16, r28
     74a:	0f 5f       	subi	r16, 0xFF	; 255
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	7e 01       	movw	r14, r28
     750:	fd e0       	ldi	r31, 0x0D	; 13
     752:	ef 0e       	add	r14, r31
     754:	f1 1c       	adc	r15, r1
				}
				for (int i = 0; i < ACC_SIZE; i++)
				{
					spi_tranceiver(acc_packet.packet[i]);
     756:	f8 01       	movw	r30, r16
     758:	81 91       	ld	r24, Z+
     75a:	8f 01       	movw	r16, r30
     75c:	bb d0       	rcall	.+374    	; 0x8d4 <spi_tranceiver>
				
				for(int i = 0; i < 3; i++)
				{
					acc_packet.acc[i] = sd->acc[i];
				}
				for (int i = 0; i < ACC_SIZE; i++)
     75e:	0e 15       	cp	r16, r14
     760:	1f 05       	cpc	r17, r15
     762:	c9 f7       	brne	.-14     	; 0x756 <send_data+0x1a4>
     764:	20 c0       	rjmp	.+64     	; 0x7a6 <send_data+0x1f4>
				}
			}
			break;
			
		case ALL_DATA_REQUEST :
			if(sd->has_data)
     766:	f8 01       	movw	r30, r16
     768:	e8 5d       	subi	r30, 0xD8	; 216
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	80 81       	ld	r24, Z
     76e:	88 23       	and	r24, r24
     770:	d1 f0       	breq	.+52     	; 0x7a6 <send_data+0x1f4>
			{
				spi_tranceiver(SPI_DATA_OK);
     772:	81 e1       	ldi	r24, 0x11	; 17
     774:	af d0       	rcall	.+350    	; 0x8d4 <spi_tranceiver>
				SPI_packet spi_packet;
				spi_packet.sd = *sd;
     776:	8d e2       	ldi	r24, 0x2D	; 45
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	f8 01       	movw	r30, r16
     77c:	de 01       	movw	r26, r28
     77e:	11 96       	adiw	r26, 0x01	; 1
     780:	01 90       	ld	r0, Z+
     782:	0d 92       	st	X+, r0
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	e1 f7       	brne	.-8      	; 0x780 <send_data+0x1ce>
     788:	8e 01       	movw	r16, r28
     78a:	0f 5f       	subi	r16, 0xFF	; 255
     78c:	1f 4f       	sbci	r17, 0xFF	; 255
     78e:	7e 01       	movw	r14, r28
     790:	f2 ed       	ldi	r31, 0xD2	; 210
     792:	ef 1a       	sub	r14, r31
     794:	fe ef       	ldi	r31, 0xFE	; 254
     796:	ff 0a       	sbc	r15, r31
				for (int i = 0; i < PACKET_SIZE; i++)
				{
					spi_tranceiver(spi_packet.packet[i]);
     798:	f8 01       	movw	r30, r16
     79a:	81 91       	ld	r24, Z+
     79c:	8f 01       	movw	r16, r30
     79e:	9a d0       	rcall	.+308    	; 0x8d4 <spi_tranceiver>
			if(sd->has_data)
			{
				spi_tranceiver(SPI_DATA_OK);
				SPI_packet spi_packet;
				spi_packet.sd = *sd;
				for (int i = 0; i < PACKET_SIZE; i++)
     7a0:	0e 15       	cp	r16, r14
     7a2:	1f 05       	cpc	r17, r15
     7a4:	c9 f7       	brne	.-14     	; 0x798 <send_data+0x1e6>
		/*default :
			spi_tranceiver(SPI_DATA_ERROR);
			led_blink_yellow(1);
			break;*/
	}
}
     7a6:	c3 5d       	subi	r28, 0xD3	; 211
     7a8:	de 4f       	sbci	r29, 0xFE	; 254
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	08 95       	ret

000007c6 <__vector_19>:
	EIFR = (1 << INT0);				// Clear flag
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
*/

ISR(SPI_STC_vect)  
{  
     7c6:	1f 92       	push	r1
     7c8:	0f 92       	push	r0
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	0f 92       	push	r0
     7ce:	11 24       	eor	r1, r1
     7d0:	0b b6       	in	r0, 0x3b	; 59
     7d2:	0f 92       	push	r0
     7d4:	2f 93       	push	r18
     7d6:	3f 93       	push	r19
     7d8:	4f 93       	push	r20
     7da:	5f 93       	push	r21
     7dc:	6f 93       	push	r22
     7de:	7f 93       	push	r23
     7e0:	8f 93       	push	r24
     7e2:	9f 93       	push	r25
     7e4:	af 93       	push	r26
     7e6:	bf 93       	push	r27
     7e8:	ef 93       	push	r30
     7ea:	ff 93       	push	r31
	if (!(data_sending))
     7ec:	80 91 0c 01 	lds	r24, 0x010C
     7f0:	81 11       	cpse	r24, r1
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__vector_19+0x42>
	{
		data_sending = true;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 0c 01 	sts	0x010C, r24
		send_data(current_data);
     7fa:	80 91 11 01 	lds	r24, 0x0111
     7fe:	90 91 12 01 	lds	r25, 0x0112
     802:	d7 de       	rcall	.-594    	; 0x5b2 <send_data>
		data_sending = false;
     804:	10 92 0c 01 	sts	0x010C, r1
	}
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0b be       	out	0x3b, r0	; 59
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_24>:

ISR(ADC_vect)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	2f 93       	push	r18
     83e:	3f 93       	push	r19
     840:	4f 93       	push	r20
     842:	5f 93       	push	r21
     844:	6f 93       	push	r22
     846:	7f 93       	push	r23
     848:	8f 93       	push	r24
     84a:	9f 93       	push	r25
     84c:	af 93       	push	r26
     84e:	bf 93       	push	r27
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	uint16_t digital_data = (uint16_t)(ADCL | (ADCH << 8));
     854:	80 91 78 00 	lds	r24, 0x0078
     858:	20 91 79 00 	lds	r18, 0x0079
     85c:	90 e0       	ldi	r25, 0x00	; 0
	/*********************************************************
						Vid kalibrering:
	*********************************************************/
	//Write_data_to_LCD(digital_data); 
	/*------------------------------------------------------*/
	distance_value = format_distance(digital_data);
     85e:	92 2b       	or	r25, r18
     860:	12 de       	rcall	.-988    	; 0x486 <format_distance>
     862:	60 93 15 01 	sts	0x0115, r22
     866:	70 93 16 01 	sts	0x0116, r23
     86a:	80 93 17 01 	sts	0x0117, r24
     86e:	90 93 18 01 	sts	0x0118, r25
     872:	8f e9       	ldi	r24, 0x9F	; 159
     874:	9f e0       	ldi	r25, 0x0F	; 15
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <__vector_24+0x48>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__vector_24+0x4e>
     87c:	00 00       	nop
	//Write_data_to_LCD(distance); 
	_delay_ms(1);
	ADCSRA |= (0 << ADEN) | (0 << ADIE);
     87e:	ea e7       	ldi	r30, 0x7A	; 122
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	80 83       	st	Z, r24
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0b be       	out	0x3b, r0	; 59
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <main>:

int main(void)
{
	initialize_all();
     8ac:	d8 dd       	rcall	.-1104   	; 0x45e <initialize_all>
	current_data = create_empty_sensor(true);
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	8d dd       	rcall	.-1254   	; 0x3cc <create_empty_sensor>
     8b2:	90 93 12 01 	sts	0x0112, r25
     8b6:	80 93 11 01 	sts	0x0111, r24
	while(1) 
	{
		//get_acc(current_data);
		//get_angle(current_data);
		//get_distance(current_data);
		get_temp(current_data);
     8ba:	80 91 11 01 	lds	r24, 0x0111
     8be:	90 91 12 01 	lds	r25, 0x0112
     8c2:	49 de       	rcall	.-878    	; 0x556 <get_temp>
     8c4:	fa cf       	rjmp	.-12     	; 0x8ba <main+0xe>

000008c6 <spi_init>:

#include "spi_slave.h"

void spi_init(void)
{
	SPCR |= (1 << SPIE);  
     8c6:	8c b5       	in	r24, 0x2c	; 44
     8c8:	80 68       	ori	r24, 0x80	; 128
     8ca:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1 << SPE);  //Enable SPI
     8cc:	8c b5       	in	r24, 0x2c	; 44
     8ce:	80 64       	ori	r24, 0x40	; 64
     8d0:	8c bd       	out	0x2c, r24	; 44
     8d2:	08 95       	ret

000008d4 <spi_tranceiver>:
}

//Function to send and receive data
unsigned char spi_tranceiver (unsigned char indata)
{	
	SPDR = indata;											//Load data into buffer
     8d4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));							//Wait until transmission complete
     8d6:	0d b4       	in	r0, 0x2d	; 45
     8d8:	07 fe       	sbrs	r0, 7
     8da:	fd cf       	rjmp	.-6      	; 0x8d6 <spi_tranceiver+0x2>
	return SPDR;											//Return received data
     8dc:	8e b5       	in	r24, 0x2e	; 46
}
     8de:	08 95       	ret

000008e0 <data_direction_init>:

void data_direction_init()
{
	DDRB = (1<<DDB0)|(1<<DDB1)|(1<<DDB2)|(1<<DDB6);			//Set PB0, PB1, PB2 and PB6 (MISO) as outputs
     8e0:	87 e4       	ldi	r24, 0x47	; 71
     8e2:	84 b9       	out	0x04, r24	; 4
     8e4:	08 95       	ret

000008e6 <__vector_15>:

volatile uint64_t overflows;
volatile float prescaler_;

ISR(TIMER1_OVF_vect)
{
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	2f 93       	push	r18
     8f2:	3f 93       	push	r19
     8f4:	4f 93       	push	r20
     8f6:	5f 93       	push	r21
     8f8:	6f 93       	push	r22
     8fa:	7f 93       	push	r23
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	af 93       	push	r26
	//keep track of number of overflows
	overflows++;
     902:	20 91 1d 01 	lds	r18, 0x011D
     906:	30 91 1e 01 	lds	r19, 0x011E
     90a:	40 91 1f 01 	lds	r20, 0x011F
     90e:	50 91 20 01 	lds	r21, 0x0120
     912:	60 91 21 01 	lds	r22, 0x0121
     916:	70 91 22 01 	lds	r23, 0x0122
     91a:	80 91 23 01 	lds	r24, 0x0123
     91e:	90 91 24 01 	lds	r25, 0x0124
     922:	a1 e0       	ldi	r26, 0x01	; 1
     924:	d5 d3       	rcall	.+1962   	; 0x10d0 <__adddi3_s8>
     926:	20 93 1d 01 	sts	0x011D, r18
     92a:	30 93 1e 01 	sts	0x011E, r19
     92e:	40 93 1f 01 	sts	0x011F, r20
     932:	50 93 20 01 	sts	0x0120, r21
     936:	60 93 21 01 	sts	0x0121, r22
     93a:	70 93 22 01 	sts	0x0122, r23
     93e:	80 93 23 01 	sts	0x0123, r24
     942:	90 93 24 01 	sts	0x0124, r25
}
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <timer_1_init>:

void timer_1_init(float prescaler)
{
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	6b 01       	movw	r12, r22
     96c:	7c 01       	movw	r14, r24
	//normal mode
	TCCR1A |= (0 << WGM10)|(0 << WGM11)|(0 << WGM12);;
     96e:	e0 e8       	ldi	r30, 0x80	; 128
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	80 83       	st	Z, r24
	if (prescaler == 1.0)
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e8       	ldi	r20, 0x80	; 128
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	c7 01       	movw	r24, r14
     980:	b6 01       	movw	r22, r12
     982:	ba d0       	rcall	.+372    	; 0xaf8 <__cmpsf2>
     984:	81 11       	cpse	r24, r1
     986:	06 c0       	rjmp	.+12     	; 0x994 <timer_1_init+0x32>
	{
		TCCR1B |= (1 << CS00)|(0 << CS01)|(0 << CS02);
     988:	e1 e8       	ldi	r30, 0x81	; 129
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
     992:	1e c0       	rjmp	.+60     	; 0x9d0 <timer_1_init+0x6e>
	}
	if (prescaler == 8.0)
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	51 e4       	ldi	r21, 0x41	; 65
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	ab d0       	rcall	.+342    	; 0xaf8 <__cmpsf2>
     9a2:	81 11       	cpse	r24, r1
     9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <timer_1_init+0x50>
	{
		TCCR1B |= (0 << CS00)|(1 << CS01)|(0 << CS02);
     9a6:	e1 e8       	ldi	r30, 0x81	; 129
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	82 60       	ori	r24, 0x02	; 2
     9ae:	80 83       	st	Z, r24
     9b0:	1e c0       	rjmp	.+60     	; 0x9ee <timer_1_init+0x8c>
	}
	if (prescaler == 64.0)
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	52 e4       	ldi	r21, 0x42	; 66
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	9c d0       	rcall	.+312    	; 0xaf8 <__cmpsf2>
     9c0:	81 11       	cpse	r24, r1
     9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <timer_1_init+0x6e>
	{
		TCCR1B |= (1 << CS00)|(1 << CS01)|(0 << CS02);
     9c4:	e1 e8       	ldi	r30, 0x81	; 129
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	83 60       	ori	r24, 0x03	; 3
     9cc:	80 83       	st	Z, r24
     9ce:	1d c0       	rjmp	.+58     	; 0xa0a <timer_1_init+0xa8>
	}
	if (prescaler == 256.0)
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	53 e4       	ldi	r21, 0x43	; 67
     9d8:	c7 01       	movw	r24, r14
     9da:	b6 01       	movw	r22, r12
     9dc:	8d d0       	rcall	.+282    	; 0xaf8 <__cmpsf2>
     9de:	81 11       	cpse	r24, r1
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <timer_1_init+0x8c>
	{
		TCCR1B |= (0 << CS00)|(0 << CS01)|(1 << CS02);
     9e2:	e1 e8       	ldi	r30, 0x81	; 129
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	80 83       	st	Z, r24
     9ec:	0e c0       	rjmp	.+28     	; 0xa0a <timer_1_init+0xa8>
	}
	if (prescaler == 1024.0)
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	40 e8       	ldi	r20, 0x80	; 128
     9f4:	54 e4       	ldi	r21, 0x44	; 68
     9f6:	c7 01       	movw	r24, r14
     9f8:	b6 01       	movw	r22, r12
     9fa:	7e d0       	rcall	.+252    	; 0xaf8 <__cmpsf2>
     9fc:	81 11       	cpse	r24, r1
     9fe:	05 c0       	rjmp	.+10     	; 0xa0a <timer_1_init+0xa8>
	{
		TCCR1B |= (1 << CS00)|(0 << CS01)|(1 << CS02);
     a00:	e1 e8       	ldi	r30, 0x81	; 129
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	85 60       	ori	r24, 0x05	; 5
     a08:	80 83       	st	Z, r24
	}
	prescaler_ = prescaler;
     a0a:	c0 92 19 01 	sts	0x0119, r12
     a0e:	d0 92 1a 01 	sts	0x011A, r13
     a12:	e0 92 1b 01 	sts	0x011B, r14
     a16:	f0 92 1c 01 	sts	0x011C, r15
	TIMSK1 |= (1 << TOIE1);
     a1a:	ef e6       	ldi	r30, 0x6F	; 111
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	80 83       	st	Z, r24
}
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	08 95       	ret

00000a2e <__subsf3>:
     a2e:	50 58       	subi	r21, 0x80	; 128

00000a30 <__addsf3>:
     a30:	bb 27       	eor	r27, r27
     a32:	aa 27       	eor	r26, r26
     a34:	0e d0       	rcall	.+28     	; 0xa52 <__addsf3x>
     a36:	44 c1       	rjmp	.+648    	; 0xcc0 <__fp_round>
     a38:	35 d1       	rcall	.+618    	; 0xca4 <__fp_pscA>
     a3a:	30 f0       	brcs	.+12     	; 0xa48 <__addsf3+0x18>
     a3c:	3a d1       	rcall	.+628    	; 0xcb2 <__fp_pscB>
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__addsf3+0x18>
     a40:	31 f4       	brne	.+12     	; 0xa4e <__addsf3+0x1e>
     a42:	9f 3f       	cpi	r25, 0xFF	; 255
     a44:	11 f4       	brne	.+4      	; 0xa4a <__addsf3+0x1a>
     a46:	1e f4       	brtc	.+6      	; 0xa4e <__addsf3+0x1e>
     a48:	2a c1       	rjmp	.+596    	; 0xc9e <__fp_nan>
     a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3+0x1e>
     a4c:	e0 95       	com	r30
     a4e:	e7 fb       	bst	r30, 7
     a50:	20 c1       	rjmp	.+576    	; 0xc92 <__fp_inf>

00000a52 <__addsf3x>:
     a52:	e9 2f       	mov	r30, r25
     a54:	46 d1       	rcall	.+652    	; 0xce2 <__fp_split3>
     a56:	80 f3       	brcs	.-32     	; 0xa38 <__addsf3+0x8>
     a58:	ba 17       	cp	r27, r26
     a5a:	62 07       	cpc	r22, r18
     a5c:	73 07       	cpc	r23, r19
     a5e:	84 07       	cpc	r24, r20
     a60:	95 07       	cpc	r25, r21
     a62:	18 f0       	brcs	.+6      	; 0xa6a <__addsf3x+0x18>
     a64:	71 f4       	brne	.+28     	; 0xa82 <__addsf3x+0x30>
     a66:	9e f5       	brtc	.+102    	; 0xace <__addsf3x+0x7c>
     a68:	5e c1       	rjmp	.+700    	; 0xd26 <__fp_zero>
     a6a:	0e f4       	brtc	.+2      	; 0xa6e <__addsf3x+0x1c>
     a6c:	e0 95       	com	r30
     a6e:	0b 2e       	mov	r0, r27
     a70:	ba 2f       	mov	r27, r26
     a72:	a0 2d       	mov	r26, r0
     a74:	0b 01       	movw	r0, r22
     a76:	b9 01       	movw	r22, r18
     a78:	90 01       	movw	r18, r0
     a7a:	0c 01       	movw	r0, r24
     a7c:	ca 01       	movw	r24, r20
     a7e:	a0 01       	movw	r20, r0
     a80:	11 24       	eor	r1, r1
     a82:	ff 27       	eor	r31, r31
     a84:	59 1b       	sub	r21, r25
     a86:	99 f0       	breq	.+38     	; 0xaae <__addsf3x+0x5c>
     a88:	59 3f       	cpi	r21, 0xF9	; 249
     a8a:	50 f4       	brcc	.+20     	; 0xaa0 <__addsf3x+0x4e>
     a8c:	50 3e       	cpi	r21, 0xE0	; 224
     a8e:	68 f1       	brcs	.+90     	; 0xaea <__addsf3x+0x98>
     a90:	1a 16       	cp	r1, r26
     a92:	f0 40       	sbci	r31, 0x00	; 0
     a94:	a2 2f       	mov	r26, r18
     a96:	23 2f       	mov	r18, r19
     a98:	34 2f       	mov	r19, r20
     a9a:	44 27       	eor	r20, r20
     a9c:	58 5f       	subi	r21, 0xF8	; 248
     a9e:	f3 cf       	rjmp	.-26     	; 0xa86 <__addsf3x+0x34>
     aa0:	46 95       	lsr	r20
     aa2:	37 95       	ror	r19
     aa4:	27 95       	ror	r18
     aa6:	a7 95       	ror	r26
     aa8:	f0 40       	sbci	r31, 0x00	; 0
     aaa:	53 95       	inc	r21
     aac:	c9 f7       	brne	.-14     	; 0xaa0 <__addsf3x+0x4e>
     aae:	7e f4       	brtc	.+30     	; 0xace <__addsf3x+0x7c>
     ab0:	1f 16       	cp	r1, r31
     ab2:	ba 0b       	sbc	r27, r26
     ab4:	62 0b       	sbc	r22, r18
     ab6:	73 0b       	sbc	r23, r19
     ab8:	84 0b       	sbc	r24, r20
     aba:	ba f0       	brmi	.+46     	; 0xaea <__addsf3x+0x98>
     abc:	91 50       	subi	r25, 0x01	; 1
     abe:	a1 f0       	breq	.+40     	; 0xae8 <__addsf3x+0x96>
     ac0:	ff 0f       	add	r31, r31
     ac2:	bb 1f       	adc	r27, r27
     ac4:	66 1f       	adc	r22, r22
     ac6:	77 1f       	adc	r23, r23
     ac8:	88 1f       	adc	r24, r24
     aca:	c2 f7       	brpl	.-16     	; 0xabc <__addsf3x+0x6a>
     acc:	0e c0       	rjmp	.+28     	; 0xaea <__addsf3x+0x98>
     ace:	ba 0f       	add	r27, r26
     ad0:	62 1f       	adc	r22, r18
     ad2:	73 1f       	adc	r23, r19
     ad4:	84 1f       	adc	r24, r20
     ad6:	48 f4       	brcc	.+18     	; 0xaea <__addsf3x+0x98>
     ad8:	87 95       	ror	r24
     ada:	77 95       	ror	r23
     adc:	67 95       	ror	r22
     ade:	b7 95       	ror	r27
     ae0:	f7 95       	ror	r31
     ae2:	9e 3f       	cpi	r25, 0xFE	; 254
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <__addsf3x+0x96>
     ae6:	b3 cf       	rjmp	.-154    	; 0xa4e <__addsf3+0x1e>
     ae8:	93 95       	inc	r25
     aea:	88 0f       	add	r24, r24
     aec:	08 f0       	brcs	.+2      	; 0xaf0 <__addsf3x+0x9e>
     aee:	99 27       	eor	r25, r25
     af0:	ee 0f       	add	r30, r30
     af2:	97 95       	ror	r25
     af4:	87 95       	ror	r24
     af6:	08 95       	ret

00000af8 <__cmpsf2>:
     af8:	a8 d0       	rcall	.+336    	; 0xc4a <__fp_cmp>
     afa:	08 f4       	brcc	.+2      	; 0xafe <__cmpsf2+0x6>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret

00000b00 <__divsf3>:
     b00:	0c d0       	rcall	.+24     	; 0xb1a <__divsf3x>
     b02:	de c0       	rjmp	.+444    	; 0xcc0 <__fp_round>
     b04:	d6 d0       	rcall	.+428    	; 0xcb2 <__fp_pscB>
     b06:	40 f0       	brcs	.+16     	; 0xb18 <__divsf3+0x18>
     b08:	cd d0       	rcall	.+410    	; 0xca4 <__fp_pscA>
     b0a:	30 f0       	brcs	.+12     	; 0xb18 <__divsf3+0x18>
     b0c:	21 f4       	brne	.+8      	; 0xb16 <__divsf3+0x16>
     b0e:	5f 3f       	cpi	r21, 0xFF	; 255
     b10:	19 f0       	breq	.+6      	; 0xb18 <__divsf3+0x18>
     b12:	bf c0       	rjmp	.+382    	; 0xc92 <__fp_inf>
     b14:	51 11       	cpse	r21, r1
     b16:	08 c1       	rjmp	.+528    	; 0xd28 <__fp_szero>
     b18:	c2 c0       	rjmp	.+388    	; 0xc9e <__fp_nan>

00000b1a <__divsf3x>:
     b1a:	e3 d0       	rcall	.+454    	; 0xce2 <__fp_split3>
     b1c:	98 f3       	brcs	.-26     	; 0xb04 <__divsf3+0x4>

00000b1e <__divsf3_pse>:
     b1e:	99 23       	and	r25, r25
     b20:	c9 f3       	breq	.-14     	; 0xb14 <__divsf3+0x14>
     b22:	55 23       	and	r21, r21
     b24:	b1 f3       	breq	.-20     	; 0xb12 <__divsf3+0x12>
     b26:	95 1b       	sub	r25, r21
     b28:	55 0b       	sbc	r21, r21
     b2a:	bb 27       	eor	r27, r27
     b2c:	aa 27       	eor	r26, r26
     b2e:	62 17       	cp	r22, r18
     b30:	73 07       	cpc	r23, r19
     b32:	84 07       	cpc	r24, r20
     b34:	38 f0       	brcs	.+14     	; 0xb44 <__divsf3_pse+0x26>
     b36:	9f 5f       	subi	r25, 0xFF	; 255
     b38:	5f 4f       	sbci	r21, 0xFF	; 255
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	44 1f       	adc	r20, r20
     b40:	aa 1f       	adc	r26, r26
     b42:	a9 f3       	breq	.-22     	; 0xb2e <__divsf3_pse+0x10>
     b44:	33 d0       	rcall	.+102    	; 0xbac <__divsf3_pse+0x8e>
     b46:	0e 2e       	mov	r0, r30
     b48:	3a f0       	brmi	.+14     	; 0xb58 <__divsf3_pse+0x3a>
     b4a:	e0 e8       	ldi	r30, 0x80	; 128
     b4c:	30 d0       	rcall	.+96     	; 0xbae <__divsf3_pse+0x90>
     b4e:	91 50       	subi	r25, 0x01	; 1
     b50:	50 40       	sbci	r21, 0x00	; 0
     b52:	e6 95       	lsr	r30
     b54:	00 1c       	adc	r0, r0
     b56:	ca f7       	brpl	.-14     	; 0xb4a <__divsf3_pse+0x2c>
     b58:	29 d0       	rcall	.+82     	; 0xbac <__divsf3_pse+0x8e>
     b5a:	fe 2f       	mov	r31, r30
     b5c:	27 d0       	rcall	.+78     	; 0xbac <__divsf3_pse+0x8e>
     b5e:	66 0f       	add	r22, r22
     b60:	77 1f       	adc	r23, r23
     b62:	88 1f       	adc	r24, r24
     b64:	bb 1f       	adc	r27, r27
     b66:	26 17       	cp	r18, r22
     b68:	37 07       	cpc	r19, r23
     b6a:	48 07       	cpc	r20, r24
     b6c:	ab 07       	cpc	r26, r27
     b6e:	b0 e8       	ldi	r27, 0x80	; 128
     b70:	09 f0       	breq	.+2      	; 0xb74 <__divsf3_pse+0x56>
     b72:	bb 0b       	sbc	r27, r27
     b74:	80 2d       	mov	r24, r0
     b76:	bf 01       	movw	r22, r30
     b78:	ff 27       	eor	r31, r31
     b7a:	93 58       	subi	r25, 0x83	; 131
     b7c:	5f 4f       	sbci	r21, 0xFF	; 255
     b7e:	2a f0       	brmi	.+10     	; 0xb8a <__divsf3_pse+0x6c>
     b80:	9e 3f       	cpi	r25, 0xFE	; 254
     b82:	51 05       	cpc	r21, r1
     b84:	68 f0       	brcs	.+26     	; 0xba0 <__divsf3_pse+0x82>
     b86:	85 c0       	rjmp	.+266    	; 0xc92 <__fp_inf>
     b88:	cf c0       	rjmp	.+414    	; 0xd28 <__fp_szero>
     b8a:	5f 3f       	cpi	r21, 0xFF	; 255
     b8c:	ec f3       	brlt	.-6      	; 0xb88 <__divsf3_pse+0x6a>
     b8e:	98 3e       	cpi	r25, 0xE8	; 232
     b90:	dc f3       	brlt	.-10     	; 0xb88 <__divsf3_pse+0x6a>
     b92:	86 95       	lsr	r24
     b94:	77 95       	ror	r23
     b96:	67 95       	ror	r22
     b98:	b7 95       	ror	r27
     b9a:	f7 95       	ror	r31
     b9c:	9f 5f       	subi	r25, 0xFF	; 255
     b9e:	c9 f7       	brne	.-14     	; 0xb92 <__divsf3_pse+0x74>
     ba0:	88 0f       	add	r24, r24
     ba2:	91 1d       	adc	r25, r1
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	97 f9       	bld	r25, 7
     baa:	08 95       	ret
     bac:	e1 e0       	ldi	r30, 0x01	; 1
     bae:	66 0f       	add	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	88 1f       	adc	r24, r24
     bb4:	bb 1f       	adc	r27, r27
     bb6:	62 17       	cp	r22, r18
     bb8:	73 07       	cpc	r23, r19
     bba:	84 07       	cpc	r24, r20
     bbc:	ba 07       	cpc	r27, r26
     bbe:	20 f0       	brcs	.+8      	; 0xbc8 <__divsf3_pse+0xaa>
     bc0:	62 1b       	sub	r22, r18
     bc2:	73 0b       	sbc	r23, r19
     bc4:	84 0b       	sbc	r24, r20
     bc6:	ba 0b       	sbc	r27, r26
     bc8:	ee 1f       	adc	r30, r30
     bca:	88 f7       	brcc	.-30     	; 0xbae <__divsf3_pse+0x90>
     bcc:	e0 95       	com	r30
     bce:	08 95       	ret

00000bd0 <__floatunsisf>:
     bd0:	e8 94       	clt
     bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <__floatsisf+0x12>

00000bd4 <__floatsisf>:
     bd4:	97 fb       	bst	r25, 7
     bd6:	3e f4       	brtc	.+14     	; 0xbe6 <__floatsisf+0x12>
     bd8:	90 95       	com	r25
     bda:	80 95       	com	r24
     bdc:	70 95       	com	r23
     bde:	61 95       	neg	r22
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	8f 4f       	sbci	r24, 0xFF	; 255
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	99 23       	and	r25, r25
     be8:	a9 f0       	breq	.+42     	; 0xc14 <__floatsisf+0x40>
     bea:	f9 2f       	mov	r31, r25
     bec:	96 e9       	ldi	r25, 0x96	; 150
     bee:	bb 27       	eor	r27, r27
     bf0:	93 95       	inc	r25
     bf2:	f6 95       	lsr	r31
     bf4:	87 95       	ror	r24
     bf6:	77 95       	ror	r23
     bf8:	67 95       	ror	r22
     bfa:	b7 95       	ror	r27
     bfc:	f1 11       	cpse	r31, r1
     bfe:	f8 cf       	rjmp	.-16     	; 0xbf0 <__floatsisf+0x1c>
     c00:	fa f4       	brpl	.+62     	; 0xc40 <__floatsisf+0x6c>
     c02:	bb 0f       	add	r27, r27
     c04:	11 f4       	brne	.+4      	; 0xc0a <__floatsisf+0x36>
     c06:	60 ff       	sbrs	r22, 0
     c08:	1b c0       	rjmp	.+54     	; 0xc40 <__floatsisf+0x6c>
     c0a:	6f 5f       	subi	r22, 0xFF	; 255
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	8f 4f       	sbci	r24, 0xFF	; 255
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	16 c0       	rjmp	.+44     	; 0xc40 <__floatsisf+0x6c>
     c14:	88 23       	and	r24, r24
     c16:	11 f0       	breq	.+4      	; 0xc1c <__floatsisf+0x48>
     c18:	96 e9       	ldi	r25, 0x96	; 150
     c1a:	11 c0       	rjmp	.+34     	; 0xc3e <__floatsisf+0x6a>
     c1c:	77 23       	and	r23, r23
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__floatsisf+0x54>
     c20:	9e e8       	ldi	r25, 0x8E	; 142
     c22:	87 2f       	mov	r24, r23
     c24:	76 2f       	mov	r23, r22
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <__floatsisf+0x5e>
     c28:	66 23       	and	r22, r22
     c2a:	71 f0       	breq	.+28     	; 0xc48 <__floatsisf+0x74>
     c2c:	96 e8       	ldi	r25, 0x86	; 134
     c2e:	86 2f       	mov	r24, r22
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	2a f0       	brmi	.+10     	; 0xc40 <__floatsisf+0x6c>
     c36:	9a 95       	dec	r25
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	88 1f       	adc	r24, r24
     c3e:	da f7       	brpl	.-10     	; 0xc36 <__floatsisf+0x62>
     c40:	88 0f       	add	r24, r24
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	97 f9       	bld	r25, 7
     c48:	08 95       	ret

00000c4a <__fp_cmp>:
     c4a:	99 0f       	add	r25, r25
     c4c:	00 08       	sbc	r0, r0
     c4e:	55 0f       	add	r21, r21
     c50:	aa 0b       	sbc	r26, r26
     c52:	e0 e8       	ldi	r30, 0x80	; 128
     c54:	fe ef       	ldi	r31, 0xFE	; 254
     c56:	16 16       	cp	r1, r22
     c58:	17 06       	cpc	r1, r23
     c5a:	e8 07       	cpc	r30, r24
     c5c:	f9 07       	cpc	r31, r25
     c5e:	c0 f0       	brcs	.+48     	; 0xc90 <__fp_cmp+0x46>
     c60:	12 16       	cp	r1, r18
     c62:	13 06       	cpc	r1, r19
     c64:	e4 07       	cpc	r30, r20
     c66:	f5 07       	cpc	r31, r21
     c68:	98 f0       	brcs	.+38     	; 0xc90 <__fp_cmp+0x46>
     c6a:	62 1b       	sub	r22, r18
     c6c:	73 0b       	sbc	r23, r19
     c6e:	84 0b       	sbc	r24, r20
     c70:	95 0b       	sbc	r25, r21
     c72:	39 f4       	brne	.+14     	; 0xc82 <__fp_cmp+0x38>
     c74:	0a 26       	eor	r0, r26
     c76:	61 f0       	breq	.+24     	; 0xc90 <__fp_cmp+0x46>
     c78:	23 2b       	or	r18, r19
     c7a:	24 2b       	or	r18, r20
     c7c:	25 2b       	or	r18, r21
     c7e:	21 f4       	brne	.+8      	; 0xc88 <__fp_cmp+0x3e>
     c80:	08 95       	ret
     c82:	0a 26       	eor	r0, r26
     c84:	09 f4       	brne	.+2      	; 0xc88 <__fp_cmp+0x3e>
     c86:	a1 40       	sbci	r26, 0x01	; 1
     c88:	a6 95       	lsr	r26
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	81 1d       	adc	r24, r1
     c8e:	81 1d       	adc	r24, r1
     c90:	08 95       	ret

00000c92 <__fp_inf>:
     c92:	97 f9       	bld	r25, 7
     c94:	9f 67       	ori	r25, 0x7F	; 127
     c96:	80 e8       	ldi	r24, 0x80	; 128
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	08 95       	ret

00000c9e <__fp_nan>:
     c9e:	9f ef       	ldi	r25, 0xFF	; 255
     ca0:	80 ec       	ldi	r24, 0xC0	; 192
     ca2:	08 95       	ret

00000ca4 <__fp_pscA>:
     ca4:	00 24       	eor	r0, r0
     ca6:	0a 94       	dec	r0
     ca8:	16 16       	cp	r1, r22
     caa:	17 06       	cpc	r1, r23
     cac:	18 06       	cpc	r1, r24
     cae:	09 06       	cpc	r0, r25
     cb0:	08 95       	ret

00000cb2 <__fp_pscB>:
     cb2:	00 24       	eor	r0, r0
     cb4:	0a 94       	dec	r0
     cb6:	12 16       	cp	r1, r18
     cb8:	13 06       	cpc	r1, r19
     cba:	14 06       	cpc	r1, r20
     cbc:	05 06       	cpc	r0, r21
     cbe:	08 95       	ret

00000cc0 <__fp_round>:
     cc0:	09 2e       	mov	r0, r25
     cc2:	03 94       	inc	r0
     cc4:	00 0c       	add	r0, r0
     cc6:	11 f4       	brne	.+4      	; 0xccc <__fp_round+0xc>
     cc8:	88 23       	and	r24, r24
     cca:	52 f0       	brmi	.+20     	; 0xce0 <__fp_round+0x20>
     ccc:	bb 0f       	add	r27, r27
     cce:	40 f4       	brcc	.+16     	; 0xce0 <__fp_round+0x20>
     cd0:	bf 2b       	or	r27, r31
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <__fp_round+0x18>
     cd4:	60 ff       	sbrs	r22, 0
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <__fp_round+0x20>
     cd8:	6f 5f       	subi	r22, 0xFF	; 255
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	8f 4f       	sbci	r24, 0xFF	; 255
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	08 95       	ret

00000ce2 <__fp_split3>:
     ce2:	57 fd       	sbrc	r21, 7
     ce4:	90 58       	subi	r25, 0x80	; 128
     ce6:	44 0f       	add	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	59 f0       	breq	.+22     	; 0xd02 <__fp_splitA+0x10>
     cec:	5f 3f       	cpi	r21, 0xFF	; 255
     cee:	71 f0       	breq	.+28     	; 0xd0c <__fp_splitA+0x1a>
     cf0:	47 95       	ror	r20

00000cf2 <__fp_splitA>:
     cf2:	88 0f       	add	r24, r24
     cf4:	97 fb       	bst	r25, 7
     cf6:	99 1f       	adc	r25, r25
     cf8:	61 f0       	breq	.+24     	; 0xd12 <__fp_splitA+0x20>
     cfa:	9f 3f       	cpi	r25, 0xFF	; 255
     cfc:	79 f0       	breq	.+30     	; 0xd1c <__fp_splitA+0x2a>
     cfe:	87 95       	ror	r24
     d00:	08 95       	ret
     d02:	12 16       	cp	r1, r18
     d04:	13 06       	cpc	r1, r19
     d06:	14 06       	cpc	r1, r20
     d08:	55 1f       	adc	r21, r21
     d0a:	f2 cf       	rjmp	.-28     	; 0xcf0 <__fp_split3+0xe>
     d0c:	46 95       	lsr	r20
     d0e:	f1 df       	rcall	.-30     	; 0xcf2 <__fp_splitA>
     d10:	08 c0       	rjmp	.+16     	; 0xd22 <__fp_splitA+0x30>
     d12:	16 16       	cp	r1, r22
     d14:	17 06       	cpc	r1, r23
     d16:	18 06       	cpc	r1, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	f1 cf       	rjmp	.-30     	; 0xcfe <__fp_splitA+0xc>
     d1c:	86 95       	lsr	r24
     d1e:	71 05       	cpc	r23, r1
     d20:	61 05       	cpc	r22, r1
     d22:	08 94       	sec
     d24:	08 95       	ret

00000d26 <__fp_zero>:
     d26:	e8 94       	clt

00000d28 <__fp_szero>:
     d28:	bb 27       	eor	r27, r27
     d2a:	66 27       	eor	r22, r22
     d2c:	77 27       	eor	r23, r23
     d2e:	cb 01       	movw	r24, r22
     d30:	97 f9       	bld	r25, 7
     d32:	08 95       	ret

00000d34 <__mulsf3>:
     d34:	0b d0       	rcall	.+22     	; 0xd4c <__mulsf3x>
     d36:	c4 cf       	rjmp	.-120    	; 0xcc0 <__fp_round>
     d38:	b5 df       	rcall	.-150    	; 0xca4 <__fp_pscA>
     d3a:	28 f0       	brcs	.+10     	; 0xd46 <__mulsf3+0x12>
     d3c:	ba df       	rcall	.-140    	; 0xcb2 <__fp_pscB>
     d3e:	18 f0       	brcs	.+6      	; 0xd46 <__mulsf3+0x12>
     d40:	95 23       	and	r25, r21
     d42:	09 f0       	breq	.+2      	; 0xd46 <__mulsf3+0x12>
     d44:	a6 cf       	rjmp	.-180    	; 0xc92 <__fp_inf>
     d46:	ab cf       	rjmp	.-170    	; 0xc9e <__fp_nan>
     d48:	11 24       	eor	r1, r1
     d4a:	ee cf       	rjmp	.-36     	; 0xd28 <__fp_szero>

00000d4c <__mulsf3x>:
     d4c:	ca df       	rcall	.-108    	; 0xce2 <__fp_split3>
     d4e:	a0 f3       	brcs	.-24     	; 0xd38 <__mulsf3+0x4>

00000d50 <__mulsf3_pse>:
     d50:	95 9f       	mul	r25, r21
     d52:	d1 f3       	breq	.-12     	; 0xd48 <__mulsf3+0x14>
     d54:	95 0f       	add	r25, r21
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	55 1f       	adc	r21, r21
     d5a:	62 9f       	mul	r22, r18
     d5c:	f0 01       	movw	r30, r0
     d5e:	72 9f       	mul	r23, r18
     d60:	bb 27       	eor	r27, r27
     d62:	f0 0d       	add	r31, r0
     d64:	b1 1d       	adc	r27, r1
     d66:	63 9f       	mul	r22, r19
     d68:	aa 27       	eor	r26, r26
     d6a:	f0 0d       	add	r31, r0
     d6c:	b1 1d       	adc	r27, r1
     d6e:	aa 1f       	adc	r26, r26
     d70:	64 9f       	mul	r22, r20
     d72:	66 27       	eor	r22, r22
     d74:	b0 0d       	add	r27, r0
     d76:	a1 1d       	adc	r26, r1
     d78:	66 1f       	adc	r22, r22
     d7a:	82 9f       	mul	r24, r18
     d7c:	22 27       	eor	r18, r18
     d7e:	b0 0d       	add	r27, r0
     d80:	a1 1d       	adc	r26, r1
     d82:	62 1f       	adc	r22, r18
     d84:	73 9f       	mul	r23, r19
     d86:	b0 0d       	add	r27, r0
     d88:	a1 1d       	adc	r26, r1
     d8a:	62 1f       	adc	r22, r18
     d8c:	83 9f       	mul	r24, r19
     d8e:	a0 0d       	add	r26, r0
     d90:	61 1d       	adc	r22, r1
     d92:	22 1f       	adc	r18, r18
     d94:	74 9f       	mul	r23, r20
     d96:	33 27       	eor	r19, r19
     d98:	a0 0d       	add	r26, r0
     d9a:	61 1d       	adc	r22, r1
     d9c:	23 1f       	adc	r18, r19
     d9e:	84 9f       	mul	r24, r20
     da0:	60 0d       	add	r22, r0
     da2:	21 1d       	adc	r18, r1
     da4:	82 2f       	mov	r24, r18
     da6:	76 2f       	mov	r23, r22
     da8:	6a 2f       	mov	r22, r26
     daa:	11 24       	eor	r1, r1
     dac:	9f 57       	subi	r25, 0x7F	; 127
     dae:	50 40       	sbci	r21, 0x00	; 0
     db0:	8a f0       	brmi	.+34     	; 0xdd4 <__mulsf3_pse+0x84>
     db2:	e1 f0       	breq	.+56     	; 0xdec <__mulsf3_pse+0x9c>
     db4:	88 23       	and	r24, r24
     db6:	4a f0       	brmi	.+18     	; 0xdca <__mulsf3_pse+0x7a>
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	bb 1f       	adc	r27, r27
     dbe:	66 1f       	adc	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	88 1f       	adc	r24, r24
     dc4:	91 50       	subi	r25, 0x01	; 1
     dc6:	50 40       	sbci	r21, 0x00	; 0
     dc8:	a9 f7       	brne	.-22     	; 0xdb4 <__mulsf3_pse+0x64>
     dca:	9e 3f       	cpi	r25, 0xFE	; 254
     dcc:	51 05       	cpc	r21, r1
     dce:	70 f0       	brcs	.+28     	; 0xdec <__mulsf3_pse+0x9c>
     dd0:	60 cf       	rjmp	.-320    	; 0xc92 <__fp_inf>
     dd2:	aa cf       	rjmp	.-172    	; 0xd28 <__fp_szero>
     dd4:	5f 3f       	cpi	r21, 0xFF	; 255
     dd6:	ec f3       	brlt	.-6      	; 0xdd2 <__mulsf3_pse+0x82>
     dd8:	98 3e       	cpi	r25, 0xE8	; 232
     dda:	dc f3       	brlt	.-10     	; 0xdd2 <__mulsf3_pse+0x82>
     ddc:	86 95       	lsr	r24
     dde:	77 95       	ror	r23
     de0:	67 95       	ror	r22
     de2:	b7 95       	ror	r27
     de4:	f7 95       	ror	r31
     de6:	e7 95       	ror	r30
     de8:	9f 5f       	subi	r25, 0xFF	; 255
     dea:	c1 f7       	brne	.-16     	; 0xddc <__mulsf3_pse+0x8c>
     dec:	fe 2b       	or	r31, r30
     dee:	88 0f       	add	r24, r24
     df0:	91 1d       	adc	r25, r1
     df2:	96 95       	lsr	r25
     df4:	87 95       	ror	r24
     df6:	97 f9       	bld	r25, 7
     df8:	08 95       	ret

00000dfa <pow>:
     dfa:	fa 01       	movw	r30, r20
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	30 96       	adiw	r30, 0x00	; 0
     e02:	21 05       	cpc	r18, r1
     e04:	31 05       	cpc	r19, r1
     e06:	99 f1       	breq	.+102    	; 0xe6e <pow+0x74>
     e08:	61 15       	cp	r22, r1
     e0a:	71 05       	cpc	r23, r1
     e0c:	61 f4       	brne	.+24     	; 0xe26 <pow+0x2c>
     e0e:	80 38       	cpi	r24, 0x80	; 128
     e10:	bf e3       	ldi	r27, 0x3F	; 63
     e12:	9b 07       	cpc	r25, r27
     e14:	49 f1       	breq	.+82     	; 0xe68 <pow+0x6e>
     e16:	68 94       	set
     e18:	90 38       	cpi	r25, 0x80	; 128
     e1a:	81 05       	cpc	r24, r1
     e1c:	61 f0       	breq	.+24     	; 0xe36 <pow+0x3c>
     e1e:	80 38       	cpi	r24, 0x80	; 128
     e20:	bf ef       	ldi	r27, 0xFF	; 255
     e22:	9b 07       	cpc	r25, r27
     e24:	41 f0       	breq	.+16     	; 0xe36 <pow+0x3c>
     e26:	99 23       	and	r25, r25
     e28:	42 f5       	brpl	.+80     	; 0xe7a <pow+0x80>
     e2a:	ff 3f       	cpi	r31, 0xFF	; 255
     e2c:	e1 05       	cpc	r30, r1
     e2e:	31 05       	cpc	r19, r1
     e30:	21 05       	cpc	r18, r1
     e32:	11 f1       	breq	.+68     	; 0xe78 <pow+0x7e>
     e34:	e8 94       	clt
     e36:	08 94       	sec
     e38:	e7 95       	ror	r30
     e3a:	d9 01       	movw	r26, r18
     e3c:	aa 23       	and	r26, r26
     e3e:	29 f4       	brne	.+10     	; 0xe4a <pow+0x50>
     e40:	ab 2f       	mov	r26, r27
     e42:	be 2f       	mov	r27, r30
     e44:	f8 5f       	subi	r31, 0xF8	; 248
     e46:	d0 f3       	brcs	.-12     	; 0xe3c <pow+0x42>
     e48:	10 c0       	rjmp	.+32     	; 0xe6a <pow+0x70>
     e4a:	ff 5f       	subi	r31, 0xFF	; 255
     e4c:	70 f4       	brcc	.+28     	; 0xe6a <pow+0x70>
     e4e:	a6 95       	lsr	r26
     e50:	e0 f7       	brcc	.-8      	; 0xe4a <pow+0x50>
     e52:	f7 39       	cpi	r31, 0x97	; 151
     e54:	50 f0       	brcs	.+20     	; 0xe6a <pow+0x70>
     e56:	19 f0       	breq	.+6      	; 0xe5e <pow+0x64>
     e58:	ff 3a       	cpi	r31, 0xAF	; 175
     e5a:	38 f4       	brcc	.+14     	; 0xe6a <pow+0x70>
     e5c:	9f 77       	andi	r25, 0x7F	; 127
     e5e:	9f 93       	push	r25
     e60:	0c d0       	rcall	.+24     	; 0xe7a <pow+0x80>
     e62:	0f 90       	pop	r0
     e64:	07 fc       	sbrc	r0, 7
     e66:	90 58       	subi	r25, 0x80	; 128
     e68:	08 95       	ret
     e6a:	3e f0       	brts	.+14     	; 0xe7a <pow+0x80>
     e6c:	18 cf       	rjmp	.-464    	; 0xc9e <__fp_nan>
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	9f e3       	ldi	r25, 0x3F	; 63
     e76:	08 95       	ret
     e78:	4f e7       	ldi	r20, 0x7F	; 127
     e7a:	9f 77       	andi	r25, 0x7F	; 127
     e7c:	5f 93       	push	r21
     e7e:	4f 93       	push	r20
     e80:	3f 93       	push	r19
     e82:	2f 93       	push	r18
     e84:	9e d0       	rcall	.+316    	; 0xfc2 <log>
     e86:	2f 91       	pop	r18
     e88:	3f 91       	pop	r19
     e8a:	4f 91       	pop	r20
     e8c:	5f 91       	pop	r21
     e8e:	52 df       	rcall	.-348    	; 0xd34 <__mulsf3>
     e90:	05 c0       	rjmp	.+10     	; 0xe9c <exp>
     e92:	19 f4       	brne	.+6      	; 0xe9a <pow+0xa0>
     e94:	0e f0       	brts	.+2      	; 0xe98 <pow+0x9e>
     e96:	fd ce       	rjmp	.-518    	; 0xc92 <__fp_inf>
     e98:	46 cf       	rjmp	.-372    	; 0xd26 <__fp_zero>
     e9a:	01 cf       	rjmp	.-510    	; 0xc9e <__fp_nan>

00000e9c <exp>:
     e9c:	2a df       	rcall	.-428    	; 0xcf2 <__fp_splitA>
     e9e:	c8 f3       	brcs	.-14     	; 0xe92 <pow+0x98>
     ea0:	96 38       	cpi	r25, 0x86	; 134
     ea2:	c0 f7       	brcc	.-16     	; 0xe94 <pow+0x9a>
     ea4:	07 f8       	bld	r0, 7
     ea6:	0f 92       	push	r0
     ea8:	e8 94       	clt
     eaa:	2b e3       	ldi	r18, 0x3B	; 59
     eac:	3a ea       	ldi	r19, 0xAA	; 170
     eae:	48 eb       	ldi	r20, 0xB8	; 184
     eb0:	5f e7       	ldi	r21, 0x7F	; 127
     eb2:	4e df       	rcall	.-356    	; 0xd50 <__mulsf3_pse>
     eb4:	0f 92       	push	r0
     eb6:	0f 92       	push	r0
     eb8:	0f 92       	push	r0
     eba:	4d b7       	in	r20, 0x3d	; 61
     ebc:	5e b7       	in	r21, 0x3e	; 62
     ebe:	0f 92       	push	r0
     ec0:	c0 d0       	rcall	.+384    	; 0x1042 <modf>
     ec2:	ee e2       	ldi	r30, 0x2E	; 46
     ec4:	f1 e0       	ldi	r31, 0x01	; 1
     ec6:	16 d0       	rcall	.+44     	; 0xef4 <__fp_powser>
     ec8:	4f 91       	pop	r20
     eca:	5f 91       	pop	r21
     ecc:	ef 91       	pop	r30
     ece:	ff 91       	pop	r31
     ed0:	e5 95       	asr	r30
     ed2:	ee 1f       	adc	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	49 f0       	breq	.+18     	; 0xeea <exp+0x4e>
     ed8:	fe 57       	subi	r31, 0x7E	; 126
     eda:	e0 68       	ori	r30, 0x80	; 128
     edc:	44 27       	eor	r20, r20
     ede:	ee 0f       	add	r30, r30
     ee0:	44 1f       	adc	r20, r20
     ee2:	fa 95       	dec	r31
     ee4:	e1 f7       	brne	.-8      	; 0xede <exp+0x42>
     ee6:	41 95       	neg	r20
     ee8:	55 0b       	sbc	r21, r21
     eea:	32 d0       	rcall	.+100    	; 0xf50 <ldexp>
     eec:	0f 90       	pop	r0
     eee:	07 fe       	sbrs	r0, 7
     ef0:	26 c0       	rjmp	.+76     	; 0xf3e <inverse>
     ef2:	08 95       	ret

00000ef4 <__fp_powser>:
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	1f 93       	push	r17
     efa:	0f 93       	push	r16
     efc:	ff 92       	push	r15
     efe:	ef 92       	push	r14
     f00:	df 92       	push	r13
     f02:	7b 01       	movw	r14, r22
     f04:	8c 01       	movw	r16, r24
     f06:	68 94       	set
     f08:	05 c0       	rjmp	.+10     	; 0xf14 <__fp_powser+0x20>
     f0a:	da 2e       	mov	r13, r26
     f0c:	ef 01       	movw	r28, r30
     f0e:	1e df       	rcall	.-452    	; 0xd4c <__mulsf3x>
     f10:	fe 01       	movw	r30, r28
     f12:	e8 94       	clt
     f14:	a5 91       	lpm	r26, Z+
     f16:	25 91       	lpm	r18, Z+
     f18:	35 91       	lpm	r19, Z+
     f1a:	45 91       	lpm	r20, Z+
     f1c:	55 91       	lpm	r21, Z+
     f1e:	ae f3       	brts	.-22     	; 0xf0a <__fp_powser+0x16>
     f20:	ef 01       	movw	r28, r30
     f22:	97 dd       	rcall	.-1234   	; 0xa52 <__addsf3x>
     f24:	fe 01       	movw	r30, r28
     f26:	97 01       	movw	r18, r14
     f28:	a8 01       	movw	r20, r16
     f2a:	da 94       	dec	r13
     f2c:	79 f7       	brne	.-34     	; 0xf0c <__fp_powser+0x18>
     f2e:	df 90       	pop	r13
     f30:	ef 90       	pop	r14
     f32:	ff 90       	pop	r15
     f34:	0f 91       	pop	r16
     f36:	1f 91       	pop	r17
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <inverse>:
     f3e:	9b 01       	movw	r18, r22
     f40:	ac 01       	movw	r20, r24
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e8       	ldi	r24, 0x80	; 128
     f48:	9f e3       	ldi	r25, 0x3F	; 63
     f4a:	da cd       	rjmp	.-1100   	; 0xb00 <__divsf3>
     f4c:	a2 ce       	rjmp	.-700    	; 0xc92 <__fp_inf>
     f4e:	ac c0       	rjmp	.+344    	; 0x10a8 <__fp_mpack>

00000f50 <ldexp>:
     f50:	d0 de       	rcall	.-608    	; 0xcf2 <__fp_splitA>
     f52:	e8 f3       	brcs	.-6      	; 0xf4e <inverse+0x10>
     f54:	99 23       	and	r25, r25
     f56:	d9 f3       	breq	.-10     	; 0xf4e <inverse+0x10>
     f58:	94 0f       	add	r25, r20
     f5a:	51 1d       	adc	r21, r1
     f5c:	bb f3       	brvs	.-18     	; 0xf4c <inverse+0xe>
     f5e:	91 50       	subi	r25, 0x01	; 1
     f60:	50 40       	sbci	r21, 0x00	; 0
     f62:	94 f0       	brlt	.+36     	; 0xf88 <ldexp+0x38>
     f64:	59 f0       	breq	.+22     	; 0xf7c <ldexp+0x2c>
     f66:	88 23       	and	r24, r24
     f68:	32 f0       	brmi	.+12     	; 0xf76 <ldexp+0x26>
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	50 40       	sbci	r21, 0x00	; 0
     f74:	c1 f7       	brne	.-16     	; 0xf66 <ldexp+0x16>
     f76:	9e 3f       	cpi	r25, 0xFE	; 254
     f78:	51 05       	cpc	r21, r1
     f7a:	44 f7       	brge	.-48     	; 0xf4c <inverse+0xe>
     f7c:	88 0f       	add	r24, r24
     f7e:	91 1d       	adc	r25, r1
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	97 f9       	bld	r25, 7
     f86:	08 95       	ret
     f88:	5f 3f       	cpi	r21, 0xFF	; 255
     f8a:	ac f0       	brlt	.+42     	; 0xfb6 <ldexp+0x66>
     f8c:	98 3e       	cpi	r25, 0xE8	; 232
     f8e:	9c f0       	brlt	.+38     	; 0xfb6 <ldexp+0x66>
     f90:	bb 27       	eor	r27, r27
     f92:	86 95       	lsr	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <ldexp+0x4e>
     f9c:	b1 60       	ori	r27, 0x01	; 1
     f9e:	93 95       	inc	r25
     fa0:	c1 f7       	brne	.-16     	; 0xf92 <ldexp+0x42>
     fa2:	bb 0f       	add	r27, r27
     fa4:	58 f7       	brcc	.-42     	; 0xf7c <ldexp+0x2c>
     fa6:	11 f4       	brne	.+4      	; 0xfac <ldexp+0x5c>
     fa8:	60 ff       	sbrs	r22, 0
     faa:	e8 cf       	rjmp	.-48     	; 0xf7c <ldexp+0x2c>
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	e3 cf       	rjmp	.-58     	; 0xf7c <ldexp+0x2c>
     fb6:	b8 ce       	rjmp	.-656    	; 0xd28 <__fp_szero>
     fb8:	0e f0       	brts	.+2      	; 0xfbc <ldexp+0x6c>
     fba:	76 c0       	rjmp	.+236    	; 0x10a8 <__fp_mpack>
     fbc:	70 ce       	rjmp	.-800    	; 0xc9e <__fp_nan>
     fbe:	68 94       	set
     fc0:	68 ce       	rjmp	.-816    	; 0xc92 <__fp_inf>

00000fc2 <log>:
     fc2:	97 de       	rcall	.-722    	; 0xcf2 <__fp_splitA>
     fc4:	c8 f3       	brcs	.-14     	; 0xfb8 <ldexp+0x68>
     fc6:	99 23       	and	r25, r25
     fc8:	d1 f3       	breq	.-12     	; 0xfbe <ldexp+0x6e>
     fca:	c6 f3       	brts	.-16     	; 0xfbc <ldexp+0x6c>
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	1f 93       	push	r17
     fd2:	0f 93       	push	r16
     fd4:	ff 92       	push	r15
     fd6:	c9 2f       	mov	r28, r25
     fd8:	dd 27       	eor	r29, r29
     fda:	88 23       	and	r24, r24
     fdc:	2a f0       	brmi	.+10     	; 0xfe8 <log+0x26>
     fde:	21 97       	sbiw	r28, 0x01	; 1
     fe0:	66 0f       	add	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	88 1f       	adc	r24, r24
     fe6:	da f7       	brpl	.-10     	; 0xfde <log+0x1c>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e8       	ldi	r20, 0x80	; 128
     fee:	5f eb       	ldi	r21, 0xBF	; 191
     ff0:	9f e3       	ldi	r25, 0x3F	; 63
     ff2:	88 39       	cpi	r24, 0x98	; 152
     ff4:	20 f0       	brcs	.+8      	; 0xffe <log+0x3c>
     ff6:	80 3e       	cpi	r24, 0xE0	; 224
     ff8:	30 f0       	brcs	.+12     	; 0x1006 <log+0x44>
     ffa:	21 96       	adiw	r28, 0x01	; 1
     ffc:	8f 77       	andi	r24, 0x7F	; 127
     ffe:	18 dd       	rcall	.-1488   	; 0xa30 <__addsf3>
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	03 c0       	rjmp	.+6      	; 0x100c <log+0x4a>
    1006:	14 dd       	rcall	.-1496   	; 0xa30 <__addsf3>
    1008:	e3 e8       	ldi	r30, 0x83	; 131
    100a:	f1 e0       	ldi	r31, 0x01	; 1
    100c:	73 df       	rcall	.-282    	; 0xef4 <__fp_powser>
    100e:	8b 01       	movw	r16, r22
    1010:	be 01       	movw	r22, r28
    1012:	ec 01       	movw	r28, r24
    1014:	fb 2e       	mov	r15, r27
    1016:	6f 57       	subi	r22, 0x7F	; 127
    1018:	71 09       	sbc	r23, r1
    101a:	75 95       	asr	r23
    101c:	77 1f       	adc	r23, r23
    101e:	88 0b       	sbc	r24, r24
    1020:	99 0b       	sbc	r25, r25
    1022:	d8 dd       	rcall	.-1104   	; 0xbd4 <__floatsisf>
    1024:	28 e1       	ldi	r18, 0x18	; 24
    1026:	32 e7       	ldi	r19, 0x72	; 114
    1028:	41 e3       	ldi	r20, 0x31	; 49
    102a:	5f e3       	ldi	r21, 0x3F	; 63
    102c:	8f de       	rcall	.-738    	; 0xd4c <__mulsf3x>
    102e:	af 2d       	mov	r26, r15
    1030:	98 01       	movw	r18, r16
    1032:	ae 01       	movw	r20, r28
    1034:	ff 90       	pop	r15
    1036:	0f 91       	pop	r16
    1038:	1f 91       	pop	r17
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	09 dd       	rcall	.-1518   	; 0xa52 <__addsf3x>
    1040:	3f ce       	rjmp	.-898    	; 0xcc0 <__fp_round>

00001042 <modf>:
    1042:	fa 01       	movw	r30, r20
    1044:	dc 01       	movw	r26, r24
    1046:	aa 0f       	add	r26, r26
    1048:	bb 1f       	adc	r27, r27
    104a:	9b 01       	movw	r18, r22
    104c:	ac 01       	movw	r20, r24
    104e:	bf 57       	subi	r27, 0x7F	; 127
    1050:	28 f4       	brcc	.+10     	; 0x105c <modf+0x1a>
    1052:	22 27       	eor	r18, r18
    1054:	33 27       	eor	r19, r19
    1056:	44 27       	eor	r20, r20
    1058:	50 78       	andi	r21, 0x80	; 128
    105a:	1f c0       	rjmp	.+62     	; 0x109a <modf+0x58>
    105c:	b7 51       	subi	r27, 0x17	; 23
    105e:	88 f4       	brcc	.+34     	; 0x1082 <modf+0x40>
    1060:	ab 2f       	mov	r26, r27
    1062:	00 24       	eor	r0, r0
    1064:	46 95       	lsr	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	01 1c       	adc	r0, r1
    106c:	a3 95       	inc	r26
    106e:	d2 f3       	brmi	.-12     	; 0x1064 <modf+0x22>
    1070:	00 20       	and	r0, r0
    1072:	69 f0       	breq	.+26     	; 0x108e <modf+0x4c>
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	44 1f       	adc	r20, r20
    107a:	b3 95       	inc	r27
    107c:	da f3       	brmi	.-10     	; 0x1074 <modf+0x32>
    107e:	0d d0       	rcall	.+26     	; 0x109a <modf+0x58>
    1080:	d6 cc       	rjmp	.-1620   	; 0xa2e <__subsf3>
    1082:	61 30       	cpi	r22, 0x01	; 1
    1084:	71 05       	cpc	r23, r1
    1086:	a0 e8       	ldi	r26, 0x80	; 128
    1088:	8a 07       	cpc	r24, r26
    108a:	b9 46       	sbci	r27, 0x69	; 105
    108c:	30 f4       	brcc	.+12     	; 0x109a <modf+0x58>
    108e:	9b 01       	movw	r18, r22
    1090:	ac 01       	movw	r20, r24
    1092:	66 27       	eor	r22, r22
    1094:	77 27       	eor	r23, r23
    1096:	88 27       	eor	r24, r24
    1098:	90 78       	andi	r25, 0x80	; 128
    109a:	30 96       	adiw	r30, 0x00	; 0
    109c:	21 f0       	breq	.+8      	; 0x10a6 <modf+0x64>
    109e:	20 83       	st	Z, r18
    10a0:	31 83       	std	Z+1, r19	; 0x01
    10a2:	42 83       	std	Z+2, r20	; 0x02
    10a4:	53 83       	std	Z+3, r21	; 0x03
    10a6:	08 95       	ret

000010a8 <__fp_mpack>:
    10a8:	9f 3f       	cpi	r25, 0xFF	; 255
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <__fp_mpack_finite+0xc>

000010ac <__fp_mpack_finite>:
    10ac:	91 50       	subi	r25, 0x01	; 1
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <__fp_mpack_finite+0xc>
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b7 95       	ror	r27
    10b8:	88 0f       	add	r24, r24
    10ba:	91 1d       	adc	r25, r1
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	97 f9       	bld	r25, 7
    10c2:	08 95       	ret

000010c4 <__tablejump2__>:
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31

000010c8 <__tablejump__>:
    10c8:	05 90       	lpm	r0, Z+
    10ca:	f4 91       	lpm	r31, Z
    10cc:	e0 2d       	mov	r30, r0
    10ce:	09 94       	ijmp

000010d0 <__adddi3_s8>:
    10d0:	00 24       	eor	r0, r0
    10d2:	a7 fd       	sbrc	r26, 7
    10d4:	00 94       	com	r0
    10d6:	2a 0f       	add	r18, r26
    10d8:	30 1d       	adc	r19, r0
    10da:	40 1d       	adc	r20, r0
    10dc:	50 1d       	adc	r21, r0
    10de:	60 1d       	adc	r22, r0
    10e0:	70 1d       	adc	r23, r0
    10e2:	80 1d       	adc	r24, r0
    10e4:	90 1d       	adc	r25, r0
    10e6:	08 95       	ret

000010e8 <malloc>:
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	91 05       	cpc	r25, r1
    10f0:	10 f4       	brcc	.+4      	; 0x10f6 <malloc+0xe>
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	e0 91 27 01 	lds	r30, 0x0127
    10fa:	f0 91 28 01 	lds	r31, 0x0128
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	30 97       	sbiw	r30, 0x00	; 0
    1108:	39 f1       	breq	.+78     	; 0x1158 <malloc+0x70>
    110a:	40 81       	ld	r20, Z
    110c:	51 81       	ldd	r21, Z+1	; 0x01
    110e:	48 17       	cp	r20, r24
    1110:	59 07       	cpc	r21, r25
    1112:	b8 f0       	brcs	.+46     	; 0x1142 <malloc+0x5a>
    1114:	48 17       	cp	r20, r24
    1116:	59 07       	cpc	r21, r25
    1118:	71 f4       	brne	.+28     	; 0x1136 <malloc+0x4e>
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	93 81       	ldd	r25, Z+3	; 0x03
    111e:	10 97       	sbiw	r26, 0x00	; 0
    1120:	29 f0       	breq	.+10     	; 0x112c <malloc+0x44>
    1122:	13 96       	adiw	r26, 0x03	; 3
    1124:	9c 93       	st	X, r25
    1126:	8e 93       	st	-X, r24
    1128:	12 97       	sbiw	r26, 0x02	; 2
    112a:	2c c0       	rjmp	.+88     	; 0x1184 <malloc+0x9c>
    112c:	90 93 28 01 	sts	0x0128, r25
    1130:	80 93 27 01 	sts	0x0127, r24
    1134:	27 c0       	rjmp	.+78     	; 0x1184 <malloc+0x9c>
    1136:	21 15       	cp	r18, r1
    1138:	31 05       	cpc	r19, r1
    113a:	31 f0       	breq	.+12     	; 0x1148 <malloc+0x60>
    113c:	42 17       	cp	r20, r18
    113e:	53 07       	cpc	r21, r19
    1140:	18 f0       	brcs	.+6      	; 0x1148 <malloc+0x60>
    1142:	a9 01       	movw	r20, r18
    1144:	db 01       	movw	r26, r22
    1146:	01 c0       	rjmp	.+2      	; 0x114a <malloc+0x62>
    1148:	ef 01       	movw	r28, r30
    114a:	9a 01       	movw	r18, r20
    114c:	bd 01       	movw	r22, r26
    114e:	df 01       	movw	r26, r30
    1150:	02 80       	ldd	r0, Z+2	; 0x02
    1152:	f3 81       	ldd	r31, Z+3	; 0x03
    1154:	e0 2d       	mov	r30, r0
    1156:	d7 cf       	rjmp	.-82     	; 0x1106 <malloc+0x1e>
    1158:	21 15       	cp	r18, r1
    115a:	31 05       	cpc	r19, r1
    115c:	f9 f0       	breq	.+62     	; 0x119c <malloc+0xb4>
    115e:	28 1b       	sub	r18, r24
    1160:	39 0b       	sbc	r19, r25
    1162:	24 30       	cpi	r18, 0x04	; 4
    1164:	31 05       	cpc	r19, r1
    1166:	80 f4       	brcc	.+32     	; 0x1188 <malloc+0xa0>
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	61 15       	cp	r22, r1
    116e:	71 05       	cpc	r23, r1
    1170:	21 f0       	breq	.+8      	; 0x117a <malloc+0x92>
    1172:	fb 01       	movw	r30, r22
    1174:	93 83       	std	Z+3, r25	; 0x03
    1176:	82 83       	std	Z+2, r24	; 0x02
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <malloc+0x9a>
    117a:	90 93 28 01 	sts	0x0128, r25
    117e:	80 93 27 01 	sts	0x0127, r24
    1182:	fe 01       	movw	r30, r28
    1184:	32 96       	adiw	r30, 0x02	; 2
    1186:	44 c0       	rjmp	.+136    	; 0x1210 <malloc+0x128>
    1188:	fe 01       	movw	r30, r28
    118a:	e2 0f       	add	r30, r18
    118c:	f3 1f       	adc	r31, r19
    118e:	81 93       	st	Z+, r24
    1190:	91 93       	st	Z+, r25
    1192:	22 50       	subi	r18, 0x02	; 2
    1194:	31 09       	sbc	r19, r1
    1196:	39 83       	std	Y+1, r19	; 0x01
    1198:	28 83       	st	Y, r18
    119a:	3a c0       	rjmp	.+116    	; 0x1210 <malloc+0x128>
    119c:	20 91 25 01 	lds	r18, 0x0125
    11a0:	30 91 26 01 	lds	r19, 0x0126
    11a4:	23 2b       	or	r18, r19
    11a6:	41 f4       	brne	.+16     	; 0x11b8 <malloc+0xd0>
    11a8:	20 91 02 01 	lds	r18, 0x0102
    11ac:	30 91 03 01 	lds	r19, 0x0103
    11b0:	30 93 26 01 	sts	0x0126, r19
    11b4:	20 93 25 01 	sts	0x0125, r18
    11b8:	20 91 00 01 	lds	r18, 0x0100
    11bc:	30 91 01 01 	lds	r19, 0x0101
    11c0:	21 15       	cp	r18, r1
    11c2:	31 05       	cpc	r19, r1
    11c4:	41 f4       	brne	.+16     	; 0x11d6 <malloc+0xee>
    11c6:	2d b7       	in	r18, 0x3d	; 61
    11c8:	3e b7       	in	r19, 0x3e	; 62
    11ca:	40 91 04 01 	lds	r20, 0x0104
    11ce:	50 91 05 01 	lds	r21, 0x0105
    11d2:	24 1b       	sub	r18, r20
    11d4:	35 0b       	sbc	r19, r21
    11d6:	e0 91 25 01 	lds	r30, 0x0125
    11da:	f0 91 26 01 	lds	r31, 0x0126
    11de:	e2 17       	cp	r30, r18
    11e0:	f3 07       	cpc	r31, r19
    11e2:	a0 f4       	brcc	.+40     	; 0x120c <malloc+0x124>
    11e4:	2e 1b       	sub	r18, r30
    11e6:	3f 0b       	sbc	r19, r31
    11e8:	28 17       	cp	r18, r24
    11ea:	39 07       	cpc	r19, r25
    11ec:	78 f0       	brcs	.+30     	; 0x120c <malloc+0x124>
    11ee:	ac 01       	movw	r20, r24
    11f0:	4e 5f       	subi	r20, 0xFE	; 254
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	24 17       	cp	r18, r20
    11f6:	35 07       	cpc	r19, r21
    11f8:	48 f0       	brcs	.+18     	; 0x120c <malloc+0x124>
    11fa:	4e 0f       	add	r20, r30
    11fc:	5f 1f       	adc	r21, r31
    11fe:	50 93 26 01 	sts	0x0126, r21
    1202:	40 93 25 01 	sts	0x0125, r20
    1206:	81 93       	st	Z+, r24
    1208:	91 93       	st	Z+, r25
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <malloc+0x128>
    120c:	e0 e0       	ldi	r30, 0x00	; 0
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	cf 01       	movw	r24, r30
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <free>:
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	09 f4       	brne	.+2      	; 0x1222 <free+0xa>
    1220:	87 c0       	rjmp	.+270    	; 0x1330 <free+0x118>
    1222:	fc 01       	movw	r30, r24
    1224:	32 97       	sbiw	r30, 0x02	; 2
    1226:	13 82       	std	Z+3, r1	; 0x03
    1228:	12 82       	std	Z+2, r1	; 0x02
    122a:	c0 91 27 01 	lds	r28, 0x0127
    122e:	d0 91 28 01 	lds	r29, 0x0128
    1232:	20 97       	sbiw	r28, 0x00	; 0
    1234:	81 f4       	brne	.+32     	; 0x1256 <free+0x3e>
    1236:	20 81       	ld	r18, Z
    1238:	31 81       	ldd	r19, Z+1	; 0x01
    123a:	28 0f       	add	r18, r24
    123c:	39 1f       	adc	r19, r25
    123e:	80 91 25 01 	lds	r24, 0x0125
    1242:	90 91 26 01 	lds	r25, 0x0126
    1246:	82 17       	cp	r24, r18
    1248:	93 07       	cpc	r25, r19
    124a:	79 f5       	brne	.+94     	; 0x12aa <free+0x92>
    124c:	f0 93 26 01 	sts	0x0126, r31
    1250:	e0 93 25 01 	sts	0x0125, r30
    1254:	6d c0       	rjmp	.+218    	; 0x1330 <free+0x118>
    1256:	de 01       	movw	r26, r28
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	ae 17       	cp	r26, r30
    125e:	bf 07       	cpc	r27, r31
    1260:	50 f4       	brcc	.+20     	; 0x1276 <free+0x5e>
    1262:	12 96       	adiw	r26, 0x02	; 2
    1264:	4d 91       	ld	r20, X+
    1266:	5c 91       	ld	r21, X
    1268:	13 97       	sbiw	r26, 0x03	; 3
    126a:	9d 01       	movw	r18, r26
    126c:	41 15       	cp	r20, r1
    126e:	51 05       	cpc	r21, r1
    1270:	09 f1       	breq	.+66     	; 0x12b4 <free+0x9c>
    1272:	da 01       	movw	r26, r20
    1274:	f3 cf       	rjmp	.-26     	; 0x125c <free+0x44>
    1276:	b3 83       	std	Z+3, r27	; 0x03
    1278:	a2 83       	std	Z+2, r26	; 0x02
    127a:	40 81       	ld	r20, Z
    127c:	51 81       	ldd	r21, Z+1	; 0x01
    127e:	84 0f       	add	r24, r20
    1280:	95 1f       	adc	r25, r21
    1282:	8a 17       	cp	r24, r26
    1284:	9b 07       	cpc	r25, r27
    1286:	71 f4       	brne	.+28     	; 0x12a4 <free+0x8c>
    1288:	8d 91       	ld	r24, X+
    128a:	9c 91       	ld	r25, X
    128c:	11 97       	sbiw	r26, 0x01	; 1
    128e:	84 0f       	add	r24, r20
    1290:	95 1f       	adc	r25, r21
    1292:	02 96       	adiw	r24, 0x02	; 2
    1294:	91 83       	std	Z+1, r25	; 0x01
    1296:	80 83       	st	Z, r24
    1298:	12 96       	adiw	r26, 0x02	; 2
    129a:	8d 91       	ld	r24, X+
    129c:	9c 91       	ld	r25, X
    129e:	13 97       	sbiw	r26, 0x03	; 3
    12a0:	93 83       	std	Z+3, r25	; 0x03
    12a2:	82 83       	std	Z+2, r24	; 0x02
    12a4:	21 15       	cp	r18, r1
    12a6:	31 05       	cpc	r19, r1
    12a8:	29 f4       	brne	.+10     	; 0x12b4 <free+0x9c>
    12aa:	f0 93 28 01 	sts	0x0128, r31
    12ae:	e0 93 27 01 	sts	0x0127, r30
    12b2:	3e c0       	rjmp	.+124    	; 0x1330 <free+0x118>
    12b4:	d9 01       	movw	r26, r18
    12b6:	13 96       	adiw	r26, 0x03	; 3
    12b8:	fc 93       	st	X, r31
    12ba:	ee 93       	st	-X, r30
    12bc:	12 97       	sbiw	r26, 0x02	; 2
    12be:	4d 91       	ld	r20, X+
    12c0:	5d 91       	ld	r21, X+
    12c2:	a4 0f       	add	r26, r20
    12c4:	b5 1f       	adc	r27, r21
    12c6:	ea 17       	cp	r30, r26
    12c8:	fb 07       	cpc	r31, r27
    12ca:	79 f4       	brne	.+30     	; 0x12ea <free+0xd2>
    12cc:	80 81       	ld	r24, Z
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	84 0f       	add	r24, r20
    12d2:	95 1f       	adc	r25, r21
    12d4:	02 96       	adiw	r24, 0x02	; 2
    12d6:	d9 01       	movw	r26, r18
    12d8:	11 96       	adiw	r26, 0x01	; 1
    12da:	9c 93       	st	X, r25
    12dc:	8e 93       	st	-X, r24
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	13 96       	adiw	r26, 0x03	; 3
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
    12e8:	12 97       	sbiw	r26, 0x02	; 2
    12ea:	e0 e0       	ldi	r30, 0x00	; 0
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	19 f0       	breq	.+6      	; 0x12fc <free+0xe4>
    12f6:	fe 01       	movw	r30, r28
    12f8:	ec 01       	movw	r28, r24
    12fa:	f9 cf       	rjmp	.-14     	; 0x12ee <free+0xd6>
    12fc:	ce 01       	movw	r24, r28
    12fe:	02 96       	adiw	r24, 0x02	; 2
    1300:	28 81       	ld	r18, Y
    1302:	39 81       	ldd	r19, Y+1	; 0x01
    1304:	82 0f       	add	r24, r18
    1306:	93 1f       	adc	r25, r19
    1308:	20 91 25 01 	lds	r18, 0x0125
    130c:	30 91 26 01 	lds	r19, 0x0126
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	69 f4       	brne	.+26     	; 0x1330 <free+0x118>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	29 f4       	brne	.+10     	; 0x1324 <free+0x10c>
    131a:	10 92 28 01 	sts	0x0128, r1
    131e:	10 92 27 01 	sts	0x0127, r1
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <free+0x110>
    1324:	13 82       	std	Z+3, r1	; 0x03
    1326:	12 82       	std	Z+2, r1	; 0x02
    1328:	d0 93 26 01 	sts	0x0126, r29
    132c:	c0 93 25 01 	sts	0x0125, r28
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <_exit>:
    1336:	f8 94       	cli

00001338 <__stop_program>:
    1338:	ff cf       	rjmp	.-2      	; 0x1338 <__stop_program>
